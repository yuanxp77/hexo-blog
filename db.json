{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/mac-osx.css","path":"css/mac-osx.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/1.png","path":"img/1.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/2.png","path":"img/2.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bg.png","path":"img/bg.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/butterfly-icon.png","path":"img/butterfly-icon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/cat.png","path":"img/cat.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/error-page.png","path":"img/error-page.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/smile.gif","path":"img/smile.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/news/index.md","hash":"a8c296ea7765b832b57487f1cc86e43dff8d171c","modified":1744250939991},{"_id":"source/release-plan/index.md","hash":"282bcbed6b72f228e548042d0943e282b51cafc9","modified":1744256830886},{"_id":"source/_posts/.DS_Store","hash":"bcd1680632b58acb55bb0244cea3fb055b806f45","modified":1744271800520},{"_id":"source/_posts/Linux常用命令.md","hash":"1caeac6bb7550ce1fe0a95ed9e7b96ea24ffb334","modified":1732094456735},{"_id":"source/.DS_Store","hash":"cf4bce9aa9a4911ecd761ede197b71df117c9127","modified":1744271805529},{"_id":"source/_posts/PlantUML绘制时序图.md","hash":"1e2e6953858ccc1ab11a551380957597b3b9a5d3","modified":1733223430330},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1732186475075},{"_id":"source/_posts/一种写Hexo博客的姿势.md","hash":"428a17efe543d2d3b6a7db592ea28183fef457fa","modified":1733832712962},{"_id":"source/tags/index.md","hash":"03b34acc2269983c592f98d34b7cdad31c906f96","modified":1733827993864},{"_id":"source/about/index.md","hash":"adaf4c0c9a50b65555c77389f73a281fcc42d6a5","modified":1734854792253},{"_id":"source/_posts/PlantUML绘制时序图/2024-12-03-18-25-51.png","hash":"5fdc596d83b3c41b6e1a1198548ad35a3ade0876","modified":1733221552301},{"_id":"themes/butterfly/package.json","hash":"6a18d2656255c001cdc28f4e0742a0c1db55320e","modified":1730787248912},{"_id":"themes/butterfly/README_CN.md","hash":"6e79be6f188bd671eb6ef1084ea7dd757fa2b3e9","modified":1730787248899},{"_id":"themes/butterfly/_config.yml","hash":"30b0e274e266a2c4566bd5122681b41f7a7affea","modified":1730795694993},{"_id":"themes/butterfly/README.md","hash":"310bf423097f1cefb6121ce3f115b2ef68aacc44","modified":1730787248899},{"_id":"themes/butterfly/.git.bak/config","hash":"c42d9f2ec1914c29109b1a5aac752df7e9e857f8","modified":1730787248897},{"_id":"themes/butterfly/.DS_Store","hash":"8892e59c4f5abccc002011613cbe044f293c010f","modified":1733739604878},{"_id":"themes/butterfly/.git.bak/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1730787248895},{"_id":"themes/butterfly/.git.bak/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1730787247176},{"_id":"themes/butterfly/.git.bak/index","hash":"751ba0af801217d040987f8c9f78a7ccc6d5425b","modified":1731327648472},{"_id":"themes/butterfly/.github/FUNDING.yml","hash":"da5e77f5e0cdb7e11b36546fb6796d10e3dfbe5d","modified":1730787248898},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1730787248899},{"_id":"themes/butterfly/languages/default.yml","hash":"f46a8e362641f7a7c432d68e3984e739d5fe6b44","modified":1730787248900},{"_id":"themes/butterfly/languages/en.yml","hash":"f46a8e362641f7a7c432d68e3984e739d5fe6b44","modified":1730787248900},{"_id":"themes/butterfly/languages/ja.yml","hash":"c978fbf9421af4d96978161cef828ea88ae06037","modified":1730787248900},{"_id":"themes/butterfly/plugins.yml","hash":"a244af3b578de079666bd87c3055917220e63c25","modified":1730787248912},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"e91ac1a94e1fc84cd75bc6b0a8b7a62acfb2a516","modified":1730787248900},{"_id":"themes/butterfly/.git.bak/packed-refs","hash":"a0bddf425550505b5952acb338d50c36c67a7a4d","modified":1730787248894},{"_id":"themes/butterfly/layout/archive.pug","hash":"bb32c9c476372de747dfa563b83f77d7a917a77d","modified":1730787248900},{"_id":"themes/butterfly/languages/ko.yml","hash":"ca8d31350e60b5849bb609a4d33f90d3dd8905a2","modified":1730787248900},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"9fecee5467e9c5034515fea73f1901c3c67e8ef9","modified":1730787248900},{"_id":"themes/butterfly/languages/zh-HK.yml","hash":"c3e863ad5b5aa618873ad4370cf0335a9cc67b39","modified":1730787248900},{"_id":"themes/butterfly/layout/category.pug","hash":"bf07d9624ac7285214c7f1d505da3a813c164c8c","modified":1730787248901},{"_id":"themes/butterfly/layout/index.pug","hash":"6aba5fd01aba75fd38ef2e2c1d406d951b8c5560","modified":1730787248911},{"_id":"themes/butterfly/layout/post.pug","hash":"e30923c2ec7deca7b2f64d0a099ee727f7069a52","modified":1730787248912},{"_id":"themes/butterfly/layout/page.pug","hash":"a59b90dd3f845ef6bac18091c55e8e019f4fe7a3","modified":1730787248911},{"_id":"themes/butterfly/.git.bak/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1730787247176},{"_id":"themes/butterfly/layout/tag.pug","hash":"98c0084a4c62415775ca9e261e3d4eeb7668f35b","modified":1730787248912},{"_id":"themes/butterfly/.git.bak/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1730787247177},{"_id":"themes/butterfly/.git.bak/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1730787247178},{"_id":"themes/butterfly/.git.bak/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1730787247177},{"_id":"themes/butterfly/.git.bak/hooks/fsmonitor-watchman.sample","hash":"0ec0ec9ac11111433d17ea79e0ae8cec650dcfa4","modified":1730787247177},{"_id":"themes/butterfly/.git.bak/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1730787247178},{"_id":"themes/butterfly/.git.bak/hooks/pre-push.sample","hash":"a599b773b930ca83dbc3a5c7c13059ac4a6eaedc","modified":1730787247179},{"_id":"themes/butterfly/.git.bak/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1730787247178},{"_id":"themes/butterfly/.git.bak/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1730787247177},{"_id":"themes/butterfly/.git.bak/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1730787247177},{"_id":"themes/butterfly/.git.bak/hooks/push-to-checkout.sample","hash":"508240328c8b55f8157c93c43bf5e291e5d2fbcb","modified":1730787247179},{"_id":"themes/butterfly/.git.bak/hooks/update.sample","hash":"730e6bd5225478bab6147b7a62a6e2ae21d40507","modified":1730787247179},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"df07add8fca55a7a12173af53201d306000fd9e0","modified":1730787248898},{"_id":"themes/butterfly/.git.bak/logs/HEAD","hash":"616a570de3747f6751fdeebf853b6b94f42a5ae6","modified":1730787248896},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1730787248899},{"_id":"themes/butterfly/.git.bak/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1730787247176},{"_id":"themes/butterfly/source/.DS_Store","hash":"fe1607d0e58dafaacccab2e9b115c47d04be7453","modified":1733739609895},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1730787248899},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1730787248899},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7b4831ae8f8f8c55dd1b856781210c517c63e6dd","modified":1730787248899},{"_id":"themes/butterfly/.git.bak/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1730787247175},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"82548510310fb44587371fcc9afd7f0bbdb673b1","modified":1730787248901},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"78cd51877c72a66de13ad88af6687627d4743b03","modified":1730787248901},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"cd2e0141d7bbd2bd348703ead52c8060904ab338","modified":1730787248901},{"_id":"themes/butterfly/scripts/common/postDesc.js","hash":"b69c137c06791db58e347474b88803e112d100dd","modified":1730787248912},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"345cb07213cdf66cfef7d9699c60f5f3297e9585","modified":1730787248902},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1730787248912},{"_id":"themes/butterfly/scripts/events/404.js","hash":"a196e0d2eb40d1643bcf53a467ad37104f877ca5","modified":1730787248912},{"_id":"themes/butterfly/scripts/events/merge_config.js","hash":"072f042e069e7a0523fa439569c0c672f389b5c4","modified":1730787248913},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"0e59424100fc3138b9096b38a0a2384a6411f8d9","modified":1730787248912},{"_id":"themes/butterfly/scripts/events/init.js","hash":"428b94c7b9e83f7ea36227dee66bfe3c23aee4a8","modified":1730787248912},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"1ac9527c510ca757724f15dec84b0ead032411b2","modified":1730787248913},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1730787248913},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"a8eef3f37428436554f58a2b6bac7c255fbdf38d","modified":1730787248913},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"24a88d138ccabf29698a6cfe399b2e10f126367f","modified":1730787248913},{"_id":"themes/butterfly/scripts/helpers/getArchiveLength.js","hash":"1b37a484cbcc81f51953ea093644b70499c26314","modified":1730787248913},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"860f967ecf3c6a6ea785b560a7aae4d0757cd18a","modified":1730787248913},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"7397db8012c27a4a1da75dd659745676654a0c65","modified":1730787248913},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"5edf400514843e28b329c3fd3f12f66ed5faca66","modified":1730787248913},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"eb31f49a826c1f95890078745e55c9a2ccb319f9","modified":1730787248904},{"_id":"themes/butterfly/scripts/helpers/series.js","hash":"806e2e5843df23e7eb94709056676f5ce6bfefa7","modified":1730787248914},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"39325366b622cfd2089cb1c9344d89f2edd79816","modified":1730787248913},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"7d3581a446285b0cd9362266d54b59fe8768af9e","modified":1730787248904},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"d4f3a798cdded0c0744efab3b1397b00cdb0c6e5","modified":1730787248904},{"_id":"themes/butterfly/source/css/index.styl","hash":"755490867fd8afe47d5cce24faea2ca172b0c4dd","modified":1730787248920},{"_id":"themes/butterfly/source/css/.DS_Store","hash":"f3db5c6dfbb4d1e5788e15a1bc9fdb499e6e4a69","modified":1733739648249},{"_id":"themes/butterfly/source/css/mac-osx.css","hash":"8e5cdd1c7cf2520c67125651bf27581f17302a24","modified":1733739161114},{"_id":"themes/butterfly/source/css/var.styl","hash":"8cc7b245da61e35cfcc80cafb4e553b5fa968111","modified":1730787248921},{"_id":"themes/butterfly/source/img/.DS_Store","hash":"a889c003011986db9a3b1cdaebcdbb7b96112ee6","modified":1731020323623},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"9c2ee5868879529f7cef7d93edca5b755f45e7e9","modified":1730787248914},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1730787248921},{"_id":"themes/butterfly/source/img/smile.gif","hash":"3b2601fa4e053a8ba33c8af21b408450c27ea2a9","modified":1723805780652},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1730787248922},{"_id":"themes/butterfly/source/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1730787248922},{"_id":"themes/butterfly/scripts/tag/chartjs.js","hash":"a26402edc63cbe8faa6a99647f039ffd9616e1f6","modified":1730787248914},{"_id":"themes/butterfly/source/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1730787248922},{"_id":"themes/butterfly/source/js/utils.js","hash":"fd3c26366c78dd82bc87d4ddebe76c582122e1b7","modified":1730787248923},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"555f7e4a2a7d8c4420ca467e87625bf96db11a70","modified":1730787248914},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"1d435ea5d0a8c2c062d42bad1747ed7d1d7c73ae","modified":1730787248914},{"_id":"themes/butterfly/source/js/main.js","hash":"13e7344682a82ffc030d3e8dfb9710d9841ec0bb","modified":1730787248922},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"365db87ddfc582bf8c15cb440c48bed95106e4b1","modified":1730787248914},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"512c68a22ae4a58d6a6b24b368a0c00c2ccb4fcb","modified":1730787248914},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"5c2a07df5874b5377540884e4da14dd21489378f","modified":1730787248915},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"1acefc59ead75ebd8cafee36efc7da4fa426d088","modified":1730787248915},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"5cb273e95846874e3a58074074c501df23c5e912","modified":1730787248915},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"22bc3a24c3610b5a3c3a2043b7d10e26d00018b8","modified":1730787248915},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"3a9a28f6833e9cea60761e52ab8990fcb597444f","modified":1730787248915},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"67c1aad5ddfe56deae672146c2774379aa65af95","modified":1730787248915},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"132d1e7757d0dac42d6b0957a25484613d7ed873","modified":1730787248914},{"_id":"themes/butterfly/scripts/tag/series.js","hash":"f4507d1527cc0d5fe9fdd89eb769e15814a18fec","modified":1730787248915},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"7ef59df188ea523da89f4caf69c5c0f14e78da69","modified":1730787248923},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"2beb68bdd43b09a539c8f4ed0cb7c0838c03409a","modified":1730787248901},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"e5a26d2e2ca789dffc6bd9cfc13ff9e530c9911c","modified":1730787248901},{"_id":"themes/butterfly/.git.bak/refs/heads/master","hash":"56702849bb30705c77fa4f8698b4b76b6ea6ab7d","modified":1730787248896},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"31b2004129e93b752cd7a9d2fc0ba834459cae2c","modified":1730787248901},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"0e301fe266b3260257b5a619dc8eedf2c1955e7e","modified":1730787248902},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1730787248902},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"5208fe1e75d97a05fd9bdd6cc53c59d8b741b94b","modified":1730787248902},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1730787248902},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"cd507e58852dc59a72e624fc1b22dc9b138c2575","modified":1730787248902},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"95316827e12ec1a2cee18b7d5f49971e9a88b138","modified":1730787248902},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"93c78d39526cb883fa20f02bec9d99b0da52b4f3","modified":1730787248901},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"f4f590102c1937d63da5edf35f2ff37f5932ccc1","modified":1730787248902},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"b7608dca3d361001d661779fe8be03c370231c41","modified":1730787248902},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"55090eee8076af761be7741b4e330ceea07c27d7","modified":1730787248903},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"8b12fa52bd522dded8b7f1ae3f580f339d75aecf","modified":1730787248903},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"38b85f46c8e1bcbc43d2a4875d94ea201518eeeb","modified":1730787248903},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"605809f97b2f0da0e2e84dd2365fc8ccee1de6bd","modified":1730787248902},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"10aa44e0216dbde863e2bd41267b613dc220e517","modified":1730787248903},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1730787248903},{"_id":"themes/butterfly/layout/includes/page/404.pug","hash":"ca9cc03a51561413728d7211f0a544654c5d4e36","modified":1730787248903},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"f9ce83978b217a71a2eb8761dc14b09866faa3f4","modified":1730787248903},{"_id":"themes/butterfly/layout/includes/page/shuoshuo.pug","hash":"0db4b17a14f538f610a5fb0fd06c66eb60f34a95","modified":1730787248903},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"2bef558fa87986805b3397319b4c088564ba7c44","modified":1730787248904},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"2dca79799c566ffa68b21ecefa9c63432b5088e1","modified":1730787248904},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"38c0781ac7544d2010d5bfe7ae521125f3672975","modified":1730787248903},{"_id":"themes/butterfly/layout/includes/mixins/indexPostUI.pug","hash":"77eca4f5dbf38c2c805b732ff8d7d9c1560b6f16","modified":1730787248903},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"1d39670ee6225f85f5c53bf5c84f3fd6e19290e8","modified":1730787248907},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"0595d60dbf701e2ffa92181923861b1457a02112","modified":1730787248904},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"0c1affa498b28e79e5a465f3f8f18035993bcb88","modified":1730787248909},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1730787248903},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"5c7605a0353ef2709f75bad27794f985c7c78907","modified":1730787248909},{"_id":"themes/butterfly/layout/includes/third-party/umami_analytics.pug","hash":"e2fa3804c0fef70bb6fa884f1055c978725ccef2","modified":1730787248910},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"512111475060798925eb1a7bc7617c34b8bd32ab","modified":1730787248909},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1730787248910},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1730787248910},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"21d42f43f26a2075abf2e6d13d35fb1aaf53a8b4","modified":1730787248910},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1730787248910},{"_id":"themes/butterfly/layout/includes/widget/card_post_series.pug","hash":"bd5ad01277f8c6ddf8a3a29af1518e5fe6eed23f","modified":1730787248911},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1730787248911},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1730787248910},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"4ae59a48f8984ce8316cfc82756180dc496774eb","modified":1730787248910},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"ba95646b78688bcdcf77166407c4799e5e3c3e6d","modified":1730787248911},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"a658a274c5f7896ee5122725bee45548693bdd66","modified":1730787248911},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1730787248911},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1730787248911},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"5da5f11a0f7f0fc06732df412bb77a7dddc41429","modified":1730787248911},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"506bbff9c954d5f92a6d97145be2d732571fae39","modified":1730787248915},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1730787248911},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"aea8a25b8f5738ac1a3d7498a0302f14c30e86e0","modified":1730787248918},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"66f7a8b0cebc05c575ec3cb70b08d6854029d87a","modified":1730787248911},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"3312e3bc1076ac8ba9dd902a671602c78a5e1479","modified":1730787248916},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"dbd4af28bbf2fe9a7d75a75fdf460dfb3317311a","modified":1730787248917},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"c416d58fb98a2b7a0eedfee9842c6db866288cdb","modified":1730787248918},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"15f321aee7876f2366677914a7cd2ab8b071b162","modified":1730787248915},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"134811b2d696f9ed2c0cd578f3886f1c60770c0a","modified":1730787248917},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"4382ecffdb778de9fa05edf24765b68ae6da1220","modified":1730787248917},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1730787248917},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"1a864887fb1bc9d24caa6b8b63a9bfc251762ffd","modified":1730787248916},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"316447b94933af2cc580cc9c2b8b42e3875b8c08","modified":1730787248917},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"7b1c689e3e9d65a429670c089b0340c6ac22b4ce","modified":1730787248917},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"517361bf999e41fdea2c57e0af6e82d310f76edd","modified":1730787248917},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"743f9dd5585ecac812f3aa908eede4093d84fbd7","modified":1730787248917},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"05417547fb666ab49f59b63d49279b06a0e980cc","modified":1730787248917},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"0d0ef8a9260b494e50ef545e5f395d649418f0a9","modified":1730787248917},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"be7ee2c63cedbc6b7f03cb3993ec533d9ae9d8bb","modified":1730787248917},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"4765d72ab300910437d64991d3f70a82b41d4e3a","modified":1730787248916},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"d9cb3972c1f567c3dfb2b6865695bfa4a0466342","modified":1730787248916},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"643ff8c79d033947da312b70847b1b45850d7b29","modified":1730787248918},{"_id":"themes/butterfly/source/css/_highlight/.DS_Store","hash":"23ebfb1bbb1c2bca5a2ad6fbca4359855a7ad0fa","modified":1733739648245},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"354902d03f13068cf8a3617fb0ea92669e6b2a86","modified":1730787248918},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"6c17877d4178809365627eada155da9cacaafca8","modified":1730787248918},{"_id":"themes/butterfly/source/css/_page/shuoshuo.styl","hash":"855af8f97daad51b0161d96d50abd71edec87142","modified":1730787248918},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"3fa5aa012c62da3b5220654426c0708cab24e9af","modified":1730787248918},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"8aa755a3f588e6e598e4fb6510faa6e766d59a94","modified":1730787248918},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"2cf298c6a767473c7c7cc2cb9e0366308a2af335","modified":1730787248919},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"c08432ecceaa187005c55144cf6f2b092ca50820","modified":1730787248918},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"e765323537d174c7dcb88614100ccdc3e2d020e1","modified":1730787248919},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"3ea61b806eea440b274d39f3e607e0ad3ddb4492","modified":1730787248919},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"7e5ca6a899c66b26cebc027db530d54018e2c5c0","modified":1730787248919},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"4a651e47d658340443bb63b7d15a1e9e34f76aca","modified":1730787248920},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1730787248920},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1730787248920},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"909bb5079b26b6ee68177919f522566503654058","modified":1730787248920},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1730787248919},{"_id":"themes/butterfly/source/css/_tags/series.styl","hash":"31f9bdd21cf8ea29f1c334a9505240ee37085c48","modified":1730787248920},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"44d6b9fa9f0cb9026722f7dda15368d41d3fed20","modified":1730787248919},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"e2046eed9503ac506d5ca120b60203dd2cd968af","modified":1730787248919},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"9be799d09f5e73da06dc435df6e125a3a8764ecf","modified":1730787248920},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"1ce084ed240d0e998bcdf1416ada598637878398","modified":1730787248919},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"a14fb5ec8a40f8c50f6e8277ca4d25d0887796a3","modified":1730787248920},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"e5821f78381af9f0f646952a7dd118daab2a79a6","modified":1730787248923},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"cabb3a06f8ef297a1ea3d91ced8abeaa0831aa14","modified":1730787248904},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"cb77a73a2b47156d18afb9f2376b3d502d0d12d7","modified":1730787248904},{"_id":"themes/butterfly/.git.bak/logs/refs/heads/master","hash":"616a570de3747f6751fdeebf853b6b94f42a5ae6","modified":1730787248896},{"_id":"themes/butterfly/.git.bak/refs/remotes/origin/HEAD","hash":"2c142208129b78a4616cbb6798f96f4fb3580296","modified":1730787248895},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"8b21906b1b3f3faa19bdc16f4167b0b5d487c9ac","modified":1730787248905},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"2c6eb1b0b3586ce6a92228f809be37642a2010b0","modified":1730787248905},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"5aaef147ae31e1ffc49152acd43dabc5f15b39ba","modified":1730787248905},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"9ed621742714de6de6593490e3d4aaa3f30a4791","modified":1730787248905},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"71af0b679e00290b0854384368b3c7e9b3e5f26a","modified":1730787248904},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"c5f7081ca29db8cc80f808dfc29e36d5fa22fd7e","modified":1730787248904},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1730787248905},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"4e11d033fb58563f5e1b497f1a6f1c62d3501ee6","modified":1730787248923},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"a35c21e9ec2bef465c945408da515bfb5d848d6d","modified":1730787248904},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"007bb96fd84f38852b7ab5f761e6867b6058422f","modified":1730787248905},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"3a5ccfc69bd8ccb4b8f3ce3502023f7914f2a022","modified":1730787248905},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/common.pug","hash":"7e3b4e1124c9917b820e96bd0c915c08da68aecd","modified":1730787248908},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"5715fc2dc75808af0a434fe66b81d0f651d03ed3","modified":1730787248905},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"86cf7ba9cae6eb8bee0ca792df7a82f58c8451ff","modified":1730787248908},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1730787248905},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"619c41729691a54871b49da54ea27657d1b58e7e","modified":1730787248908},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"b82c936cb73c325fcac69832a3e475ed732e06f9","modified":1730787248908},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"16796729df739a47508999b5467a57037ee6e9df","modified":1730787248908},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"988f75833dcb18d4a02c34cdea51e39434ea5723","modified":1730787248909},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"393a327a7f41de070abd53cd95149d3e7e1bbf61","modified":1730787248909},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"eee2c6b5c73ea280c7b683a1d117cab5a2ea5f66","modified":1730787248908},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"1c2190c9bac26992de8d52be4f8522309d566750","modified":1730787248907},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"bd87dc207f1cab66e48496548b18f0dd9021eb91","modified":1730787248907},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"2e82651607326e7f999fc7891480c74a06cbb416","modified":1730787248908},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1730787248908},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"be40f20273c31e8b37353d9705ad9b9c693e16a2","modified":1730787248906},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"49aece5be2a0a8e414257ecbfc2abd7d0d5f8c64","modified":1730787248908},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"8f3d4c33ec3d1be4bd203ba2461db9ccfad63f23","modified":1730787248906},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"d040c00332e83c985dbc0e76e3242336edbcd764","modified":1730787248906},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"f71d8acf5b0f3ece91ae1e018962c73b50941a45","modified":1730787248906},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"a9709905593d960954e2dd572f09f48a6c2b1ef7","modified":1730787248906},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"830bafcf50180fed4fcf76f0da277d702e66a5b3","modified":1730787248907},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"966ef931a9545cdde8c270322e8650b54b965935","modified":1730787248906},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"dd5c7e808654aefeb3fcc81c7b0911cff1ee8776","modified":1730787248906},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"8869bac6ec822a70dfe432d7bd5e599750441ddb","modified":1730787248907},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1730787248906},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"46c177643a8e65f036cb08c29387d4ab29485859","modified":1730787248907},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"5227663ccbe86c830447e4dcc594202b1582595d","modified":1730787248907},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"6ddd9dce1a553a0d24509d7f9c78b9f6742be030","modified":1730787248907},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"bfc6e6690e70c5bd646bdff354b750ebd782f4ad","modified":1730787248907},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"11a4e7decb634fbd6af454aa5ec230945837b6a9","modified":1730787248909},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"f11c6db285f57a475db638e74920efb2d0e5a4d0","modified":1730787248909},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"18b492731f67d449bb32d7fac321deb57a92e75f","modified":1730787248909},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":1730787248909},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"393c94702fd65c585e37bcf9a4f33c638d8bac72","modified":1730787248910},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"fdcc5a88505fcbf0593aa04ecb4ac0c8ad4f8fa3","modified":1730787248916},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"8a7d5cdca6a87897d435fc88ebcb7ec0b7ec8591","modified":1730787248910},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1730787248910},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"e76b08f3e72a25c91eff30cbdfc95a2c24f59d83","modified":1730787248916},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1730787248916},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"dcd3af96d8be1a6358a88daf2c66165cc9b792d9","modified":1730787248916},{"_id":"themes/butterfly/layout/includes/third-party/math/chartjs.pug","hash":"a3f409a0c1ed3df8c920f7d32b86c3832459f3bf","modified":1730787248907},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"ced5fbccabd89ca19dddf6c41b685aea5edaede0","modified":1730787248916},{"_id":"themes/butterfly/.git.bak/logs/refs/remotes/origin/HEAD","hash":"09a268f1697ecd64d9e26a166c0999435a0b0459","modified":1730787248895},{"_id":"themes/butterfly/source/img/cat.png","hash":"eba8be3d4aabb1915a115a3f50df2708a54930df","modified":1730960424502},{"_id":"source/_posts/PlantUML绘制时序图/2024-12-03-18-31-43.png","hash":"9d3e8fa7ea67403d53e89affe029d236810b8556","modified":1733221903438},{"_id":"themes/butterfly/source/img/1.png","hash":"2386c9d5a9663c6daf57bd36c355be61b2a660fb","modified":1730470840243},{"_id":"themes/butterfly/source/img/2.png","hash":"8e83fc9bc2489017c6b9c271d50282dda2439962","modified":1730471070217},{"_id":"themes/butterfly/.git.bak/objects/pack/pack-b05a31f7705a53fc8a1732f4c197bd330a946c09.idx","hash":"361d7777e04ce308b67181d9421499566637dfd7","modified":1730787248880},{"_id":"themes/butterfly/source/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1730787248922},{"_id":"themes/butterfly/source/img/bg.png","hash":"008db3a219e120fc95a9baaf38eb7c13fb0a5d16","modified":1730810648310},{"_id":"source/_posts/PlantUML绘制时序图/2024-12-03-18-26-46.png","hash":"e8ae643e9a71351cc491b055394c7e05f0569096","modified":1733221607097},{"_id":"source/_posts/PlantUML绘制时序图/2024-12-03-18-39-41.png","hash":"bd9518cebadb779a2c73ef2c4201e85a57be2804","modified":1733222381615},{"_id":"source/_posts/PlantUML绘制时序图/2024-12-03-18-49-25.png","hash":"b3baacd9b8f44ecabaa547cb4ade5e8999f7920c","modified":1733222965937},{"_id":"source/_posts/PlantUML绘制时序图/2024-12-03-18-36-06.png","hash":"3dce28a0c6c781f03b614c155271c33faee87267","modified":1733222166463},{"_id":"source/_posts/PlantUML绘制时序图/2024-12-03-18-48-51.png","hash":"913072d12c03471597757c3d8587a1c7a1454a50","modified":1733222932058},{"_id":"source/_posts/PlantUML绘制时序图/2024-12-03-18-47-52.png","hash":"7e421ef7c3c4a59d17eff2dc976e6dfc767f3ada","modified":1733222873049},{"_id":"source/_posts/PlantUML绘制时序图/2024-12-03-18-57-08.png","hash":"7ee913c919a093a81f721defdd88c286626d647b","modified":1733223429252},{"_id":"source/_posts/PlantUML绘制时序图/2024-12-03-18-45-50.png","hash":"8ed1e99a262d8acecbdc5d34dda361867a48370b","modified":1733222750861},{"_id":"themes/butterfly/.git.bak/objects/pack/pack-b05a31f7705a53fc8a1732f4c197bd330a946c09.pack","hash":"308d92639b2d224c75ab329b072cfb189eca6cfe","modified":1730787248879},{"_id":"source/_posts/PlantUML绘制时序图/2024-12-03-18-54-55.png","hash":"1ecbca1f68c52be3714e369c243929ddfecbda70","modified":1733223295430},{"_id":"public/404.html","hash":"ae1ee9f1c9af9527c9b782daf322f012758a2862","modified":1745232546941},{"_id":"public/about/index.html","hash":"e5f11f0d90c1b7809c6dcacb9cb68a40d88e4b18","modified":1745232546941},{"_id":"public/news/index.html","hash":"dd1f027521237236c33227066e52d7981dec67fa","modified":1745232546941},{"_id":"public/release-plan/index.html","hash":"ae6c16bbf46a21f7210041e6c27b8b42d92acf0c","modified":1745232546941},{"_id":"public/tags/index.html","hash":"e9d357990d9e027bf2ef7a4f43367de30e1270dd","modified":1745232546941},{"_id":"public/2024/12/03/PlantUML绘制时序图/index.html","hash":"666dd1e588df026714b437e90766b0e9bd7aed09","modified":1744870228885},{"_id":"public/2024/11/20/Linux常用命令/index.html","hash":"df503a11995e0ef6b412cbddc75ae90a62191fd1","modified":1744692797572},{"_id":"public/2024/11/11/一种写Hexo博客的姿势/index.html","hash":"1283eab9b568dfd04191a4e8d8d248127fa10eca","modified":1744692797572},{"_id":"public/2024/11/05/hello-world/index.html","hash":"cc69e08c00224d7ba34c1a95604d617fec7121a8","modified":1744692797572},{"_id":"public/archives/index.html","hash":"0e780b50e37fcfdf7a4f27f961ed5a306b53394a","modified":1745232546941},{"_id":"public/archives/2024/11/index.html","hash":"07dfcc5f167e46c9c8e4277a76a22635878051e8","modified":1745232546941},{"_id":"public/archives/2024/12/index.html","hash":"8109cb5ef385b64fba7f478dcb227d9d820dba03","modified":1745232546941},{"_id":"public/index.html","hash":"18e314d0eae1a949e0fd3a04b021431ab5ed17f6","modified":1745232546941},{"_id":"public/archives/2024/index.html","hash":"a2eccf4278858e32a84fd89f87044db924460e80","modified":1745232546941},{"_id":"public/tags/轻松一下/index.html","hash":"d617284b7f539c82bd61340f5af0299e7df22e80","modified":1745232546941},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1734658164508},{"_id":"public/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1734658164508},{"_id":"public/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1734658164508},{"_id":"public/img/smile.gif","hash":"3b2601fa4e053a8ba33c8af21b408450c27ea2a9","modified":1734658164508},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1734658164508},{"_id":"public/css/index.css","hash":"7209bb0329be244c497d514ebe0871b5c2380ed4","modified":1734658164508},{"_id":"public/css/mac-osx.css","hash":"8e5cdd1c7cf2520c67125651bf27581f17302a24","modified":1734658164508},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1734658164508},{"_id":"public/js/main.js","hash":"13e7344682a82ffc030d3e8dfb9710d9841ec0bb","modified":1734658164508},{"_id":"public/js/tw_cn.js","hash":"7ef59df188ea523da89f4caf69c5c0f14e78da69","modified":1734658164508},{"_id":"public/js/search/local-search.js","hash":"4e11d033fb58563f5e1b497f1a6f1c62d3501ee6","modified":1734658164508},{"_id":"public/js/utils.js","hash":"fd3c26366c78dd82bc87d4ddebe76c582122e1b7","modified":1734658164508},{"_id":"public/js/search/algolia.js","hash":"e5821f78381af9f0f646952a7dd118daab2a79a6","modified":1734658164508},{"_id":"public/img/cat.png","hash":"eba8be3d4aabb1915a115a3f50df2708a54930df","modified":1734658164508},{"_id":"public/img/2.png","hash":"8e83fc9bc2489017c6b9c271d50282dda2439962","modified":1734658164508},{"_id":"public/img/1.png","hash":"2386c9d5a9663c6daf57bd36c355be61b2a660fb","modified":1734658164508},{"_id":"public/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1734658164508},{"_id":"public/2024/12/03/PlantUML绘制时序图/2024-12-03-18-25-51.png","hash":"5fdc596d83b3c41b6e1a1198548ad35a3ade0876","modified":1734658164508},{"_id":"public/img/bg.png","hash":"008db3a219e120fc95a9baaf38eb7c13fb0a5d16","modified":1734658164508},{"_id":"public/2024/12/03/PlantUML绘制时序图/2024-12-03-18-31-43.png","hash":"9d3e8fa7ea67403d53e89affe029d236810b8556","modified":1734658164508},{"_id":"public/2024/12/03/PlantUML绘制时序图/2024-12-03-18-26-46.png","hash":"e8ae643e9a71351cc491b055394c7e05f0569096","modified":1734658164508},{"_id":"public/2024/12/03/PlantUML绘制时序图/2024-12-03-18-39-41.png","hash":"bd9518cebadb779a2c73ef2c4201e85a57be2804","modified":1734658164508},{"_id":"public/2024/12/03/PlantUML绘制时序图/2024-12-03-18-36-06.png","hash":"3dce28a0c6c781f03b614c155271c33faee87267","modified":1734658164508},{"_id":"public/2024/12/03/PlantUML绘制时序图/2024-12-03-18-49-25.png","hash":"b3baacd9b8f44ecabaa547cb4ade5e8999f7920c","modified":1734658164508},{"_id":"public/2024/12/03/PlantUML绘制时序图/2024-12-03-18-48-51.png","hash":"913072d12c03471597757c3d8587a1c7a1454a50","modified":1734658164508},{"_id":"public/2024/12/03/PlantUML绘制时序图/2024-12-03-18-47-52.png","hash":"7e421ef7c3c4a59d17eff2dc976e6dfc767f3ada","modified":1734658164508},{"_id":"public/2024/12/03/PlantUML绘制时序图/2024-12-03-18-57-08.png","hash":"7ee913c919a093a81f721defdd88c286626d647b","modified":1734658164508},{"_id":"public/2024/12/03/PlantUML绘制时序图/2024-12-03-18-45-50.png","hash":"8ed1e99a262d8acecbdc5d34dda361867a48370b","modified":1734658164508},{"_id":"public/2024/12/03/PlantUML绘制时序图/2024-12-03-18-54-55.png","hash":"1ecbca1f68c52be3714e369c243929ddfecbda70","modified":1734658164508},{"_id":"source/resources/index.md","hash":"a43bc992d61dabe658c605a919512fd69800d2b8","modified":1744256929684},{"_id":"public/resources/index.html","hash":"68d1c7bcc08b44b969e9d0c6d7bc4a26a5e66ef4","modified":1745232546941},{"_id":"source/_posts/technology-article.md","hash":"07cf3fbd0588c0450bdbd79ba072120b2094530c","modified":1744783843514},{"_id":"public/2025/04/15/technology-article/index.html","hash":"36a3669bd0ccbfb89d46a9b66593148609d05d67","modified":1744870228885},{"_id":"public/archives/2025/index.html","hash":"37362740db0a72046a78fc774e330ec7034941d1","modified":1745232546941},{"_id":"public/archives/2025/04/index.html","hash":"6d7cc6f14d3d066cf77a7aab6fa5afefa08c0549","modified":1745232546941},{"_id":"public/tags/学习/index.html","hash":"c64f7ca4c32aa6832855e84f102cdd166b2c3f53","modified":1745232546941}],"Category":[],"Data":[],"Page":[{"title":"About","date":"2024-12-09T10:31:23.000Z","_content":"\n# yuanxp77\n\n[GitHub](https://github.com/yuanxp77) | yuanxp77@outlook.com\n\n---\n\n## 个人简介 Profile\n\n憨批，于2020年8月写下第一个Hello World。\n\n---\n\n## 工作经历 Work experience\n\n### Go 后端开发 | 虾皮 [Shopee](https://shopee.cn/about)\n*2024年3月 – 至今*\n[Affiliate Network](https://help.shopee.sg/portal/10/article/123798-What-is-Shopee-Ambassador-Programme) （校招）深圳 ShenZhen\n\n### 云计算开发 | 超聚变 [Xfusion](https://www.xfusion.com/cn/about)\n*2023年7月 – 2024年1月*\n[FusionOne HCI](https://www.xfusion.com/cn/product/hyperconverged-solutions/hci)（实习）深圳 Shenzhen\n\n### Java 后端开发 | 喜马拉雅 [Himalaya](https://www.ximalaya.com/more/aboutus/)\n*2023年3月 – 2023年6月*\n[Titan](https://www.aliyun.com/product/yunxiao)、Yitian（实习）上海 ShangHai\n\n---\n\n## 教育背景 Educational background\n\n### 软件工程 | 广东工业大学 [GDUT](https://www.gdut.edu.cn)\n*2020年9月 – 2024年6月*\n本科，计算机学院TopView工作室，后端组成员\n\n---\n\n## 兴趣爱好 Hobbies\n\n- 明月\n- FPS（[CSGO](https://zh.wikipedia.org/wiki/反恐精英：全球攻势)、[无畏契约](https://zh.wikipedia.org/wiki/无畏契约)）\n- Jazz Hiphop（[Nujabes](https://zh.wikipedia.org/wiki/Nujabes)、西原健一郎、[蛋堡](https://zh.wikipedia.org/wiki/蛋堡_(音樂人))）\n","source":"about/index.md","raw":"---\ntitle: About\ndate: 2024-12-09 18:31:23\n---\n\n# yuanxp77\n\n[GitHub](https://github.com/yuanxp77) | yuanxp77@outlook.com\n\n---\n\n## 个人简介 Profile\n\n憨批，于2020年8月写下第一个Hello World。\n\n---\n\n## 工作经历 Work experience\n\n### Go 后端开发 | 虾皮 [Shopee](https://shopee.cn/about)\n*2024年3月 – 至今*\n[Affiliate Network](https://help.shopee.sg/portal/10/article/123798-What-is-Shopee-Ambassador-Programme) （校招）深圳 ShenZhen\n\n### 云计算开发 | 超聚变 [Xfusion](https://www.xfusion.com/cn/about)\n*2023年7月 – 2024年1月*\n[FusionOne HCI](https://www.xfusion.com/cn/product/hyperconverged-solutions/hci)（实习）深圳 Shenzhen\n\n### Java 后端开发 | 喜马拉雅 [Himalaya](https://www.ximalaya.com/more/aboutus/)\n*2023年3月 – 2023年6月*\n[Titan](https://www.aliyun.com/product/yunxiao)、Yitian（实习）上海 ShangHai\n\n---\n\n## 教育背景 Educational background\n\n### 软件工程 | 广东工业大学 [GDUT](https://www.gdut.edu.cn)\n*2020年9月 – 2024年6月*\n本科，计算机学院TopView工作室，后端组成员\n\n---\n\n## 兴趣爱好 Hobbies\n\n- 明月\n- FPS（[CSGO](https://zh.wikipedia.org/wiki/反恐精英：全球攻势)、[无畏契约](https://zh.wikipedia.org/wiki/无畏契约)）\n- Jazz Hiphop（[Nujabes](https://zh.wikipedia.org/wiki/Nujabes)、西原健一郎、[蛋堡](https://zh.wikipedia.org/wiki/蛋堡_(音樂人))）\n","updated":"2024-12-22T08:06:32.253Z","path":"about/index.html","_id":"cm4w2on660000stk8g0lje6j8","comments":1,"layout":"page","content":"<h1 id=\"yuanxp77\"><a href=\"#yuanxp77\" class=\"headerlink\" title=\"yuanxp77\"></a>yuanxp77</h1><p><a href=\"https://github.com/yuanxp77\">GitHub</a> | <a href=\"mailto:&#x79;&#x75;&#97;&#110;&#x78;&#x70;&#x37;&#55;&#x40;&#111;&#x75;&#x74;&#108;&#x6f;&#x6f;&#x6b;&#x2e;&#99;&#111;&#x6d;\">&#x79;&#x75;&#97;&#110;&#x78;&#x70;&#x37;&#55;&#x40;&#111;&#x75;&#x74;&#108;&#x6f;&#x6f;&#x6b;&#x2e;&#99;&#111;&#x6d;</a></p>\n<hr>\n<h2 id=\"个人简介-Profile\"><a href=\"#个人简介-Profile\" class=\"headerlink\" title=\"个人简介 Profile\"></a>个人简介 Profile</h2><p>憨批，于2020年8月写下第一个Hello World。</p>\n<hr>\n<h2 id=\"工作经历-Work-experience\"><a href=\"#工作经历-Work-experience\" class=\"headerlink\" title=\"工作经历 Work experience\"></a>工作经历 Work experience</h2><h3 id=\"Go-后端开发-虾皮-Shopee\"><a href=\"#Go-后端开发-虾皮-Shopee\" class=\"headerlink\" title=\"Go 后端开发 | 虾皮 Shopee\"></a>Go 后端开发 | 虾皮 <a href=\"https://shopee.cn/about\">Shopee</a></h3><p><em>2024年3月 – 至今</em><br><a href=\"https://help.shopee.sg/portal/10/article/123798-What-is-Shopee-Ambassador-Programme\">Affiliate Network</a> （校招）深圳 ShenZhen</p>\n<h3 id=\"云计算开发-超聚变-Xfusion\"><a href=\"#云计算开发-超聚变-Xfusion\" class=\"headerlink\" title=\"云计算开发 | 超聚变 Xfusion\"></a>云计算开发 | 超聚变 <a href=\"https://www.xfusion.com/cn/about\">Xfusion</a></h3><p><em>2023年7月 – 2024年1月</em><br><a href=\"https://www.xfusion.com/cn/product/hyperconverged-solutions/hci\">FusionOne HCI</a>（实习）深圳 Shenzhen</p>\n<h3 id=\"Java-后端开发-喜马拉雅-Himalaya\"><a href=\"#Java-后端开发-喜马拉雅-Himalaya\" class=\"headerlink\" title=\"Java 后端开发 | 喜马拉雅 Himalaya\"></a>Java 后端开发 | 喜马拉雅 <a href=\"https://www.ximalaya.com/more/aboutus/\">Himalaya</a></h3><p><em>2023年3月 – 2023年6月</em><br><a href=\"https://www.aliyun.com/product/yunxiao\">Titan</a>、Yitian（实习）上海 ShangHai</p>\n<hr>\n<h2 id=\"教育背景-Educational-background\"><a href=\"#教育背景-Educational-background\" class=\"headerlink\" title=\"教育背景 Educational background\"></a>教育背景 Educational background</h2><h3 id=\"软件工程-广东工业大学-GDUT\"><a href=\"#软件工程-广东工业大学-GDUT\" class=\"headerlink\" title=\"软件工程 | 广东工业大学 GDUT\"></a>软件工程 | 广东工业大学 <a href=\"https://www.gdut.edu.cn/\">GDUT</a></h3><p><em>2020年9月 – 2024年6月</em><br>本科，计算机学院TopView工作室，后端组成员</p>\n<hr>\n<h2 id=\"兴趣爱好-Hobbies\"><a href=\"#兴趣爱好-Hobbies\" class=\"headerlink\" title=\"兴趣爱好 Hobbies\"></a>兴趣爱好 Hobbies</h2><ul>\n<li>明月</li>\n<li>FPS（<a href=\"https://zh.wikipedia.org/wiki/%E5%8F%8D%E6%81%90%E7%B2%BE%E8%8B%B1%EF%BC%9A%E5%85%A8%E7%90%83%E6%94%BB%E5%8A%BF\">CSGO</a>、<a href=\"https://zh.wikipedia.org/wiki/%E6%97%A0%E7%95%8F%E5%A5%91%E7%BA%A6\">无畏契约</a>）</li>\n<li>Jazz Hiphop（<a href=\"https://zh.wikipedia.org/wiki/Nujabes\">Nujabes</a>、西原健一郎、<a href=\"https://zh.wikipedia.org/wiki/%E8%9B%8B%E5%A0%A1_(%E9%9F%B3%E6%A8%82%E4%BA%BA)\">蛋堡</a>）</li>\n</ul>\n","cover":false,"excerpt":"","more":"<h1 id=\"yuanxp77\"><a href=\"#yuanxp77\" class=\"headerlink\" title=\"yuanxp77\"></a>yuanxp77</h1><p><a href=\"https://github.com/yuanxp77\">GitHub</a> | <a href=\"mailto:&#x79;&#x75;&#97;&#110;&#x78;&#x70;&#x37;&#55;&#x40;&#111;&#x75;&#x74;&#108;&#x6f;&#x6f;&#x6b;&#x2e;&#99;&#111;&#x6d;\">&#x79;&#x75;&#97;&#110;&#x78;&#x70;&#x37;&#55;&#x40;&#111;&#x75;&#x74;&#108;&#x6f;&#x6f;&#x6b;&#x2e;&#99;&#111;&#x6d;</a></p>\n<hr>\n<h2 id=\"个人简介-Profile\"><a href=\"#个人简介-Profile\" class=\"headerlink\" title=\"个人简介 Profile\"></a>个人简介 Profile</h2><p>憨批，于2020年8月写下第一个Hello World。</p>\n<hr>\n<h2 id=\"工作经历-Work-experience\"><a href=\"#工作经历-Work-experience\" class=\"headerlink\" title=\"工作经历 Work experience\"></a>工作经历 Work experience</h2><h3 id=\"Go-后端开发-虾皮-Shopee\"><a href=\"#Go-后端开发-虾皮-Shopee\" class=\"headerlink\" title=\"Go 后端开发 | 虾皮 Shopee\"></a>Go 后端开发 | 虾皮 <a href=\"https://shopee.cn/about\">Shopee</a></h3><p><em>2024年3月 – 至今</em><br><a href=\"https://help.shopee.sg/portal/10/article/123798-What-is-Shopee-Ambassador-Programme\">Affiliate Network</a> （校招）深圳 ShenZhen</p>\n<h3 id=\"云计算开发-超聚变-Xfusion\"><a href=\"#云计算开发-超聚变-Xfusion\" class=\"headerlink\" title=\"云计算开发 | 超聚变 Xfusion\"></a>云计算开发 | 超聚变 <a href=\"https://www.xfusion.com/cn/about\">Xfusion</a></h3><p><em>2023年7月 – 2024年1月</em><br><a href=\"https://www.xfusion.com/cn/product/hyperconverged-solutions/hci\">FusionOne HCI</a>（实习）深圳 Shenzhen</p>\n<h3 id=\"Java-后端开发-喜马拉雅-Himalaya\"><a href=\"#Java-后端开发-喜马拉雅-Himalaya\" class=\"headerlink\" title=\"Java 后端开发 | 喜马拉雅 Himalaya\"></a>Java 后端开发 | 喜马拉雅 <a href=\"https://www.ximalaya.com/more/aboutus/\">Himalaya</a></h3><p><em>2023年3月 – 2023年6月</em><br><a href=\"https://www.aliyun.com/product/yunxiao\">Titan</a>、Yitian（实习）上海 ShangHai</p>\n<hr>\n<h2 id=\"教育背景-Educational-background\"><a href=\"#教育背景-Educational-background\" class=\"headerlink\" title=\"教育背景 Educational background\"></a>教育背景 Educational background</h2><h3 id=\"软件工程-广东工业大学-GDUT\"><a href=\"#软件工程-广东工业大学-GDUT\" class=\"headerlink\" title=\"软件工程 | 广东工业大学 GDUT\"></a>软件工程 | 广东工业大学 <a href=\"https://www.gdut.edu.cn/\">GDUT</a></h3><p><em>2020年9月 – 2024年6月</em><br>本科，计算机学院TopView工作室，后端组成员</p>\n<hr>\n<h2 id=\"兴趣爱好-Hobbies\"><a href=\"#兴趣爱好-Hobbies\" class=\"headerlink\" title=\"兴趣爱好 Hobbies\"></a>兴趣爱好 Hobbies</h2><ul>\n<li>明月</li>\n<li>FPS（<a href=\"https://zh.wikipedia.org/wiki/%E5%8F%8D%E6%81%90%E7%B2%BE%E8%8B%B1%EF%BC%9A%E5%85%A8%E7%90%83%E6%94%BB%E5%8A%BF\">CSGO</a>、<a href=\"https://zh.wikipedia.org/wiki/%E6%97%A0%E7%95%8F%E5%A5%91%E7%BA%A6\">无畏契约</a>）</li>\n<li>Jazz Hiphop（<a href=\"https://zh.wikipedia.org/wiki/Nujabes\">Nujabes</a>、西原健一郎、<a href=\"https://zh.wikipedia.org/wiki/%E8%9B%8B%E5%A0%A1_(%E9%9F%B3%E6%A8%82%E4%BA%BA)\">蛋堡</a>）</li>\n</ul>\n"},{"title":"news","date":"2024-12-13T09:52:11.000Z","_content":"\n# 2025\n\n## 4月\n\n- 4月10日，开始读 [DDIA](https://book.douban.com/subject/30329536/) (数据密集型应用系统设计 Designing Data-Intensive Application)，希望能让我成长些。\n- 4月9日，月结束了六个月的试用期，我们都很开心，原本想加餐吃点小龙虾庆祝，最后吃的是鸡排、烤肠还有薯塔。\n- 4月4日，我和月去水会玩了一个下午，自助水果里有草莓和蓝莓，游戏机也挺好玩，满意。\n\n## 3月\n\n## 2月\n\n- 2月21日，和月一起去了山城重庆玩了2天，网红化有点严重，不过吃的还是没踩雷，推荐江湖菜。\n\n## 1月\n\n# 2024\n\n## 12月\n\n- 12月29日，玩了一下幽灵行者（Ghost Runner），有点难。\n- 12月24日，自己一个个买零件，装了我的第一台主机，7500F+4060 的一个组合。\n- 12月21日，最后一颗智齿拆线，舒服了～\n- 12月13日，整了一台投影仪，以后可以在卧室躺着看电影了。\n","source":"news/index.md","raw":"---\ntitle: news\ndate: 2024-12-13 17:52:11\n---\n\n# 2025\n\n## 4月\n\n- 4月10日，开始读 [DDIA](https://book.douban.com/subject/30329536/) (数据密集型应用系统设计 Designing Data-Intensive Application)，希望能让我成长些。\n- 4月9日，月结束了六个月的试用期，我们都很开心，原本想加餐吃点小龙虾庆祝，最后吃的是鸡排、烤肠还有薯塔。\n- 4月4日，我和月去水会玩了一个下午，自助水果里有草莓和蓝莓，游戏机也挺好玩，满意。\n\n## 3月\n\n## 2月\n\n- 2月21日，和月一起去了山城重庆玩了2天，网红化有点严重，不过吃的还是没踩雷，推荐江湖菜。\n\n## 1月\n\n# 2024\n\n## 12月\n\n- 12月29日，玩了一下幽灵行者（Ghost Runner），有点难。\n- 12月24日，自己一个个买零件，装了我的第一台主机，7500F+4060 的一个组合。\n- 12月21日，最后一颗智齿拆线，舒服了～\n- 12月13日，整了一台投影仪，以后可以在卧室躺着看电影了。\n","updated":"2025-04-10T02:08:59.991Z","path":"news/index.html","_id":"cm4w2on680002stk84ex2458a","comments":1,"layout":"page","content":"<h1 id=\"2025\"><a href=\"#2025\" class=\"headerlink\" title=\"2025\"></a>2025</h1><h2 id=\"4月\"><a href=\"#4月\" class=\"headerlink\" title=\"4月\"></a>4月</h2><ul>\n<li>4月10日，开始读 <a href=\"https://book.douban.com/subject/30329536/\">DDIA</a> (数据密集型应用系统设计 Designing Data-Intensive Application)，希望能让我成长些。</li>\n<li>4月9日，月结束了六个月的试用期，我们都很开心，原本想加餐吃点小龙虾庆祝，最后吃的是鸡排、烤肠还有薯塔。</li>\n<li>4月4日，我和月去水会玩了一个下午，自助水果里有草莓和蓝莓，游戏机也挺好玩，满意。</li>\n</ul>\n<h2 id=\"3月\"><a href=\"#3月\" class=\"headerlink\" title=\"3月\"></a>3月</h2><h2 id=\"2月\"><a href=\"#2月\" class=\"headerlink\" title=\"2月\"></a>2月</h2><ul>\n<li>2月21日，和月一起去了山城重庆玩了2天，网红化有点严重，不过吃的还是没踩雷，推荐江湖菜。</li>\n</ul>\n<h2 id=\"1月\"><a href=\"#1月\" class=\"headerlink\" title=\"1月\"></a>1月</h2><h1 id=\"2024\"><a href=\"#2024\" class=\"headerlink\" title=\"2024\"></a>2024</h1><h2 id=\"12月\"><a href=\"#12月\" class=\"headerlink\" title=\"12月\"></a>12月</h2><ul>\n<li>12月29日，玩了一下幽灵行者（Ghost Runner），有点难。</li>\n<li>12月24日，自己一个个买零件，装了我的第一台主机，7500F+4060 的一个组合。</li>\n<li>12月21日，最后一颗智齿拆线，舒服了～</li>\n<li>12月13日，整了一台投影仪，以后可以在卧室躺着看电影了。</li>\n</ul>\n","cover":false,"excerpt":"","more":"<h1 id=\"2025\"><a href=\"#2025\" class=\"headerlink\" title=\"2025\"></a>2025</h1><h2 id=\"4月\"><a href=\"#4月\" class=\"headerlink\" title=\"4月\"></a>4月</h2><ul>\n<li>4月10日，开始读 <a href=\"https://book.douban.com/subject/30329536/\">DDIA</a> (数据密集型应用系统设计 Designing Data-Intensive Application)，希望能让我成长些。</li>\n<li>4月9日，月结束了六个月的试用期，我们都很开心，原本想加餐吃点小龙虾庆祝，最后吃的是鸡排、烤肠还有薯塔。</li>\n<li>4月4日，我和月去水会玩了一个下午，自助水果里有草莓和蓝莓，游戏机也挺好玩，满意。</li>\n</ul>\n<h2 id=\"3月\"><a href=\"#3月\" class=\"headerlink\" title=\"3月\"></a>3月</h2><h2 id=\"2月\"><a href=\"#2月\" class=\"headerlink\" title=\"2月\"></a>2月</h2><ul>\n<li>2月21日，和月一起去了山城重庆玩了2天，网红化有点严重，不过吃的还是没踩雷，推荐江湖菜。</li>\n</ul>\n<h2 id=\"1月\"><a href=\"#1月\" class=\"headerlink\" title=\"1月\"></a>1月</h2><h1 id=\"2024\"><a href=\"#2024\" class=\"headerlink\" title=\"2024\"></a>2024</h1><h2 id=\"12月\"><a href=\"#12月\" class=\"headerlink\" title=\"12月\"></a>12月</h2><ul>\n<li>12月29日，玩了一下幽灵行者（Ghost Runner），有点难。</li>\n<li>12月24日，自己一个个买零件，装了我的第一台主机，7500F+4060 的一个组合。</li>\n<li>12月21日，最后一颗智齿拆线，舒服了～</li>\n<li>12月13日，整了一台投影仪，以后可以在卧室躺着看电影了。</li>\n</ul>\n"},{"title":"release plan","date":"2024-12-10T12:09:41.000Z","_content":"\n> 此处用于预告（鞭策）自己后面的博客更新计划，欢迎各位留言（吐槽）\n\n| 内容           | 优先级 |\n| -------------- | ------ |\n| 电影、音乐专栏 | P2     |\n| 英语学习专栏   | P2     |\n| tag专栏        | P0     |\n| Golang进阶学习   | P1     |\n| promethues学习 | P1     |\n| Elastic学习   | P1     |\n| 。。。         |        |","source":"release-plan/index.md","raw":"---\ntitle: release plan\ndate: 2024-12-10 20:09:41\n---\n\n> 此处用于预告（鞭策）自己后面的博客更新计划，欢迎各位留言（吐槽）\n\n| 内容           | 优先级 |\n| -------------- | ------ |\n| 电影、音乐专栏 | P2     |\n| 英语学习专栏   | P2     |\n| tag专栏        | P0     |\n| Golang进阶学习   | P1     |\n| promethues学习 | P1     |\n| Elastic学习   | P1     |\n| 。。。         |        |","updated":"2025-04-10T03:47:10.886Z","path":"release-plan/index.html","_id":"cm4w2on690004stk81cgc6ysd","comments":1,"layout":"page","content":"<blockquote>\n<p>此处用于预告（鞭策）自己后面的博客更新计划，欢迎各位留言（吐槽）</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>内容</th>\n<th>优先级</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>电影、音乐专栏</td>\n<td>P2</td>\n</tr>\n<tr>\n<td>英语学习专栏</td>\n<td>P2</td>\n</tr>\n<tr>\n<td>tag专栏</td>\n<td>P0</td>\n</tr>\n<tr>\n<td>Golang进阶学习</td>\n<td>P1</td>\n</tr>\n<tr>\n<td>promethues学习</td>\n<td>P1</td>\n</tr>\n<tr>\n<td>Elastic学习</td>\n<td>P1</td>\n</tr>\n<tr>\n<td>。。。</td>\n<td></td>\n</tr>\n</tbody></table>\n","cover":false,"excerpt":"","more":"<blockquote>\n<p>此处用于预告（鞭策）自己后面的博客更新计划，欢迎各位留言（吐槽）</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>内容</th>\n<th>优先级</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>电影、音乐专栏</td>\n<td>P2</td>\n</tr>\n<tr>\n<td>英语学习专栏</td>\n<td>P2</td>\n</tr>\n<tr>\n<td>tag专栏</td>\n<td>P0</td>\n</tr>\n<tr>\n<td>Golang进阶学习</td>\n<td>P1</td>\n</tr>\n<tr>\n<td>promethues学习</td>\n<td>P1</td>\n</tr>\n<tr>\n<td>Elastic学习</td>\n<td>P1</td>\n</tr>\n<tr>\n<td>。。。</td>\n<td></td>\n</tr>\n</tbody></table>\n"},{"title":"Tags","date":"2024-12-10T10:50:20.000Z","type":"tags","orderby":"name","order":1,"_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2024-12-10 18:50:20\ntype: 'tags'\norderby: name\norder: 1\n---\n","updated":"2024-12-10T10:53:13.864Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cm4w2on6a0006stk86js24rik","content":"","cover":false,"excerpt":"","more":""},{"title":"resources","date":"2025-04-10T02:09:41.000Z","_content":"\n> 此处用于记录一些资源\n\n- Golang\n    - https://go101.org/article/unofficial-faq.html\n    - https://go101.org/quizzes/101.html\n\n- DB\n    - 阿里数据库月报 http://mysql.taobao.org/monthly/\n\n- middleware\n    - 详解Prometheus https://juejin.cn/post/7315720126988124175\n\n- frame\n    - DDIA 阅读笔记 https://www.yuque.com/fuxuemingzhu/ddia/kpqcs3\n    - DDIA 开源翻译 https://vonng.gitbooks.io/ddia-cn/content/\n\n- blog\n    - 卡瓦邦噶 https://www.kawabangga.com/collection\n    - 张洪Heo https://blog.zhheo.com/\n    - 入行 14 年，我还是觉得编程很难 https://www.piglei.com/articles/programming-is-still-hard-after-14-years/\n    - 程序员阅读清单：我喜欢的 100 篇技术文章 https://www.piglei.com/articles/programmer-reading-list-1/\n\n\n- tool\n    - 文本对比 https://www.jq22.com/textDifference#google_vignette\n    - 时间戳 https://www.sojson.com/unixtime.html\n\n- web3\n    - https://defi-learning.org/f22\n\n- 网站分析\n    - 百度统计 https://tongji.baidu.com/main/setting/10000657945/home/site/index\n    - Google Analytics https://analytics.google.com/analytics/web/#/p466313777/reports/intelligenthome\n    - Google Search Console https://search.google.com/search-console/welcome\n    - cloudflare https://dash.cloudflare.com/402626bc76e7aa10a4f068758f7e4fd5/web-analytics/sites\n    - Microsoft https://clarity.microsoft.com/projects\n\n- other\n    - C语言 https://akaedu.github.io/book/index.html\n    - 扣哒世界 游戏学编程 https://codecombat.com/\n    - 计算机教育中缺失的一课 https://missing-semester-cn.github.io\n    - TeachYoursel https://github.com/izackwu/TeachYourselfCS-CN/blob/master/TeachYourselfCS-CN.md\n    - MC开服教程 https://www.minebbs.com/threads/nitwikit.26356/\n    - 实现你自己的xxx https://github.com/codecrafters-io/build-your-own-x\n    - 让github每天都是绿的 https://cloud.tencent.com/developer/article/1796848\n    - shell 十三问 http://bbs.chinaunix.net/forum.php?mod=viewthread&tid=218853&page=1#pid1452197","source":"resources/index.md","raw":"---\ntitle: resources\ndate: 2025-04-10 10:09:41\n---\n\n> 此处用于记录一些资源\n\n- Golang\n    - https://go101.org/article/unofficial-faq.html\n    - https://go101.org/quizzes/101.html\n\n- DB\n    - 阿里数据库月报 http://mysql.taobao.org/monthly/\n\n- middleware\n    - 详解Prometheus https://juejin.cn/post/7315720126988124175\n\n- frame\n    - DDIA 阅读笔记 https://www.yuque.com/fuxuemingzhu/ddia/kpqcs3\n    - DDIA 开源翻译 https://vonng.gitbooks.io/ddia-cn/content/\n\n- blog\n    - 卡瓦邦噶 https://www.kawabangga.com/collection\n    - 张洪Heo https://blog.zhheo.com/\n    - 入行 14 年，我还是觉得编程很难 https://www.piglei.com/articles/programming-is-still-hard-after-14-years/\n    - 程序员阅读清单：我喜欢的 100 篇技术文章 https://www.piglei.com/articles/programmer-reading-list-1/\n\n\n- tool\n    - 文本对比 https://www.jq22.com/textDifference#google_vignette\n    - 时间戳 https://www.sojson.com/unixtime.html\n\n- web3\n    - https://defi-learning.org/f22\n\n- 网站分析\n    - 百度统计 https://tongji.baidu.com/main/setting/10000657945/home/site/index\n    - Google Analytics https://analytics.google.com/analytics/web/#/p466313777/reports/intelligenthome\n    - Google Search Console https://search.google.com/search-console/welcome\n    - cloudflare https://dash.cloudflare.com/402626bc76e7aa10a4f068758f7e4fd5/web-analytics/sites\n    - Microsoft https://clarity.microsoft.com/projects\n\n- other\n    - C语言 https://akaedu.github.io/book/index.html\n    - 扣哒世界 游戏学编程 https://codecombat.com/\n    - 计算机教育中缺失的一课 https://missing-semester-cn.github.io\n    - TeachYoursel https://github.com/izackwu/TeachYourselfCS-CN/blob/master/TeachYourselfCS-CN.md\n    - MC开服教程 https://www.minebbs.com/threads/nitwikit.26356/\n    - 实现你自己的xxx https://github.com/codecrafters-io/build-your-own-x\n    - 让github每天都是绿的 https://cloud.tencent.com/developer/article/1796848\n    - shell 十三问 http://bbs.chinaunix.net/forum.php?mod=viewthread&tid=218853&page=1#pid1452197","updated":"2025-04-10T03:48:49.684Z","path":"resources/index.html","_id":"cm9atgyf10000owk85n38bs0n","comments":1,"layout":"page","content":"<blockquote>\n<p>此处用于记录一些资源</p>\n</blockquote>\n<ul>\n<li><p>Golang</p>\n<ul>\n<li><a href=\"https://go101.org/article/unofficial-faq.html\">https://go101.org/article/unofficial-faq.html</a></li>\n<li><a href=\"https://go101.org/quizzes/101.html\">https://go101.org/quizzes/101.html</a></li>\n</ul>\n</li>\n<li><p>DB</p>\n<ul>\n<li>阿里数据库月报 <a href=\"http://mysql.taobao.org/monthly/\">http://mysql.taobao.org/monthly/</a></li>\n</ul>\n</li>\n<li><p>middleware</p>\n<ul>\n<li>详解Prometheus <a href=\"https://juejin.cn/post/7315720126988124175\">https://juejin.cn/post/7315720126988124175</a></li>\n</ul>\n</li>\n<li><p>frame</p>\n<ul>\n<li>DDIA 阅读笔记 <a href=\"https://www.yuque.com/fuxuemingzhu/ddia/kpqcs3\">https://www.yuque.com/fuxuemingzhu/ddia/kpqcs3</a></li>\n<li>DDIA 开源翻译 <a href=\"https://vonng.gitbooks.io/ddia-cn/content/\">https://vonng.gitbooks.io/ddia-cn/content/</a></li>\n</ul>\n</li>\n<li><p>blog</p>\n<ul>\n<li>卡瓦邦噶 <a href=\"https://www.kawabangga.com/collection\">https://www.kawabangga.com/collection</a></li>\n<li>张洪Heo <a href=\"https://blog.zhheo.com/\">https://blog.zhheo.com/</a></li>\n<li>入行 14 年，我还是觉得编程很难 <a href=\"https://www.piglei.com/articles/programming-is-still-hard-after-14-years/\">https://www.piglei.com/articles/programming-is-still-hard-after-14-years/</a></li>\n<li>程序员阅读清单：我喜欢的 100 篇技术文章 <a href=\"https://www.piglei.com/articles/programmer-reading-list-1/\">https://www.piglei.com/articles/programmer-reading-list-1/</a></li>\n</ul>\n</li>\n<li><p>tool</p>\n<ul>\n<li>文本对比 <a href=\"https://www.jq22.com/textDifference#google_vignette\">https://www.jq22.com/textDifference#google_vignette</a></li>\n<li>时间戳 <a href=\"https://www.sojson.com/unixtime.html\">https://www.sojson.com/unixtime.html</a></li>\n</ul>\n</li>\n<li><p>web3</p>\n<ul>\n<li><a href=\"https://defi-learning.org/f22\">https://defi-learning.org/f22</a></li>\n</ul>\n</li>\n<li><p>网站分析</p>\n<ul>\n<li>百度统计 <a href=\"https://tongji.baidu.com/main/setting/10000657945/home/site/index\">https://tongji.baidu.com/main/setting/10000657945/home/site/index</a></li>\n<li>Google Analytics <a href=\"https://analytics.google.com/analytics/web/#/p466313777/reports/intelligenthome\">https://analytics.google.com/analytics/web/#/p466313777/reports/intelligenthome</a></li>\n<li>Google Search Console <a href=\"https://search.google.com/search-console/welcome\">https://search.google.com/search-console/welcome</a></li>\n<li>cloudflare <a href=\"https://dash.cloudflare.com/402626bc76e7aa10a4f068758f7e4fd5/web-analytics/sites\">https://dash.cloudflare.com/402626bc76e7aa10a4f068758f7e4fd5/web-analytics/sites</a></li>\n<li>Microsoft <a href=\"https://clarity.microsoft.com/projects\">https://clarity.microsoft.com/projects</a></li>\n</ul>\n</li>\n<li><p>other</p>\n<ul>\n<li>C语言 <a href=\"https://akaedu.github.io/book/index.html\">https://akaedu.github.io/book/index.html</a></li>\n<li>扣哒世界 游戏学编程 <a href=\"https://codecombat.com/\">https://codecombat.com/</a></li>\n<li>计算机教育中缺失的一课 <a href=\"https://missing-semester-cn.github.io/\">https://missing-semester-cn.github.io</a></li>\n<li>TeachYoursel <a href=\"https://github.com/izackwu/TeachYourselfCS-CN/blob/master/TeachYourselfCS-CN.md\">https://github.com/izackwu/TeachYourselfCS-CN/blob/master/TeachYourselfCS-CN.md</a></li>\n<li>MC开服教程 <a href=\"https://www.minebbs.com/threads/nitwikit.26356/\">https://www.minebbs.com/threads/nitwikit.26356/</a></li>\n<li>实现你自己的xxx <a href=\"https://github.com/codecrafters-io/build-your-own-x\">https://github.com/codecrafters-io/build-your-own-x</a></li>\n<li>让github每天都是绿的 <a href=\"https://cloud.tencent.com/developer/article/1796848\">https://cloud.tencent.com/developer/article/1796848</a></li>\n<li>shell 十三问 <a href=\"http://bbs.chinaunix.net/forum.php?mod=viewthread&tid=218853&page=1#pid1452197\">http://bbs.chinaunix.net/forum.php?mod=viewthread&amp;tid=218853&amp;page=1#pid1452197</a></li>\n</ul>\n</li>\n</ul>\n","cover":false,"excerpt":"","more":"<blockquote>\n<p>此处用于记录一些资源</p>\n</blockquote>\n<ul>\n<li><p>Golang</p>\n<ul>\n<li><a href=\"https://go101.org/article/unofficial-faq.html\">https://go101.org/article/unofficial-faq.html</a></li>\n<li><a href=\"https://go101.org/quizzes/101.html\">https://go101.org/quizzes/101.html</a></li>\n</ul>\n</li>\n<li><p>DB</p>\n<ul>\n<li>阿里数据库月报 <a href=\"http://mysql.taobao.org/monthly/\">http://mysql.taobao.org/monthly/</a></li>\n</ul>\n</li>\n<li><p>middleware</p>\n<ul>\n<li>详解Prometheus <a href=\"https://juejin.cn/post/7315720126988124175\">https://juejin.cn/post/7315720126988124175</a></li>\n</ul>\n</li>\n<li><p>frame</p>\n<ul>\n<li>DDIA 阅读笔记 <a href=\"https://www.yuque.com/fuxuemingzhu/ddia/kpqcs3\">https://www.yuque.com/fuxuemingzhu/ddia/kpqcs3</a></li>\n<li>DDIA 开源翻译 <a href=\"https://vonng.gitbooks.io/ddia-cn/content/\">https://vonng.gitbooks.io/ddia-cn/content/</a></li>\n</ul>\n</li>\n<li><p>blog</p>\n<ul>\n<li>卡瓦邦噶 <a href=\"https://www.kawabangga.com/collection\">https://www.kawabangga.com/collection</a></li>\n<li>张洪Heo <a href=\"https://blog.zhheo.com/\">https://blog.zhheo.com/</a></li>\n<li>入行 14 年，我还是觉得编程很难 <a href=\"https://www.piglei.com/articles/programming-is-still-hard-after-14-years/\">https://www.piglei.com/articles/programming-is-still-hard-after-14-years/</a></li>\n<li>程序员阅读清单：我喜欢的 100 篇技术文章 <a href=\"https://www.piglei.com/articles/programmer-reading-list-1/\">https://www.piglei.com/articles/programmer-reading-list-1/</a></li>\n</ul>\n</li>\n<li><p>tool</p>\n<ul>\n<li>文本对比 <a href=\"https://www.jq22.com/textDifference#google_vignette\">https://www.jq22.com/textDifference#google_vignette</a></li>\n<li>时间戳 <a href=\"https://www.sojson.com/unixtime.html\">https://www.sojson.com/unixtime.html</a></li>\n</ul>\n</li>\n<li><p>web3</p>\n<ul>\n<li><a href=\"https://defi-learning.org/f22\">https://defi-learning.org/f22</a></li>\n</ul>\n</li>\n<li><p>网站分析</p>\n<ul>\n<li>百度统计 <a href=\"https://tongji.baidu.com/main/setting/10000657945/home/site/index\">https://tongji.baidu.com/main/setting/10000657945/home/site/index</a></li>\n<li>Google Analytics <a href=\"https://analytics.google.com/analytics/web/#/p466313777/reports/intelligenthome\">https://analytics.google.com/analytics/web/#/p466313777/reports/intelligenthome</a></li>\n<li>Google Search Console <a href=\"https://search.google.com/search-console/welcome\">https://search.google.com/search-console/welcome</a></li>\n<li>cloudflare <a href=\"https://dash.cloudflare.com/402626bc76e7aa10a4f068758f7e4fd5/web-analytics/sites\">https://dash.cloudflare.com/402626bc76e7aa10a4f068758f7e4fd5/web-analytics/sites</a></li>\n<li>Microsoft <a href=\"https://clarity.microsoft.com/projects\">https://clarity.microsoft.com/projects</a></li>\n</ul>\n</li>\n<li><p>other</p>\n<ul>\n<li>C语言 <a href=\"https://akaedu.github.io/book/index.html\">https://akaedu.github.io/book/index.html</a></li>\n<li>扣哒世界 游戏学编程 <a href=\"https://codecombat.com/\">https://codecombat.com/</a></li>\n<li>计算机教育中缺失的一课 <a href=\"https://missing-semester-cn.github.io/\">https://missing-semester-cn.github.io</a></li>\n<li>TeachYoursel <a href=\"https://github.com/izackwu/TeachYourselfCS-CN/blob/master/TeachYourselfCS-CN.md\">https://github.com/izackwu/TeachYourselfCS-CN/blob/master/TeachYourselfCS-CN.md</a></li>\n<li>MC开服教程 <a href=\"https://www.minebbs.com/threads/nitwikit.26356/\">https://www.minebbs.com/threads/nitwikit.26356/</a></li>\n<li>实现你自己的xxx <a href=\"https://github.com/codecrafters-io/build-your-own-x\">https://github.com/codecrafters-io/build-your-own-x</a></li>\n<li>让github每天都是绿的 <a href=\"https://cloud.tencent.com/developer/article/1796848\">https://cloud.tencent.com/developer/article/1796848</a></li>\n<li>shell 十三问 <a href=\"http://bbs.chinaunix.net/forum.php?mod=viewthread&tid=218853&page=1#pid1452197\">http://bbs.chinaunix.net/forum.php?mod=viewthread&amp;tid=218853&amp;page=1#pid1452197</a></li>\n</ul>\n</li>\n</ul>\n"}],"Post":[{"title":"Linux常用命令","date":"2024-11-20T09:18:47.000Z","_content":"### 安装JDK\n\n- 检查是否已安装\n\n```shell\n[root@localhost ~]# java -version\n```\n\n- yum方法\n\n```shell\n# 获取 jdk 列表\n# 选择带-devel的版本，不带的是jre\n[root@localhost ~]# yum -y list java*\n[root@localhost ~]# yum install -y java-1.8.0-openjdk-devel.x86_64\n```\n\n```shell\n# 卸载\n[root@localhost ~]# yum list installed | grep java\n[root@localhost ~]# yum -y remove java-1.8.0*\n[root@localhost ~]# yum -y remove tzdata-java.noarch\n[root@localhost ~]# yum -y remove javapackages-tools.noarch\n```\n\n- 压缩包方法\n\n```shell\n# 解压JDK到指定的目录，如果不存在请建立该目录：/usr/lib/jvm\n[root@localhost ~]# tar -xvf jdk-8u131-linux-x64.tar.gz -C /usr/lib/jvm\n# 修改环境变量\n[root@localhost ~]# vim /etc/profile\n```\n\n```shell\nJAVA_HOME=/usr/lib/jvm/jdk1.8.0_131\nJRE_HOME=$JAVA_HOME/jre\nPATH=$PATH:$JAVA_HOME/bin\nCLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nexport JAVA_HOME\nexport JRE_HOME\nexport PATH\nexport CLASSPATH\n```\n\n```shell\n# 刷新环境变量\n[root@localhost ~]# source /etc/profile\n# 配置超链接\n[root@localhost ~]# ln -s /usr/lib/jvm/jdk1.8.0_131/bin/java /usr/bin/java\n```\n\n***\n\ntodo","source":"_posts/Linux常用命令.md","raw":"---\ntitle: Linux常用命令\ndate: 2024-11-20 17:18:47\ntags:\n---\n### 安装JDK\n\n- 检查是否已安装\n\n```shell\n[root@localhost ~]# java -version\n```\n\n- yum方法\n\n```shell\n# 获取 jdk 列表\n# 选择带-devel的版本，不带的是jre\n[root@localhost ~]# yum -y list java*\n[root@localhost ~]# yum install -y java-1.8.0-openjdk-devel.x86_64\n```\n\n```shell\n# 卸载\n[root@localhost ~]# yum list installed | grep java\n[root@localhost ~]# yum -y remove java-1.8.0*\n[root@localhost ~]# yum -y remove tzdata-java.noarch\n[root@localhost ~]# yum -y remove javapackages-tools.noarch\n```\n\n- 压缩包方法\n\n```shell\n# 解压JDK到指定的目录，如果不存在请建立该目录：/usr/lib/jvm\n[root@localhost ~]# tar -xvf jdk-8u131-linux-x64.tar.gz -C /usr/lib/jvm\n# 修改环境变量\n[root@localhost ~]# vim /etc/profile\n```\n\n```shell\nJAVA_HOME=/usr/lib/jvm/jdk1.8.0_131\nJRE_HOME=$JAVA_HOME/jre\nPATH=$PATH:$JAVA_HOME/bin\nCLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nexport JAVA_HOME\nexport JRE_HOME\nexport PATH\nexport CLASSPATH\n```\n\n```shell\n# 刷新环境变量\n[root@localhost ~]# source /etc/profile\n# 配置超链接\n[root@localhost ~]# ln -s /usr/lib/jvm/jdk1.8.0_131/bin/java /usr/bin/java\n```\n\n***\n\ntodo","slug":"Linux常用命令","published":1,"updated":"2024-11-20T09:20:56.735Z","comments":1,"layout":"post","photos":[],"_id":"cm4w2on670001stk83lv0bdp0","content":"<h3 id=\"安装JDK\"><a href=\"#安装JDK\" class=\"headerlink\" title=\"安装JDK\"></a>安装JDK</h3><ul>\n<li>检查是否已安装</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# java -version</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>yum方法</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取 jdk 列表</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">选择带-devel的版本，不带的是jre</span></span><br><span class=\"line\">[root@localhost ~]# yum -y list java*</span><br><span class=\"line\">[root@localhost ~]# yum install -y java-1.8.0-openjdk-devel.x86_64</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">卸载</span></span><br><span class=\"line\">[root@localhost ~]# yum list installed | grep java</span><br><span class=\"line\">[root@localhost ~]# yum -y remove java-1.8.0*</span><br><span class=\"line\">[root@localhost ~]# yum -y remove tzdata-java.noarch</span><br><span class=\"line\">[root@localhost ~]# yum -y remove javapackages-tools.noarch</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>压缩包方法</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解压JDK到指定的目录，如果不存在请建立该目录：/usr/lib/jvm</span></span><br><span class=\"line\">[root@localhost ~]# tar -xvf jdk-8u131-linux-x64.tar.gz -C /usr/lib/jvm</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改环境变量</span></span><br><span class=\"line\">[root@localhost ~]# vim /etc/profile</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_HOME=/usr/lib/jvm/jdk1.8.0_131</span><br><span class=\"line\">JRE_HOME=$JAVA_HOME/jre</span><br><span class=\"line\">PATH=$PATH:$JAVA_HOME/bin</span><br><span class=\"line\">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">export JAVA_HOME</span><br><span class=\"line\">export JRE_HOME</span><br><span class=\"line\">export PATH</span><br><span class=\"line\">export CLASSPATH</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">刷新环境变量</span></span><br><span class=\"line\">[root@localhost ~]# source /etc/profile</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置超链接</span></span><br><span class=\"line\">[root@localhost ~]# ln -s /usr/lib/jvm/jdk1.8.0_131/bin/java /usr/bin/java</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>todo</p>\n","cover":false,"excerpt":"","more":"<h3 id=\"安装JDK\"><a href=\"#安装JDK\" class=\"headerlink\" title=\"安装JDK\"></a>安装JDK</h3><ul>\n<li>检查是否已安装</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# java -version</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>yum方法</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取 jdk 列表</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">选择带-devel的版本，不带的是jre</span></span><br><span class=\"line\">[root@localhost ~]# yum -y list java*</span><br><span class=\"line\">[root@localhost ~]# yum install -y java-1.8.0-openjdk-devel.x86_64</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">卸载</span></span><br><span class=\"line\">[root@localhost ~]# yum list installed | grep java</span><br><span class=\"line\">[root@localhost ~]# yum -y remove java-1.8.0*</span><br><span class=\"line\">[root@localhost ~]# yum -y remove tzdata-java.noarch</span><br><span class=\"line\">[root@localhost ~]# yum -y remove javapackages-tools.noarch</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>压缩包方法</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解压JDK到指定的目录，如果不存在请建立该目录：/usr/lib/jvm</span></span><br><span class=\"line\">[root@localhost ~]# tar -xvf jdk-8u131-linux-x64.tar.gz -C /usr/lib/jvm</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改环境变量</span></span><br><span class=\"line\">[root@localhost ~]# vim /etc/profile</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_HOME=/usr/lib/jvm/jdk1.8.0_131</span><br><span class=\"line\">JRE_HOME=$JAVA_HOME/jre</span><br><span class=\"line\">PATH=$PATH:$JAVA_HOME/bin</span><br><span class=\"line\">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">export JAVA_HOME</span><br><span class=\"line\">export JRE_HOME</span><br><span class=\"line\">export PATH</span><br><span class=\"line\">export CLASSPATH</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">刷新环境变量</span></span><br><span class=\"line\">[root@localhost ~]# source /etc/profile</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置超链接</span></span><br><span class=\"line\">[root@localhost ~]# ln -s /usr/lib/jvm/jdk1.8.0_131/bin/java /usr/bin/java</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>todo</p>\n"},{"title":"一种写Hexo博客的姿势","date":"2024-11-11T12:23:11.000Z","_content":"\n## 写在前面\n\n> 本文旨在介绍一种技巧来简化使用hexo的一些步骤，使我们能专注于写文章的过程，提高效率。博主用的是macos，部分内容其他系统可能不适用，需要自行探索（doge）。\n\n首先我想介绍一个工具，叫makefile。什么是makefile？或许一些平时使用ide的程序员不太了解这个东西，因为它的主要能力——构建，已经融入了ide。在这篇博客里，我们只需要知道它可以将多行的命令打包成一句，然后执行。本文不会展开讲makefile的教学，只从当前的使用场景来讲讲我自己的用法和理解，抛砖引玉（大佬如有意见，可在文章底部留言）。\n\n展开学习makefile可参考：https://liaoxuefeng.com/books/makefile/makefile-basic/index.html\n\n\n\n## 使用前\n\n正常来说，使用hexo写一篇博客，需要以下步骤：\n\n1. `hexo new blog-title`开一篇新博客\n2. 哼哧哼哧开始写\n3. `hexo g`生成一下博客内容\n4. `hexo s`并且打开浏览器，输入`http://localhost:4000`进行预览\n5. `hexo d`发布\n6. （如有）除了发布hexo博客本身之外，hexo博客工程也要在github等远端上做备份，需要`git add, commit, push`\n\n**现在我说，后面四步都可以一行指令解决，并且很简单。**\n\n\n\n## 如何使用\n\n### 准备\n\n- 已经能使用上面提到的命令，正常使用hexo\n\n- 为你本地的hexo博客工程也在代码托管平台（github等）创建一个仓库（建议为私有的），并能够git push\n\n- 检查makefile环境：`make -v`，如果没有版本信息等，则需要安装，参考：\n\n  - Linux：`sudo apt install build-essential`\n\n  - Maxos：`brew install make gcc`\n\n  - Windows：参考 https://tehub.com/a/aCYp1uw0tG\n\n    - 渠道1，从官网下载 make.exe Make for Windows\n\n      官网首页：https://www.gnu.org/software/make/\n\n      下载地址：https://gnuwin32.sourceforge.net/downlinks/make.php\n\n      完整安装后。把安装路径添加到环境变量 PATH 中.\n\n    - 渠道2，参考chocolaty官网安装chocolatey\n\n      https://community.chocolatey.org/packages/make\n\n      管理员运行power shell\n\n      ```shell\n      Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\n      ```\n\n      接着在power shell中键入如下命令安装make\n\n      ```shell\n      choco install make\n      ```\n\n    - 渠道3，安装mingw\n\n      下载路径：https://sourceforge.net/projects/mingw\n\n      里面有mingw32-make.exe，拷贝之后重命名为make.exe添加到环境变量PATH\n\n### 使用\n\n在你的博客工程下新建一个`Makefile`的文件，为其添加以下内容：\n\n``` makefile\nPORT=4000\n\n.PHONY: test\ntest:\n\t@git add . && git commit -m \"commit by makefile\" && git push &\n\n\t@if lsof -i :$(PORT); then kill -9 $$(lsof -t -i :$(PORT)); fi\n\t@nohup hexo g &\n\t@nohup hexo s &\n\n\t@sleep 2;\n\t@open -a \"/Applications/Safari.app\" 'http://localhost:$(PORT)' &\n\n.PHONY: live\nlive:\n\t@git add . && git commit -m \"commit by makefile\" && git push &\n\thexo clean\n\thexo g -d\n\n.DEFAULT_GOAL:= test\n```\n\n随后的效果就是，你在完成了博客编写的前两步，保存好你的博客。\n\n在控制台输入`make`\n\n你会发现你的整个工程被push到托管仓库，并且本地新写的文章被生成好hexo工程，启动了本地预览。浏览器也自动跳出来博客的最新版本，你简单检查一下觉得满意。\n\n在控制台输入`make live`\n\n你会发现你的整个工程被push到托管仓库，并且本地新写的文章被生成好hexo工程，博客也发布到github page上。\n\n\n\n## 写在后面\n\n其实稍微看一下Makefile文件里的内容，发现也蛮好理解的，就算没有学过。如果需要修改，注意以下的细节：\n\n1. 上面的代码`make`等价于`make test`，原因是最后一行的`.DEFAULT_GOAL:= test`，可以省略参数。\n2. `@open -a \"/Applications/Safari.app\" 'http://localhost:$(PORT)' &`是macos适用的，默认打开Safari浏览器进行预览，Windows需自行探索，或去掉这一行。\n\n引用廖雪峰大佬的博客内容：https://liaoxuefeng.com/books/makefile/introduction/index.html\n\n> `Makefile`相当于Java项目的`pom.xml`，Node工程的`package.json`，Rust项目的`Cargo.toml`，不同之处在于，`make`虽然最初是针对C语言开发，但它实际上并不限定C语言，而是可以应用到任意项目，甚至不是编程语言。此外，`make`主要用于Unix/Linux环境的自动化开发，掌握`Makefile`的写法，可以更好地在Linux环境下做开发，也可以为后续开发Linux内核做好准备。\n\n","source":"_posts/一种写Hexo博客的姿势.md","raw":"---\ntitle: 一种写Hexo博客的姿势\ndate: 2024-11-11 20:23:11\ntags: 轻松一下\n---\n\n## 写在前面\n\n> 本文旨在介绍一种技巧来简化使用hexo的一些步骤，使我们能专注于写文章的过程，提高效率。博主用的是macos，部分内容其他系统可能不适用，需要自行探索（doge）。\n\n首先我想介绍一个工具，叫makefile。什么是makefile？或许一些平时使用ide的程序员不太了解这个东西，因为它的主要能力——构建，已经融入了ide。在这篇博客里，我们只需要知道它可以将多行的命令打包成一句，然后执行。本文不会展开讲makefile的教学，只从当前的使用场景来讲讲我自己的用法和理解，抛砖引玉（大佬如有意见，可在文章底部留言）。\n\n展开学习makefile可参考：https://liaoxuefeng.com/books/makefile/makefile-basic/index.html\n\n\n\n## 使用前\n\n正常来说，使用hexo写一篇博客，需要以下步骤：\n\n1. `hexo new blog-title`开一篇新博客\n2. 哼哧哼哧开始写\n3. `hexo g`生成一下博客内容\n4. `hexo s`并且打开浏览器，输入`http://localhost:4000`进行预览\n5. `hexo d`发布\n6. （如有）除了发布hexo博客本身之外，hexo博客工程也要在github等远端上做备份，需要`git add, commit, push`\n\n**现在我说，后面四步都可以一行指令解决，并且很简单。**\n\n\n\n## 如何使用\n\n### 准备\n\n- 已经能使用上面提到的命令，正常使用hexo\n\n- 为你本地的hexo博客工程也在代码托管平台（github等）创建一个仓库（建议为私有的），并能够git push\n\n- 检查makefile环境：`make -v`，如果没有版本信息等，则需要安装，参考：\n\n  - Linux：`sudo apt install build-essential`\n\n  - Maxos：`brew install make gcc`\n\n  - Windows：参考 https://tehub.com/a/aCYp1uw0tG\n\n    - 渠道1，从官网下载 make.exe Make for Windows\n\n      官网首页：https://www.gnu.org/software/make/\n\n      下载地址：https://gnuwin32.sourceforge.net/downlinks/make.php\n\n      完整安装后。把安装路径添加到环境变量 PATH 中.\n\n    - 渠道2，参考chocolaty官网安装chocolatey\n\n      https://community.chocolatey.org/packages/make\n\n      管理员运行power shell\n\n      ```shell\n      Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\n      ```\n\n      接着在power shell中键入如下命令安装make\n\n      ```shell\n      choco install make\n      ```\n\n    - 渠道3，安装mingw\n\n      下载路径：https://sourceforge.net/projects/mingw\n\n      里面有mingw32-make.exe，拷贝之后重命名为make.exe添加到环境变量PATH\n\n### 使用\n\n在你的博客工程下新建一个`Makefile`的文件，为其添加以下内容：\n\n``` makefile\nPORT=4000\n\n.PHONY: test\ntest:\n\t@git add . && git commit -m \"commit by makefile\" && git push &\n\n\t@if lsof -i :$(PORT); then kill -9 $$(lsof -t -i :$(PORT)); fi\n\t@nohup hexo g &\n\t@nohup hexo s &\n\n\t@sleep 2;\n\t@open -a \"/Applications/Safari.app\" 'http://localhost:$(PORT)' &\n\n.PHONY: live\nlive:\n\t@git add . && git commit -m \"commit by makefile\" && git push &\n\thexo clean\n\thexo g -d\n\n.DEFAULT_GOAL:= test\n```\n\n随后的效果就是，你在完成了博客编写的前两步，保存好你的博客。\n\n在控制台输入`make`\n\n你会发现你的整个工程被push到托管仓库，并且本地新写的文章被生成好hexo工程，启动了本地预览。浏览器也自动跳出来博客的最新版本，你简单检查一下觉得满意。\n\n在控制台输入`make live`\n\n你会发现你的整个工程被push到托管仓库，并且本地新写的文章被生成好hexo工程，博客也发布到github page上。\n\n\n\n## 写在后面\n\n其实稍微看一下Makefile文件里的内容，发现也蛮好理解的，就算没有学过。如果需要修改，注意以下的细节：\n\n1. 上面的代码`make`等价于`make test`，原因是最后一行的`.DEFAULT_GOAL:= test`，可以省略参数。\n2. `@open -a \"/Applications/Safari.app\" 'http://localhost:$(PORT)' &`是macos适用的，默认打开Safari浏览器进行预览，Windows需自行探索，或去掉这一行。\n\n引用廖雪峰大佬的博客内容：https://liaoxuefeng.com/books/makefile/introduction/index.html\n\n> `Makefile`相当于Java项目的`pom.xml`，Node工程的`package.json`，Rust项目的`Cargo.toml`，不同之处在于，`make`虽然最初是针对C语言开发，但它实际上并不限定C语言，而是可以应用到任意项目，甚至不是编程语言。此外，`make`主要用于Unix/Linux环境的自动化开发，掌握`Makefile`的写法，可以更好地在Linux环境下做开发，也可以为后续开发Linux内核做好准备。\n\n","slug":"一种写Hexo博客的姿势","published":1,"updated":"2024-12-10T12:11:52.962Z","comments":1,"layout":"post","photos":[],"_id":"cm4w2on690003stk83rz463fu","content":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><blockquote>\n<p>本文旨在介绍一种技巧来简化使用hexo的一些步骤，使我们能专注于写文章的过程，提高效率。博主用的是macos，部分内容其他系统可能不适用，需要自行探索（doge）。</p>\n</blockquote>\n<p>首先我想介绍一个工具，叫makefile。什么是makefile？或许一些平时使用ide的程序员不太了解这个东西，因为它的主要能力——构建，已经融入了ide。在这篇博客里，我们只需要知道它可以将多行的命令打包成一句，然后执行。本文不会展开讲makefile的教学，只从当前的使用场景来讲讲我自己的用法和理解，抛砖引玉（大佬如有意见，可在文章底部留言）。</p>\n<p>展开学习makefile可参考：<a href=\"https://liaoxuefeng.com/books/makefile/makefile-basic/index.html\">https://liaoxuefeng.com/books/makefile/makefile-basic/index.html</a></p>\n<h2 id=\"使用前\"><a href=\"#使用前\" class=\"headerlink\" title=\"使用前\"></a>使用前</h2><p>正常来说，使用hexo写一篇博客，需要以下步骤：</p>\n<ol>\n<li><code>hexo new blog-title</code>开一篇新博客</li>\n<li>哼哧哼哧开始写</li>\n<li><code>hexo g</code>生成一下博客内容</li>\n<li><code>hexo s</code>并且打开浏览器，输入<code>http://localhost:4000</code>进行预览</li>\n<li><code>hexo d</code>发布</li>\n<li>（如有）除了发布hexo博客本身之外，hexo博客工程也要在github等远端上做备份，需要<code>git add, commit, push</code></li>\n</ol>\n<p><strong>现在我说，后面四步都可以一行指令解决，并且很简单。</strong></p>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><ul>\n<li><p>已经能使用上面提到的命令，正常使用hexo</p>\n</li>\n<li><p>为你本地的hexo博客工程也在代码托管平台（github等）创建一个仓库（建议为私有的），并能够git push</p>\n</li>\n<li><p>检查makefile环境：<code>make -v</code>，如果没有版本信息等，则需要安装，参考：</p>\n<ul>\n<li><p>Linux：<code>sudo apt install build-essential</code></p>\n</li>\n<li><p>Maxos：<code>brew install make gcc</code></p>\n</li>\n<li><p>Windows：参考 <a href=\"https://tehub.com/a/aCYp1uw0tG\">https://tehub.com/a/aCYp1uw0tG</a></p>\n<ul>\n<li><p>渠道1，从官网下载 make.exe Make for Windows</p>\n<p>官网首页：<a href=\"https://www.gnu.org/software/make/\">https://www.gnu.org/software/make/</a></p>\n<p>下载地址：<a href=\"https://gnuwin32.sourceforge.net/downlinks/make.php\">https://gnuwin32.sourceforge.net/downlinks/make.php</a></p>\n<p>完整安装后。把安装路径添加到环境变量 PATH 中.</p>\n</li>\n<li><p>渠道2，参考chocolaty官网安装chocolatey</p>\n<p><a href=\"https://community.chocolatey.org/packages/make\">https://community.chocolatey.org/packages/make</a></p>\n<p>管理员运行power shell</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&#x27;https://chocolatey.org/install.ps1&#x27;))</span><br></pre></td></tr></table></figure>\n\n<p>接着在power shell中键入如下命令安装make</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">choco install make</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>渠道3，安装mingw</p>\n<p>下载路径：<a href=\"https://sourceforge.net/projects/mingw\">https://sourceforge.net/projects/mingw</a></p>\n<p>里面有mingw32-make.exe，拷贝之后重命名为make.exe添加到环境变量PATH</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>在你的博客工程下新建一个<code>Makefile</code>的文件，为其添加以下内容：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PORT=4000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>: test</span></span><br><span class=\"line\"><span class=\"section\">test:</span></span><br><span class=\"line\">\t@git add . &amp;&amp; git commit -m <span class=\"string\">&quot;commit by makefile&quot;</span> &amp;&amp; git push &amp;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@if lsof -i :<span class=\"variable\">$(PORT)</span>; then kill -9 $<span class=\"variable\">$(lsof -t -i :<span class=\"variable\">$(PORT)</span>)</span>; fi</span><br><span class=\"line\">\t@nohup hexo g &amp;</span><br><span class=\"line\">\t@nohup hexo s &amp;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@sleep 2;</span><br><span class=\"line\">\t@open -a <span class=\"string\">&quot;/Applications/Safari.app&quot;</span> &#x27;http://localhost:<span class=\"variable\">$(PORT)</span>&#x27; &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>: live</span></span><br><span class=\"line\"><span class=\"section\">live:</span></span><br><span class=\"line\">\t@git add . &amp;&amp; git commit -m <span class=\"string\">&quot;commit by makefile&quot;</span> &amp;&amp; git push &amp;</span><br><span class=\"line\">\thexo clean</span><br><span class=\"line\">\thexo g -d</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">.DEFAULT_GOAL:= test</span></span><br></pre></td></tr></table></figure>\n\n<p>随后的效果就是，你在完成了博客编写的前两步，保存好你的博客。</p>\n<p>在控制台输入<code>make</code></p>\n<p>你会发现你的整个工程被push到托管仓库，并且本地新写的文章被生成好hexo工程，启动了本地预览。浏览器也自动跳出来博客的最新版本，你简单检查一下觉得满意。</p>\n<p>在控制台输入<code>make live</code></p>\n<p>你会发现你的整个工程被push到托管仓库，并且本地新写的文章被生成好hexo工程，博客也发布到github page上。</p>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><p>其实稍微看一下Makefile文件里的内容，发现也蛮好理解的，就算没有学过。如果需要修改，注意以下的细节：</p>\n<ol>\n<li>上面的代码<code>make</code>等价于<code>make test</code>，原因是最后一行的<code>.DEFAULT_GOAL:= test</code>，可以省略参数。</li>\n<li><code>@open -a &quot;/Applications/Safari.app&quot; &#39;http://localhost:$(PORT)&#39; &amp;</code>是macos适用的，默认打开Safari浏览器进行预览，Windows需自行探索，或去掉这一行。</li>\n</ol>\n<p>引用廖雪峰大佬的博客内容：<a href=\"https://liaoxuefeng.com/books/makefile/introduction/index.html\">https://liaoxuefeng.com/books/makefile/introduction/index.html</a></p>\n<blockquote>\n<p><code>Makefile</code>相当于Java项目的<code>pom.xml</code>，Node工程的<code>package.json</code>，Rust项目的<code>Cargo.toml</code>，不同之处在于，<code>make</code>虽然最初是针对C语言开发，但它实际上并不限定C语言，而是可以应用到任意项目，甚至不是编程语言。此外，<code>make</code>主要用于Unix&#x2F;Linux环境的自动化开发，掌握<code>Makefile</code>的写法，可以更好地在Linux环境下做开发，也可以为后续开发Linux内核做好准备。</p>\n</blockquote>\n","cover":false,"excerpt":"","more":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><blockquote>\n<p>本文旨在介绍一种技巧来简化使用hexo的一些步骤，使我们能专注于写文章的过程，提高效率。博主用的是macos，部分内容其他系统可能不适用，需要自行探索（doge）。</p>\n</blockquote>\n<p>首先我想介绍一个工具，叫makefile。什么是makefile？或许一些平时使用ide的程序员不太了解这个东西，因为它的主要能力——构建，已经融入了ide。在这篇博客里，我们只需要知道它可以将多行的命令打包成一句，然后执行。本文不会展开讲makefile的教学，只从当前的使用场景来讲讲我自己的用法和理解，抛砖引玉（大佬如有意见，可在文章底部留言）。</p>\n<p>展开学习makefile可参考：<a href=\"https://liaoxuefeng.com/books/makefile/makefile-basic/index.html\">https://liaoxuefeng.com/books/makefile/makefile-basic/index.html</a></p>\n<h2 id=\"使用前\"><a href=\"#使用前\" class=\"headerlink\" title=\"使用前\"></a>使用前</h2><p>正常来说，使用hexo写一篇博客，需要以下步骤：</p>\n<ol>\n<li><code>hexo new blog-title</code>开一篇新博客</li>\n<li>哼哧哼哧开始写</li>\n<li><code>hexo g</code>生成一下博客内容</li>\n<li><code>hexo s</code>并且打开浏览器，输入<code>http://localhost:4000</code>进行预览</li>\n<li><code>hexo d</code>发布</li>\n<li>（如有）除了发布hexo博客本身之外，hexo博客工程也要在github等远端上做备份，需要<code>git add, commit, push</code></li>\n</ol>\n<p><strong>现在我说，后面四步都可以一行指令解决，并且很简单。</strong></p>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><ul>\n<li><p>已经能使用上面提到的命令，正常使用hexo</p>\n</li>\n<li><p>为你本地的hexo博客工程也在代码托管平台（github等）创建一个仓库（建议为私有的），并能够git push</p>\n</li>\n<li><p>检查makefile环境：<code>make -v</code>，如果没有版本信息等，则需要安装，参考：</p>\n<ul>\n<li><p>Linux：<code>sudo apt install build-essential</code></p>\n</li>\n<li><p>Maxos：<code>brew install make gcc</code></p>\n</li>\n<li><p>Windows：参考 <a href=\"https://tehub.com/a/aCYp1uw0tG\">https://tehub.com/a/aCYp1uw0tG</a></p>\n<ul>\n<li><p>渠道1，从官网下载 make.exe Make for Windows</p>\n<p>官网首页：<a href=\"https://www.gnu.org/software/make/\">https://www.gnu.org/software/make/</a></p>\n<p>下载地址：<a href=\"https://gnuwin32.sourceforge.net/downlinks/make.php\">https://gnuwin32.sourceforge.net/downlinks/make.php</a></p>\n<p>完整安装后。把安装路径添加到环境变量 PATH 中.</p>\n</li>\n<li><p>渠道2，参考chocolaty官网安装chocolatey</p>\n<p><a href=\"https://community.chocolatey.org/packages/make\">https://community.chocolatey.org/packages/make</a></p>\n<p>管理员运行power shell</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&#x27;https://chocolatey.org/install.ps1&#x27;))</span><br></pre></td></tr></table></figure>\n\n<p>接着在power shell中键入如下命令安装make</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">choco install make</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>渠道3，安装mingw</p>\n<p>下载路径：<a href=\"https://sourceforge.net/projects/mingw\">https://sourceforge.net/projects/mingw</a></p>\n<p>里面有mingw32-make.exe，拷贝之后重命名为make.exe添加到环境变量PATH</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>在你的博客工程下新建一个<code>Makefile</code>的文件，为其添加以下内容：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PORT=4000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>: test</span></span><br><span class=\"line\"><span class=\"section\">test:</span></span><br><span class=\"line\">\t@git add . &amp;&amp; git commit -m <span class=\"string\">&quot;commit by makefile&quot;</span> &amp;&amp; git push &amp;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@if lsof -i :<span class=\"variable\">$(PORT)</span>; then kill -9 $<span class=\"variable\">$(lsof -t -i :<span class=\"variable\">$(PORT)</span>)</span>; fi</span><br><span class=\"line\">\t@nohup hexo g &amp;</span><br><span class=\"line\">\t@nohup hexo s &amp;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@sleep 2;</span><br><span class=\"line\">\t@open -a <span class=\"string\">&quot;/Applications/Safari.app&quot;</span> &#x27;http://localhost:<span class=\"variable\">$(PORT)</span>&#x27; &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>: live</span></span><br><span class=\"line\"><span class=\"section\">live:</span></span><br><span class=\"line\">\t@git add . &amp;&amp; git commit -m <span class=\"string\">&quot;commit by makefile&quot;</span> &amp;&amp; git push &amp;</span><br><span class=\"line\">\thexo clean</span><br><span class=\"line\">\thexo g -d</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">.DEFAULT_GOAL:= test</span></span><br></pre></td></tr></table></figure>\n\n<p>随后的效果就是，你在完成了博客编写的前两步，保存好你的博客。</p>\n<p>在控制台输入<code>make</code></p>\n<p>你会发现你的整个工程被push到托管仓库，并且本地新写的文章被生成好hexo工程，启动了本地预览。浏览器也自动跳出来博客的最新版本，你简单检查一下觉得满意。</p>\n<p>在控制台输入<code>make live</code></p>\n<p>你会发现你的整个工程被push到托管仓库，并且本地新写的文章被生成好hexo工程，博客也发布到github page上。</p>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><p>其实稍微看一下Makefile文件里的内容，发现也蛮好理解的，就算没有学过。如果需要修改，注意以下的细节：</p>\n<ol>\n<li>上面的代码<code>make</code>等价于<code>make test</code>，原因是最后一行的<code>.DEFAULT_GOAL:= test</code>，可以省略参数。</li>\n<li><code>@open -a &quot;/Applications/Safari.app&quot; &#39;http://localhost:$(PORT)&#39; &amp;</code>是macos适用的，默认打开Safari浏览器进行预览，Windows需自行探索，或去掉这一行。</li>\n</ol>\n<p>引用廖雪峰大佬的博客内容：<a href=\"https://liaoxuefeng.com/books/makefile/introduction/index.html\">https://liaoxuefeng.com/books/makefile/introduction/index.html</a></p>\n<blockquote>\n<p><code>Makefile</code>相当于Java项目的<code>pom.xml</code>，Node工程的<code>package.json</code>，Rust项目的<code>Cargo.toml</code>，不同之处在于，<code>make</code>虽然最初是针对C语言开发，但它实际上并不限定C语言，而是可以应用到任意项目，甚至不是编程语言。此外，<code>make</code>主要用于Unix&#x2F;Linux环境的自动化开发，掌握<code>Makefile</code>的写法，可以更好地在Linux环境下做开发，也可以为后续开发Linux内核做好准备。</p>\n</blockquote>\n"},{"title":"PlantUML绘制时序图","date":"2024-12-03T10:20:21.000Z","_content":"# PlantUML 绘制时序图\n\n时序图是什么？\n\n> 时序图（Sequence Diagram），又名序列图、循序图，是一种UML交互图。它通过描述对象之间发送消息的时间顺序显示多个对象之间的动态协作。它可以表示用例的行为顺序，当执行一个用例行为时，其中的每条消息对应一个类操作或状态机中引起转换的触发事件。\n\n## 基本用法\n\n用 `->` 来绘制参与者之间传递的消息，`-->` 表示虚线。\n各种箭头的写法：\n\n```shell\n@startuml\nBob ->x Alice\nBob -> Alice\nBob ->> Alice\nBob -\\ Alice\nBob \\\\- Alice\nBob //-- Alice\n\nBob ->o Alice\nBob o\\\\-- Alice\n\nBob <-> Alice\nBob <->o Alice\n@enduml\n```\n![2024-12-03-18-25-51.png](2024-12-03-18-25-51.png)\n\n关键字 `autonumber` 用于自动对消息编号\n\n```shell\n@startuml\nautonumber\nAlice -> Bob: Authentication Request\nBob --> Alice: Authentication Response\n\nAlice -> Bob: Another authentication Request\nAlice <-- Bob: Another authentication Response\n@enduml\n```\n![2024-12-03-18-26-46.png](2024-12-03-18-26-46.png)\n\n使用 `as` 关键字来重新命名参与者，你可以把它理解成定义变量一样, `as` 后面跟着的就是变量，声明后我们后面就可以使用这个变量了。\n使用 `order` 关键字来定制参与者的显示顺序，数字越小，越往前排。\n使用 `title` 关键字定义时序图的标题。\n参与者后加上冒号(`:`)，后面跟上当前连线上的说明。如果连线上的文本过长，可以使用 `\\n` 使长文本换行展示，不至于导致连线过长。\n\n```shell\n@startuml\ntitle 测试PlantUML绘图\nparticipant Last as L order 30\nparticipant Middle as M order 20\nparticipant First as F order 10\n\nF -> M: 开始到中间\nL <-- M: 中间到最后\n@enduml\n```\n![2024-12-03-18-31-43.png](2024-12-03-18-31-43.png)\n\n使用 `activate` 和 `deactivate` 表示参与者的生命线。比如上面例子，如果加上参与者的生命线，一旦参与者被激活，生命线就会被显示出来，会变成这个样子。\n`destroy` 表示一个参与者的生命线的终结。\n\n```\n@startuml\ntitle 测试PlantUML绘图\nparticipant Last as L order 30\nparticipant Middle as M order 20\nparticipant First as F order 10\n\nF -> M: 开始到中间\nactivate M\n\nL <-- M: 中间到最后\n\nactivate L\nL --> M: 中间到最后\ndestroy L\n\nM--> F: 中间到开始结束\ndeactivate M\n@enduml\n```\n![2024-12-03-18-36-06.png](2024-12-03-18-36-06.png)\n\n还可以使用嵌套的生命线，并且运行给生命线添加颜色。\n\n```\n@startuml\ntitle 测试PlantUML绘图\nparticipant Last as L order 30\nparticipant Middle as M order 20\nparticipant First as F order 10\n\nF -> M: 开始到中间\nactivate M #FFBBBB\n\nL <-- M: 中间到最后\nactivate M #DarkSalmon\n\nactivate L\nL --> M: 中间到最后\ndestroy L\n\nM--> F: 中间到开始结束\ndeactivate M\n@enduml\n```\n![2024-12-03-18-39-41.png](2024-12-03-18-39-41.png)\n\n上面例子可以看出，每次需要手写关键字激活，不是很方便，也可以使用自动激活关键字（`autoactivate`），这需要与 `return` 关键字配合：\n\n```\n@startuml\nautoactivate on\ntitle 测试PlantUML绘图\nparticipant Last as L order 30\nparticipant Middle as M order 20\nparticipant First as F order 10\n\nF -> M: 开始到中间\nM -> M: 中间到最后\nM --> L: 中间到最后\nreturn 开始到中间\nreturn 开始到中间\nreturn 开始到中间\n@enduml\n```\n\n注意，`return` 返回的点是导致最近一次激活生命线的点。\n\n\n\n\n\n## 声明参与者\n\n使用关键字 `participant` 可以来声明参与者，默认使用长方形表示参与者，参与者如果没有明确指定类型，默认是 `participant` 类型。\nPlantUML 还预制了一些默认参与者，其形状不同。\n`actor`（角色）\n`boundary`（边界）\n`control`（控制）\n`entity`（实体）\n`database`（数据库）\n`collections`（集合）\n`queue`（队列）\n\n```\n@startuml\nparticipant Participant as Foo\nactor       Actor       as Foo1\nboundary    Boundary    as Foo2\ncontrol     Control     as Foo3\nentity      Entity      as Foo4\ndatabase    Database    as Foo5\ncollections Collections as Foo6\nqueue       Queue       as Foo7\nFoo -> Foo1 : To actor\nFoo -> Foo2 : To boundary\nFoo -> Foo3 : To control\nFoo -> Foo4 : To entity\nFoo -> Foo5 : To database\nFoo -> Foo6 : To collections\nFoo -> Foo7: To queue\n@enduml\n```\n![2024-12-03-18-45-50.png](2024-12-03-18-45-50.png)\n\n## 分段以及分页\n\n使用 `==` 关键字将时序图分割为不同的逻辑部分，方便阅读查看。\n\n```\n@startuml\n== 初始化 ==\nAlice -> Bob: 你好，我是Alice，请问有什么可以帮助您？\nBob -> Alice: 您好，我是Bob，很高兴为您服务。\n\n== 商机分析 ==\nAlice -> Bob: 请问您有什么想法或建议吗？\nBob -> Alice: 您好，我有一些想法，但我想先征求您的意见。             \n@enduml\n```\n![2024-12-03-18-47-52.png](2024-12-03-18-47-52.png)\n\n关键词 `newpage` 可以将一张时序图分割成多张图，后面跟上标题表示当前页的标题，适用于长图分页打印的场景。\n\n```\n@startuml\n== 初始化 ==\nAlice -> Bob: 你好，我是Alice，请问有什么可以帮助您？\nBob -> Alice: 您好，我是Bob，很高兴为您服务。\n\nnewpage 第二页\n== 商机分析 ==\nAlice -> Bob: 请问您有什么想法或建议吗？\nBob -> Alice: 您好，我有一些想法，但我想先征求您的意见。\n@enduml\n```\n![2024-12-03-18-49-25.png](2024-12-03-18-49-25.png)\n![2024-12-03-18-48-51.png](2024-12-03-18-48-51.png)\n\n# 注释\n\n可以使用 `note left` 或 `note right` 关键字在信息后面加上注释。\n你可以使用 `end note` 关键字有一个多行注释。\n\n```\n@startuml\n== 初始化 ==\nAlice -> Bob: 你好，我是Alice，请问有什么可以帮助您？\nnote right of Alice: 请问您有什么想法或建议吗？\nBob -> Alice: 您好，我是Bob，很高兴为您服务。\nnote left of Bob: 您有什么想法或建议吗？\n\n\n== 商机分析 ==\nAlice -> Bob: 请问您有什么想法或建议吗？\nnote right: 您好，我有一些想法，但我想先征求您的意见。\nBob -> Alice: 您好，我有一些想法，但我想先征求您的意见。\nnote right\n这是多行的版本\n1\n2\n3\nend note\n@enduml\n```\n![2024-12-03-18-54-55.png](2024-12-03-18-54-55.png)\n\n可以使用 `note left of`，`note right of` 或 `note over` 在节点(`participant`)的相对位置放置注释。\n还可以通过修改背景色来高亮显示注释。\n\n```\n@startuml\n== 初始化 ==\nAlice -> Bob: 你好，我是Alice，请问有什么可以帮助您？\nnote right of Alice: 请问您有什么想法或建议吗？\nBob -> Alice: 您好，我是Bob，很高兴为您服务。\nnote left of Bob: 您有什么想法或建议吗？\n\n\n== 商机分析 ==\nAlice -> Bob: 请问您有什么想法或建议吗？\nnote over Alice, Bob #lightblue: 您好，我有一些想法，但我想先征求您的意见。\nBob -> Alice: 您好，我有一些想法，但我想先征求您的意见。\n@enduml\n```\n![2024-12-03-18-57-08.png](2024-12-03-18-57-08.png)","source":"_posts/PlantUML绘制时序图.md","raw":"---\ntitle: PlantUML绘制时序图\ndate: 2024-12-03 18:20:21\ntags:\n---\n# PlantUML 绘制时序图\n\n时序图是什么？\n\n> 时序图（Sequence Diagram），又名序列图、循序图，是一种UML交互图。它通过描述对象之间发送消息的时间顺序显示多个对象之间的动态协作。它可以表示用例的行为顺序，当执行一个用例行为时，其中的每条消息对应一个类操作或状态机中引起转换的触发事件。\n\n## 基本用法\n\n用 `->` 来绘制参与者之间传递的消息，`-->` 表示虚线。\n各种箭头的写法：\n\n```shell\n@startuml\nBob ->x Alice\nBob -> Alice\nBob ->> Alice\nBob -\\ Alice\nBob \\\\- Alice\nBob //-- Alice\n\nBob ->o Alice\nBob o\\\\-- Alice\n\nBob <-> Alice\nBob <->o Alice\n@enduml\n```\n![2024-12-03-18-25-51.png](2024-12-03-18-25-51.png)\n\n关键字 `autonumber` 用于自动对消息编号\n\n```shell\n@startuml\nautonumber\nAlice -> Bob: Authentication Request\nBob --> Alice: Authentication Response\n\nAlice -> Bob: Another authentication Request\nAlice <-- Bob: Another authentication Response\n@enduml\n```\n![2024-12-03-18-26-46.png](2024-12-03-18-26-46.png)\n\n使用 `as` 关键字来重新命名参与者，你可以把它理解成定义变量一样, `as` 后面跟着的就是变量，声明后我们后面就可以使用这个变量了。\n使用 `order` 关键字来定制参与者的显示顺序，数字越小，越往前排。\n使用 `title` 关键字定义时序图的标题。\n参与者后加上冒号(`:`)，后面跟上当前连线上的说明。如果连线上的文本过长，可以使用 `\\n` 使长文本换行展示，不至于导致连线过长。\n\n```shell\n@startuml\ntitle 测试PlantUML绘图\nparticipant Last as L order 30\nparticipant Middle as M order 20\nparticipant First as F order 10\n\nF -> M: 开始到中间\nL <-- M: 中间到最后\n@enduml\n```\n![2024-12-03-18-31-43.png](2024-12-03-18-31-43.png)\n\n使用 `activate` 和 `deactivate` 表示参与者的生命线。比如上面例子，如果加上参与者的生命线，一旦参与者被激活，生命线就会被显示出来，会变成这个样子。\n`destroy` 表示一个参与者的生命线的终结。\n\n```\n@startuml\ntitle 测试PlantUML绘图\nparticipant Last as L order 30\nparticipant Middle as M order 20\nparticipant First as F order 10\n\nF -> M: 开始到中间\nactivate M\n\nL <-- M: 中间到最后\n\nactivate L\nL --> M: 中间到最后\ndestroy L\n\nM--> F: 中间到开始结束\ndeactivate M\n@enduml\n```\n![2024-12-03-18-36-06.png](2024-12-03-18-36-06.png)\n\n还可以使用嵌套的生命线，并且运行给生命线添加颜色。\n\n```\n@startuml\ntitle 测试PlantUML绘图\nparticipant Last as L order 30\nparticipant Middle as M order 20\nparticipant First as F order 10\n\nF -> M: 开始到中间\nactivate M #FFBBBB\n\nL <-- M: 中间到最后\nactivate M #DarkSalmon\n\nactivate L\nL --> M: 中间到最后\ndestroy L\n\nM--> F: 中间到开始结束\ndeactivate M\n@enduml\n```\n![2024-12-03-18-39-41.png](2024-12-03-18-39-41.png)\n\n上面例子可以看出，每次需要手写关键字激活，不是很方便，也可以使用自动激活关键字（`autoactivate`），这需要与 `return` 关键字配合：\n\n```\n@startuml\nautoactivate on\ntitle 测试PlantUML绘图\nparticipant Last as L order 30\nparticipant Middle as M order 20\nparticipant First as F order 10\n\nF -> M: 开始到中间\nM -> M: 中间到最后\nM --> L: 中间到最后\nreturn 开始到中间\nreturn 开始到中间\nreturn 开始到中间\n@enduml\n```\n\n注意，`return` 返回的点是导致最近一次激活生命线的点。\n\n\n\n\n\n## 声明参与者\n\n使用关键字 `participant` 可以来声明参与者，默认使用长方形表示参与者，参与者如果没有明确指定类型，默认是 `participant` 类型。\nPlantUML 还预制了一些默认参与者，其形状不同。\n`actor`（角色）\n`boundary`（边界）\n`control`（控制）\n`entity`（实体）\n`database`（数据库）\n`collections`（集合）\n`queue`（队列）\n\n```\n@startuml\nparticipant Participant as Foo\nactor       Actor       as Foo1\nboundary    Boundary    as Foo2\ncontrol     Control     as Foo3\nentity      Entity      as Foo4\ndatabase    Database    as Foo5\ncollections Collections as Foo6\nqueue       Queue       as Foo7\nFoo -> Foo1 : To actor\nFoo -> Foo2 : To boundary\nFoo -> Foo3 : To control\nFoo -> Foo4 : To entity\nFoo -> Foo5 : To database\nFoo -> Foo6 : To collections\nFoo -> Foo7: To queue\n@enduml\n```\n![2024-12-03-18-45-50.png](2024-12-03-18-45-50.png)\n\n## 分段以及分页\n\n使用 `==` 关键字将时序图分割为不同的逻辑部分，方便阅读查看。\n\n```\n@startuml\n== 初始化 ==\nAlice -> Bob: 你好，我是Alice，请问有什么可以帮助您？\nBob -> Alice: 您好，我是Bob，很高兴为您服务。\n\n== 商机分析 ==\nAlice -> Bob: 请问您有什么想法或建议吗？\nBob -> Alice: 您好，我有一些想法，但我想先征求您的意见。             \n@enduml\n```\n![2024-12-03-18-47-52.png](2024-12-03-18-47-52.png)\n\n关键词 `newpage` 可以将一张时序图分割成多张图，后面跟上标题表示当前页的标题，适用于长图分页打印的场景。\n\n```\n@startuml\n== 初始化 ==\nAlice -> Bob: 你好，我是Alice，请问有什么可以帮助您？\nBob -> Alice: 您好，我是Bob，很高兴为您服务。\n\nnewpage 第二页\n== 商机分析 ==\nAlice -> Bob: 请问您有什么想法或建议吗？\nBob -> Alice: 您好，我有一些想法，但我想先征求您的意见。\n@enduml\n```\n![2024-12-03-18-49-25.png](2024-12-03-18-49-25.png)\n![2024-12-03-18-48-51.png](2024-12-03-18-48-51.png)\n\n# 注释\n\n可以使用 `note left` 或 `note right` 关键字在信息后面加上注释。\n你可以使用 `end note` 关键字有一个多行注释。\n\n```\n@startuml\n== 初始化 ==\nAlice -> Bob: 你好，我是Alice，请问有什么可以帮助您？\nnote right of Alice: 请问您有什么想法或建议吗？\nBob -> Alice: 您好，我是Bob，很高兴为您服务。\nnote left of Bob: 您有什么想法或建议吗？\n\n\n== 商机分析 ==\nAlice -> Bob: 请问您有什么想法或建议吗？\nnote right: 您好，我有一些想法，但我想先征求您的意见。\nBob -> Alice: 您好，我有一些想法，但我想先征求您的意见。\nnote right\n这是多行的版本\n1\n2\n3\nend note\n@enduml\n```\n![2024-12-03-18-54-55.png](2024-12-03-18-54-55.png)\n\n可以使用 `note left of`，`note right of` 或 `note over` 在节点(`participant`)的相对位置放置注释。\n还可以通过修改背景色来高亮显示注释。\n\n```\n@startuml\n== 初始化 ==\nAlice -> Bob: 你好，我是Alice，请问有什么可以帮助您？\nnote right of Alice: 请问您有什么想法或建议吗？\nBob -> Alice: 您好，我是Bob，很高兴为您服务。\nnote left of Bob: 您有什么想法或建议吗？\n\n\n== 商机分析 ==\nAlice -> Bob: 请问您有什么想法或建议吗？\nnote over Alice, Bob #lightblue: 您好，我有一些想法，但我想先征求您的意见。\nBob -> Alice: 您好，我有一些想法，但我想先征求您的意见。\n@enduml\n```\n![2024-12-03-18-57-08.png](2024-12-03-18-57-08.png)","slug":"PlantUML绘制时序图","published":1,"updated":"2024-12-03T10:57:10.330Z","comments":1,"layout":"post","photos":[],"_id":"cm4w2on6a0008stk8ck2990df","content":"<h1 id=\"PlantUML-绘制时序图\"><a href=\"#PlantUML-绘制时序图\" class=\"headerlink\" title=\"PlantUML 绘制时序图\"></a>PlantUML 绘制时序图</h1><p>时序图是什么？</p>\n<blockquote>\n<p>时序图（Sequence Diagram），又名序列图、循序图，是一种UML交互图。它通过描述对象之间发送消息的时间顺序显示多个对象之间的动态协作。它可以表示用例的行为顺序，当执行一个用例行为时，其中的每条消息对应一个类操作或状态机中引起转换的触发事件。</p>\n</blockquote>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><p>用 <code>-&gt;</code> 来绘制参与者之间传递的消息，<code>--&gt;</code> 表示虚线。<br>各种箭头的写法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\">Bob -&gt;x Alice</span><br><span class=\"line\">Bob -&gt; Alice</span><br><span class=\"line\">Bob -&gt;&gt; Alice</span><br><span class=\"line\">Bob -\\ Alice</span><br><span class=\"line\">Bob \\\\- Alice</span><br><span class=\"line\">Bob //-- Alice</span><br><span class=\"line\"></span><br><span class=\"line\">Bob -&gt;o Alice</span><br><span class=\"line\">Bob o\\\\-- Alice</span><br><span class=\"line\"></span><br><span class=\"line\">Bob &lt;-&gt; Alice</span><br><span class=\"line\">Bob &lt;-&gt;o Alice</span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2024/12/03/PlantUML%E7%BB%98%E5%88%B6%E6%97%B6%E5%BA%8F%E5%9B%BE/2024-12-03-18-25-51.png\" alt=\"2024-12-03-18-25-51.png\"></p>\n<p>关键字 <code>autonumber</code> 用于自动对消息编号</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\">autonumber</span><br><span class=\"line\">Alice -&gt; Bob: Authentication Request</span><br><span class=\"line\">Bob --&gt; Alice: Authentication Response</span><br><span class=\"line\"></span><br><span class=\"line\">Alice -&gt; Bob: Another authentication Request</span><br><span class=\"line\">Alice &lt;-- Bob: Another authentication Response</span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2024/12/03/PlantUML%E7%BB%98%E5%88%B6%E6%97%B6%E5%BA%8F%E5%9B%BE/2024-12-03-18-26-46.png\" alt=\"2024-12-03-18-26-46.png\"></p>\n<p>使用 <code>as</code> 关键字来重新命名参与者，你可以把它理解成定义变量一样, <code>as</code> 后面跟着的就是变量，声明后我们后面就可以使用这个变量了。<br>使用 <code>order</code> 关键字来定制参与者的显示顺序，数字越小，越往前排。<br>使用 <code>title</code> 关键字定义时序图的标题。<br>参与者后加上冒号(<code>:</code>)，后面跟上当前连线上的说明。如果连线上的文本过长，可以使用 <code>\\n</code> 使长文本换行展示，不至于导致连线过长。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\">title 测试PlantUML绘图</span><br><span class=\"line\">participant Last as L order 30</span><br><span class=\"line\">participant Middle as M order 20</span><br><span class=\"line\">participant First as F order 10</span><br><span class=\"line\"></span><br><span class=\"line\">F -&gt; M: 开始到中间</span><br><span class=\"line\">L &lt;-- M: 中间到最后</span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2024/12/03/PlantUML%E7%BB%98%E5%88%B6%E6%97%B6%E5%BA%8F%E5%9B%BE/2024-12-03-18-31-43.png\" alt=\"2024-12-03-18-31-43.png\"></p>\n<p>使用 <code>activate</code> 和 <code>deactivate</code> 表示参与者的生命线。比如上面例子，如果加上参与者的生命线，一旦参与者被激活，生命线就会被显示出来，会变成这个样子。<br><code>destroy</code> 表示一个参与者的生命线的终结。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\">title 测试PlantUML绘图</span><br><span class=\"line\">participant Last as L order 30</span><br><span class=\"line\">participant Middle as M order 20</span><br><span class=\"line\">participant First as F order 10</span><br><span class=\"line\"></span><br><span class=\"line\">F -&gt; M: 开始到中间</span><br><span class=\"line\">activate M</span><br><span class=\"line\"></span><br><span class=\"line\">L &lt;-- M: 中间到最后</span><br><span class=\"line\"></span><br><span class=\"line\">activate L</span><br><span class=\"line\">L --&gt; M: 中间到最后</span><br><span class=\"line\">destroy L</span><br><span class=\"line\"></span><br><span class=\"line\">M--&gt; F: 中间到开始结束</span><br><span class=\"line\">deactivate M</span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2024/12/03/PlantUML%E7%BB%98%E5%88%B6%E6%97%B6%E5%BA%8F%E5%9B%BE/2024-12-03-18-36-06.png\" alt=\"2024-12-03-18-36-06.png\"></p>\n<p>还可以使用嵌套的生命线，并且运行给生命线添加颜色。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\">title 测试PlantUML绘图</span><br><span class=\"line\">participant Last as L order 30</span><br><span class=\"line\">participant Middle as M order 20</span><br><span class=\"line\">participant First as F order 10</span><br><span class=\"line\"></span><br><span class=\"line\">F -&gt; M: 开始到中间</span><br><span class=\"line\">activate M #FFBBBB</span><br><span class=\"line\"></span><br><span class=\"line\">L &lt;-- M: 中间到最后</span><br><span class=\"line\">activate M #DarkSalmon</span><br><span class=\"line\"></span><br><span class=\"line\">activate L</span><br><span class=\"line\">L --&gt; M: 中间到最后</span><br><span class=\"line\">destroy L</span><br><span class=\"line\"></span><br><span class=\"line\">M--&gt; F: 中间到开始结束</span><br><span class=\"line\">deactivate M</span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2024/12/03/PlantUML%E7%BB%98%E5%88%B6%E6%97%B6%E5%BA%8F%E5%9B%BE/2024-12-03-18-39-41.png\" alt=\"2024-12-03-18-39-41.png\"></p>\n<p>上面例子可以看出，每次需要手写关键字激活，不是很方便，也可以使用自动激活关键字（<code>autoactivate</code>），这需要与 <code>return</code> 关键字配合：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\">autoactivate on</span><br><span class=\"line\">title 测试PlantUML绘图</span><br><span class=\"line\">participant Last as L order 30</span><br><span class=\"line\">participant Middle as M order 20</span><br><span class=\"line\">participant First as F order 10</span><br><span class=\"line\"></span><br><span class=\"line\">F -&gt; M: 开始到中间</span><br><span class=\"line\">M -&gt; M: 中间到最后</span><br><span class=\"line\">M --&gt; L: 中间到最后</span><br><span class=\"line\">return 开始到中间</span><br><span class=\"line\">return 开始到中间</span><br><span class=\"line\">return 开始到中间</span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n\n<p>注意，<code>return</code> 返回的点是导致最近一次激活生命线的点。</p>\n<h2 id=\"声明参与者\"><a href=\"#声明参与者\" class=\"headerlink\" title=\"声明参与者\"></a>声明参与者</h2><p>使用关键字 <code>participant</code> 可以来声明参与者，默认使用长方形表示参与者，参与者如果没有明确指定类型，默认是 <code>participant</code> 类型。<br>PlantUML 还预制了一些默认参与者，其形状不同。<br><code>actor</code>（角色）<br><code>boundary</code>（边界）<br><code>control</code>（控制）<br><code>entity</code>（实体）<br><code>database</code>（数据库）<br><code>collections</code>（集合）<br><code>queue</code>（队列）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\">participant Participant as Foo</span><br><span class=\"line\">actor       Actor       as Foo1</span><br><span class=\"line\">boundary    Boundary    as Foo2</span><br><span class=\"line\">control     Control     as Foo3</span><br><span class=\"line\">entity      Entity      as Foo4</span><br><span class=\"line\">database    Database    as Foo5</span><br><span class=\"line\">collections Collections as Foo6</span><br><span class=\"line\">queue       Queue       as Foo7</span><br><span class=\"line\">Foo -&gt; Foo1 : To actor</span><br><span class=\"line\">Foo -&gt; Foo2 : To boundary</span><br><span class=\"line\">Foo -&gt; Foo3 : To control</span><br><span class=\"line\">Foo -&gt; Foo4 : To entity</span><br><span class=\"line\">Foo -&gt; Foo5 : To database</span><br><span class=\"line\">Foo -&gt; Foo6 : To collections</span><br><span class=\"line\">Foo -&gt; Foo7: To queue</span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2024/12/03/PlantUML%E7%BB%98%E5%88%B6%E6%97%B6%E5%BA%8F%E5%9B%BE/2024-12-03-18-45-50.png\" alt=\"2024-12-03-18-45-50.png\"></p>\n<h2 id=\"分段以及分页\"><a href=\"#分段以及分页\" class=\"headerlink\" title=\"分段以及分页\"></a>分段以及分页</h2><p>使用 <code>==</code> 关键字将时序图分割为不同的逻辑部分，方便阅读查看。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\">== 初始化 ==</span><br><span class=\"line\">Alice -&gt; Bob: 你好，我是Alice，请问有什么可以帮助您？</span><br><span class=\"line\">Bob -&gt; Alice: 您好，我是Bob，很高兴为您服务。</span><br><span class=\"line\"></span><br><span class=\"line\">== 商机分析 ==</span><br><span class=\"line\">Alice -&gt; Bob: 请问您有什么想法或建议吗？</span><br><span class=\"line\">Bob -&gt; Alice: 您好，我有一些想法，但我想先征求您的意见。             </span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2024/12/03/PlantUML%E7%BB%98%E5%88%B6%E6%97%B6%E5%BA%8F%E5%9B%BE/2024-12-03-18-47-52.png\" alt=\"2024-12-03-18-47-52.png\"></p>\n<p>关键词 <code>newpage</code> 可以将一张时序图分割成多张图，后面跟上标题表示当前页的标题，适用于长图分页打印的场景。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\">== 初始化 ==</span><br><span class=\"line\">Alice -&gt; Bob: 你好，我是Alice，请问有什么可以帮助您？</span><br><span class=\"line\">Bob -&gt; Alice: 您好，我是Bob，很高兴为您服务。</span><br><span class=\"line\"></span><br><span class=\"line\">newpage 第二页</span><br><span class=\"line\">== 商机分析 ==</span><br><span class=\"line\">Alice -&gt; Bob: 请问您有什么想法或建议吗？</span><br><span class=\"line\">Bob -&gt; Alice: 您好，我有一些想法，但我想先征求您的意见。</span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2024/12/03/PlantUML%E7%BB%98%E5%88%B6%E6%97%B6%E5%BA%8F%E5%9B%BE/2024-12-03-18-49-25.png\" alt=\"2024-12-03-18-49-25.png\"><br><img src=\"/2024/12/03/PlantUML%E7%BB%98%E5%88%B6%E6%97%B6%E5%BA%8F%E5%9B%BE/2024-12-03-18-48-51.png\" alt=\"2024-12-03-18-48-51.png\"></p>\n<h1 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h1><p>可以使用 <code>note left</code> 或 <code>note right</code> 关键字在信息后面加上注释。<br>你可以使用 <code>end note</code> 关键字有一个多行注释。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\">== 初始化 ==</span><br><span class=\"line\">Alice -&gt; Bob: 你好，我是Alice，请问有什么可以帮助您？</span><br><span class=\"line\">note right of Alice: 请问您有什么想法或建议吗？</span><br><span class=\"line\">Bob -&gt; Alice: 您好，我是Bob，很高兴为您服务。</span><br><span class=\"line\">note left of Bob: 您有什么想法或建议吗？</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">== 商机分析 ==</span><br><span class=\"line\">Alice -&gt; Bob: 请问您有什么想法或建议吗？</span><br><span class=\"line\">note right: 您好，我有一些想法，但我想先征求您的意见。</span><br><span class=\"line\">Bob -&gt; Alice: 您好，我有一些想法，但我想先征求您的意见。</span><br><span class=\"line\">note right</span><br><span class=\"line\">这是多行的版本</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">end note</span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2024/12/03/PlantUML%E7%BB%98%E5%88%B6%E6%97%B6%E5%BA%8F%E5%9B%BE/2024-12-03-18-54-55.png\" alt=\"2024-12-03-18-54-55.png\"></p>\n<p>可以使用 <code>note left of</code>，<code>note right of</code> 或 <code>note over</code> 在节点(<code>participant</code>)的相对位置放置注释。<br>还可以通过修改背景色来高亮显示注释。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\">== 初始化 ==</span><br><span class=\"line\">Alice -&gt; Bob: 你好，我是Alice，请问有什么可以帮助您？</span><br><span class=\"line\">note right of Alice: 请问您有什么想法或建议吗？</span><br><span class=\"line\">Bob -&gt; Alice: 您好，我是Bob，很高兴为您服务。</span><br><span class=\"line\">note left of Bob: 您有什么想法或建议吗？</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">== 商机分析 ==</span><br><span class=\"line\">Alice -&gt; Bob: 请问您有什么想法或建议吗？</span><br><span class=\"line\">note over Alice, Bob #lightblue: 您好，我有一些想法，但我想先征求您的意见。</span><br><span class=\"line\">Bob -&gt; Alice: 您好，我有一些想法，但我想先征求您的意见。</span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2024/12/03/PlantUML%E7%BB%98%E5%88%B6%E6%97%B6%E5%BA%8F%E5%9B%BE/2024-12-03-18-57-08.png\" alt=\"2024-12-03-18-57-08.png\"></p>\n","cover":false,"excerpt":"","more":"<h1 id=\"PlantUML-绘制时序图\"><a href=\"#PlantUML-绘制时序图\" class=\"headerlink\" title=\"PlantUML 绘制时序图\"></a>PlantUML 绘制时序图</h1><p>时序图是什么？</p>\n<blockquote>\n<p>时序图（Sequence Diagram），又名序列图、循序图，是一种UML交互图。它通过描述对象之间发送消息的时间顺序显示多个对象之间的动态协作。它可以表示用例的行为顺序，当执行一个用例行为时，其中的每条消息对应一个类操作或状态机中引起转换的触发事件。</p>\n</blockquote>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><p>用 <code>-&gt;</code> 来绘制参与者之间传递的消息，<code>--&gt;</code> 表示虚线。<br>各种箭头的写法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\">Bob -&gt;x Alice</span><br><span class=\"line\">Bob -&gt; Alice</span><br><span class=\"line\">Bob -&gt;&gt; Alice</span><br><span class=\"line\">Bob -\\ Alice</span><br><span class=\"line\">Bob \\\\- Alice</span><br><span class=\"line\">Bob //-- Alice</span><br><span class=\"line\"></span><br><span class=\"line\">Bob -&gt;o Alice</span><br><span class=\"line\">Bob o\\\\-- Alice</span><br><span class=\"line\"></span><br><span class=\"line\">Bob &lt;-&gt; Alice</span><br><span class=\"line\">Bob &lt;-&gt;o Alice</span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2024/12/03/PlantUML%E7%BB%98%E5%88%B6%E6%97%B6%E5%BA%8F%E5%9B%BE/2024-12-03-18-25-51.png\" alt=\"2024-12-03-18-25-51.png\"></p>\n<p>关键字 <code>autonumber</code> 用于自动对消息编号</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\">autonumber</span><br><span class=\"line\">Alice -&gt; Bob: Authentication Request</span><br><span class=\"line\">Bob --&gt; Alice: Authentication Response</span><br><span class=\"line\"></span><br><span class=\"line\">Alice -&gt; Bob: Another authentication Request</span><br><span class=\"line\">Alice &lt;-- Bob: Another authentication Response</span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2024/12/03/PlantUML%E7%BB%98%E5%88%B6%E6%97%B6%E5%BA%8F%E5%9B%BE/2024-12-03-18-26-46.png\" alt=\"2024-12-03-18-26-46.png\"></p>\n<p>使用 <code>as</code> 关键字来重新命名参与者，你可以把它理解成定义变量一样, <code>as</code> 后面跟着的就是变量，声明后我们后面就可以使用这个变量了。<br>使用 <code>order</code> 关键字来定制参与者的显示顺序，数字越小，越往前排。<br>使用 <code>title</code> 关键字定义时序图的标题。<br>参与者后加上冒号(<code>:</code>)，后面跟上当前连线上的说明。如果连线上的文本过长，可以使用 <code>\\n</code> 使长文本换行展示，不至于导致连线过长。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\">title 测试PlantUML绘图</span><br><span class=\"line\">participant Last as L order 30</span><br><span class=\"line\">participant Middle as M order 20</span><br><span class=\"line\">participant First as F order 10</span><br><span class=\"line\"></span><br><span class=\"line\">F -&gt; M: 开始到中间</span><br><span class=\"line\">L &lt;-- M: 中间到最后</span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2024/12/03/PlantUML%E7%BB%98%E5%88%B6%E6%97%B6%E5%BA%8F%E5%9B%BE/2024-12-03-18-31-43.png\" alt=\"2024-12-03-18-31-43.png\"></p>\n<p>使用 <code>activate</code> 和 <code>deactivate</code> 表示参与者的生命线。比如上面例子，如果加上参与者的生命线，一旦参与者被激活，生命线就会被显示出来，会变成这个样子。<br><code>destroy</code> 表示一个参与者的生命线的终结。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\">title 测试PlantUML绘图</span><br><span class=\"line\">participant Last as L order 30</span><br><span class=\"line\">participant Middle as M order 20</span><br><span class=\"line\">participant First as F order 10</span><br><span class=\"line\"></span><br><span class=\"line\">F -&gt; M: 开始到中间</span><br><span class=\"line\">activate M</span><br><span class=\"line\"></span><br><span class=\"line\">L &lt;-- M: 中间到最后</span><br><span class=\"line\"></span><br><span class=\"line\">activate L</span><br><span class=\"line\">L --&gt; M: 中间到最后</span><br><span class=\"line\">destroy L</span><br><span class=\"line\"></span><br><span class=\"line\">M--&gt; F: 中间到开始结束</span><br><span class=\"line\">deactivate M</span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2024/12/03/PlantUML%E7%BB%98%E5%88%B6%E6%97%B6%E5%BA%8F%E5%9B%BE/2024-12-03-18-36-06.png\" alt=\"2024-12-03-18-36-06.png\"></p>\n<p>还可以使用嵌套的生命线，并且运行给生命线添加颜色。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\">title 测试PlantUML绘图</span><br><span class=\"line\">participant Last as L order 30</span><br><span class=\"line\">participant Middle as M order 20</span><br><span class=\"line\">participant First as F order 10</span><br><span class=\"line\"></span><br><span class=\"line\">F -&gt; M: 开始到中间</span><br><span class=\"line\">activate M #FFBBBB</span><br><span class=\"line\"></span><br><span class=\"line\">L &lt;-- M: 中间到最后</span><br><span class=\"line\">activate M #DarkSalmon</span><br><span class=\"line\"></span><br><span class=\"line\">activate L</span><br><span class=\"line\">L --&gt; M: 中间到最后</span><br><span class=\"line\">destroy L</span><br><span class=\"line\"></span><br><span class=\"line\">M--&gt; F: 中间到开始结束</span><br><span class=\"line\">deactivate M</span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2024/12/03/PlantUML%E7%BB%98%E5%88%B6%E6%97%B6%E5%BA%8F%E5%9B%BE/2024-12-03-18-39-41.png\" alt=\"2024-12-03-18-39-41.png\"></p>\n<p>上面例子可以看出，每次需要手写关键字激活，不是很方便，也可以使用自动激活关键字（<code>autoactivate</code>），这需要与 <code>return</code> 关键字配合：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\">autoactivate on</span><br><span class=\"line\">title 测试PlantUML绘图</span><br><span class=\"line\">participant Last as L order 30</span><br><span class=\"line\">participant Middle as M order 20</span><br><span class=\"line\">participant First as F order 10</span><br><span class=\"line\"></span><br><span class=\"line\">F -&gt; M: 开始到中间</span><br><span class=\"line\">M -&gt; M: 中间到最后</span><br><span class=\"line\">M --&gt; L: 中间到最后</span><br><span class=\"line\">return 开始到中间</span><br><span class=\"line\">return 开始到中间</span><br><span class=\"line\">return 开始到中间</span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n\n<p>注意，<code>return</code> 返回的点是导致最近一次激活生命线的点。</p>\n<h2 id=\"声明参与者\"><a href=\"#声明参与者\" class=\"headerlink\" title=\"声明参与者\"></a>声明参与者</h2><p>使用关键字 <code>participant</code> 可以来声明参与者，默认使用长方形表示参与者，参与者如果没有明确指定类型，默认是 <code>participant</code> 类型。<br>PlantUML 还预制了一些默认参与者，其形状不同。<br><code>actor</code>（角色）<br><code>boundary</code>（边界）<br><code>control</code>（控制）<br><code>entity</code>（实体）<br><code>database</code>（数据库）<br><code>collections</code>（集合）<br><code>queue</code>（队列）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\">participant Participant as Foo</span><br><span class=\"line\">actor       Actor       as Foo1</span><br><span class=\"line\">boundary    Boundary    as Foo2</span><br><span class=\"line\">control     Control     as Foo3</span><br><span class=\"line\">entity      Entity      as Foo4</span><br><span class=\"line\">database    Database    as Foo5</span><br><span class=\"line\">collections Collections as Foo6</span><br><span class=\"line\">queue       Queue       as Foo7</span><br><span class=\"line\">Foo -&gt; Foo1 : To actor</span><br><span class=\"line\">Foo -&gt; Foo2 : To boundary</span><br><span class=\"line\">Foo -&gt; Foo3 : To control</span><br><span class=\"line\">Foo -&gt; Foo4 : To entity</span><br><span class=\"line\">Foo -&gt; Foo5 : To database</span><br><span class=\"line\">Foo -&gt; Foo6 : To collections</span><br><span class=\"line\">Foo -&gt; Foo7: To queue</span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2024/12/03/PlantUML%E7%BB%98%E5%88%B6%E6%97%B6%E5%BA%8F%E5%9B%BE/2024-12-03-18-45-50.png\" alt=\"2024-12-03-18-45-50.png\"></p>\n<h2 id=\"分段以及分页\"><a href=\"#分段以及分页\" class=\"headerlink\" title=\"分段以及分页\"></a>分段以及分页</h2><p>使用 <code>==</code> 关键字将时序图分割为不同的逻辑部分，方便阅读查看。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\">== 初始化 ==</span><br><span class=\"line\">Alice -&gt; Bob: 你好，我是Alice，请问有什么可以帮助您？</span><br><span class=\"line\">Bob -&gt; Alice: 您好，我是Bob，很高兴为您服务。</span><br><span class=\"line\"></span><br><span class=\"line\">== 商机分析 ==</span><br><span class=\"line\">Alice -&gt; Bob: 请问您有什么想法或建议吗？</span><br><span class=\"line\">Bob -&gt; Alice: 您好，我有一些想法，但我想先征求您的意见。             </span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2024/12/03/PlantUML%E7%BB%98%E5%88%B6%E6%97%B6%E5%BA%8F%E5%9B%BE/2024-12-03-18-47-52.png\" alt=\"2024-12-03-18-47-52.png\"></p>\n<p>关键词 <code>newpage</code> 可以将一张时序图分割成多张图，后面跟上标题表示当前页的标题，适用于长图分页打印的场景。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\">== 初始化 ==</span><br><span class=\"line\">Alice -&gt; Bob: 你好，我是Alice，请问有什么可以帮助您？</span><br><span class=\"line\">Bob -&gt; Alice: 您好，我是Bob，很高兴为您服务。</span><br><span class=\"line\"></span><br><span class=\"line\">newpage 第二页</span><br><span class=\"line\">== 商机分析 ==</span><br><span class=\"line\">Alice -&gt; Bob: 请问您有什么想法或建议吗？</span><br><span class=\"line\">Bob -&gt; Alice: 您好，我有一些想法，但我想先征求您的意见。</span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2024/12/03/PlantUML%E7%BB%98%E5%88%B6%E6%97%B6%E5%BA%8F%E5%9B%BE/2024-12-03-18-49-25.png\" alt=\"2024-12-03-18-49-25.png\"><br><img src=\"/2024/12/03/PlantUML%E7%BB%98%E5%88%B6%E6%97%B6%E5%BA%8F%E5%9B%BE/2024-12-03-18-48-51.png\" alt=\"2024-12-03-18-48-51.png\"></p>\n<h1 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h1><p>可以使用 <code>note left</code> 或 <code>note right</code> 关键字在信息后面加上注释。<br>你可以使用 <code>end note</code> 关键字有一个多行注释。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\">== 初始化 ==</span><br><span class=\"line\">Alice -&gt; Bob: 你好，我是Alice，请问有什么可以帮助您？</span><br><span class=\"line\">note right of Alice: 请问您有什么想法或建议吗？</span><br><span class=\"line\">Bob -&gt; Alice: 您好，我是Bob，很高兴为您服务。</span><br><span class=\"line\">note left of Bob: 您有什么想法或建议吗？</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">== 商机分析 ==</span><br><span class=\"line\">Alice -&gt; Bob: 请问您有什么想法或建议吗？</span><br><span class=\"line\">note right: 您好，我有一些想法，但我想先征求您的意见。</span><br><span class=\"line\">Bob -&gt; Alice: 您好，我有一些想法，但我想先征求您的意见。</span><br><span class=\"line\">note right</span><br><span class=\"line\">这是多行的版本</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">end note</span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2024/12/03/PlantUML%E7%BB%98%E5%88%B6%E6%97%B6%E5%BA%8F%E5%9B%BE/2024-12-03-18-54-55.png\" alt=\"2024-12-03-18-54-55.png\"></p>\n<p>可以使用 <code>note left of</code>，<code>note right of</code> 或 <code>note over</code> 在节点(<code>participant</code>)的相对位置放置注释。<br>还可以通过修改背景色来高亮显示注释。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\">== 初始化 ==</span><br><span class=\"line\">Alice -&gt; Bob: 你好，我是Alice，请问有什么可以帮助您？</span><br><span class=\"line\">note right of Alice: 请问您有什么想法或建议吗？</span><br><span class=\"line\">Bob -&gt; Alice: 您好，我是Bob，很高兴为您服务。</span><br><span class=\"line\">note left of Bob: 您有什么想法或建议吗？</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">== 商机分析 ==</span><br><span class=\"line\">Alice -&gt; Bob: 请问您有什么想法或建议吗？</span><br><span class=\"line\">note over Alice, Bob #lightblue: 您好，我有一些想法，但我想先征求您的意见。</span><br><span class=\"line\">Bob -&gt; Alice: 您好，我有一些想法，但我想先征求您的意见。</span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2024/12/03/PlantUML%E7%BB%98%E5%88%B6%E6%97%B6%E5%BA%8F%E5%9B%BE/2024-12-03-18-57-08.png\" alt=\"2024-12-03-18-57-08.png\"></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2024-11-05T06:06:07.938Z","updated":"2024-11-21T10:54:35.075Z","comments":1,"layout":"post","photos":[],"_id":"cm4w2on6b0009stk8akkf2pdg","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","cover":false,"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"程序员阅读清单：我喜欢的 100 篇技术文章","date":"2025-04-15T04:06:37.000Z","_content":"\n> 转自https://www.piglei.com/articles/programmer-reading-list-1 ,仅用于个人记录、学习，以下为原文：\n\n程序员们也许是互联网上最爱分享的群体之一，他们不仅喜欢开源自己写的软件，也爱通过写文章来分享知识。从业以来，我阅读过大量技术文章，其中不乏一些佳作。这些佳作中，有些凭借深刻的技术洞见令我深受启发，也有些以庖丁解牛般的精湛手法解释一项技术，让我读后大呼过瘾。\n\n作为“爱分享”的程序员中的一份子，我想当一次推荐人，将读过的好文章分享给大家。我给这个系列起名为《程序员阅读清单：我喜欢的 100 篇技术文章》。\n\n受限于本人的专业与兴趣所在，清单中的文章对以下几个领域有所偏重：程序员通识、软件工程、后端开发、技术写作、Python 语言、Go 语言。\n\n1. 《开发者应学习的 10 件有关“学习”的事》\n\n   原文链接：[10 Things Software Developers Should Learn about Learning](https://cacm.acm.org/research/10-things-software-developers-should-learn-about-learning/)\n   作者：Neil C.C. Brown, Felienne F. J. Hermans, and Lauren E. Margulieux\n   学习对于任何一个人都很重要，对于软件开发者来说更是如此。这是一篇有关“学习”的科普类文章，从介绍人类记忆的工作原理开始，引出专家与新手的区别、间隔与重复的重要性等主题。\n\n   文章中的一些观点相当具有启发性。比如“抽象和具象”：新知识对于初学者来说先是抽象的，然后通过大量例子将其具象化，最终彻底掌握后又重新变回抽象。又比如：做智力题和编程能力并没有关联性——这和我们认知中的“聪明人更会编程”大不相同。\n\n2. 《开发者如何管理自驱力》\n\n   原文链接：[Managing My Motivation, as a Solo Dev](https://mbuffett.com/posts/maintaining-motivation/)\n   作者：Marcus Buffett\n   作者是一名单兵作战的开发者，分享在管理自驱力方面的心得。文章提供了许多提高自驱力的切实可行的小点子，比如：\n\n   开发一个通知机器人，当自己的软件有新订阅时通知自己——外力驱动；\n   每天的开发任务做到 90% 后停止，留到第二天完成——让新一天有盼头；\n   为了避免自己被“今日一事无成”的罪恶感击溃，先干点高产出的正事，再做其他。\n\n3. 《用 Go 语言分析 10 亿行数据，从 95 秒到 1.96 秒》\n\n   原文链接：[One Billion Row Challenge in Golang - From 95s to 1.96s](https://r2p.dev/b/2024-03-18-1brc-go/)\n   作者：Renato Pereira\n   一篇很不错的 Go 语言性能优化文章，涉及到这些知识点：文件读取性能优化、生产者消费者模型优化、channel 对比 mutex、自定义 hash 算法，等等。\n\n   作者的思维模式、用到的工具链及优化手法非常规范，整个调优过程层层递进，文章行文也很工整。非常值得一读。\n\n4. 《在开发高质量软件上的花费值得吗？》\n\n   原文链接：[Is High Quality Software Worth the Cost?](https://martinfowler.com/articles/is-quality-worth-cost.html)\n   作者：Martin Fowler\n   对于大多数事物而言，如果想要追求更高的质量，必然要花费更多的成本，但对软件而言是否也是如此？作者 Martin Fowler 将软件质量分为两类：外在与内在。\n\n   由于软件的内在质量很难被外人所感知，因此花在改善内在质量上的成本常被质疑。但实际上，在内在质量上投入并不增加成本，反而能降低整体花费。文章会通过详细的分析与对比告诉你为什么。\n\n5. 《错误抽象》\n\n原文链接：[The Wrong Abstraction](https://sandimetz.com/blog/2016/1/20/the-wrong-abstraction)\n作者：Sandi Metz\n如果你想要建造一栋楼房，假如地基不正，最终只能收获一栋歪歪扭扭的残次品。对编程而言，抽象便是地基，良好的抽象是一切美好事物的前提。\n\n这篇文章探讨了复用与抽象间的关系，作者犀利地指出一个事实：对“沉没成本”的恐惧常常孕育出错误抽象，而后者将引发项目质量恶化。\n\n一篇短小精悍的经典之作，不容错过。\n\n6. 《谷歌技术写作课：编写有帮助的错误信息》\n\n原文链接：[Writing Helpful Error Messages](https://developers.google.com/tech-writing/error-messages)\n作者：谷歌工程团队\n在软件开发中，错误信息是一种极为微妙的存在，糟糕的错误信息使人沮丧，时刻提醒着我们：“魔鬼藏在细节中”。\n\n对此，谷歌团队提供了一份关于错误信息的写作建议，包含：精确描述、提供解决方案、面向目标读者写作、用正确的语气写作，等等。我认为这应该成为每位程序员的必修课。\n\n7. 《深入 Python 字典——一份“可探索”的解释》\n\n原文链接：[Inside python dict — an explorable explanation](https://just-taking-a-ride.com/inside_python_dict/chapter1.html)\n作者：Alexander Putilin\n毫不夸张的说，网上介绍 Python 字典原理的文章多到泛滥。但这篇比较特别，它的特别主要体现在标题里的“可探索”上。\n\n在文章中，作者用一些 Python 代码模拟了字典数据类型。这些代码可在页面上点击执行，过程完全可视化。比如当字典中出现哈希冲突时，会有非常细致的动画，看起来妙趣横生。\n\n8. 《愿意让自己显得愚蠢》\n\n原文链接：[Willingness to look stupid](https://danluu.com/look-stupid/)\n作者：Dan Luu\n人们天生在意他人的看法，每个人都希望自己是别人眼里的“聪明人”，而不是“傻瓜”。不过，本文作者分享了一个不太常见的观点：做一些让自己显得愚蠢的事，利远大于弊。 比方说：提出愚蠢问题往往能获得对事物更深入的理解；用别人眼中的蠢办法学习，效果更好。\n\n9. 《我们为什么坚持使用 Ruby on Rails》\n\n原文链接：[Why we're sticking with Ruby on Rails](https://about.gitlab.com/blog/2022/07/06/why-were-sticking-with-ruby-on-rails/)\n作者：Sid Sijbrandij\n著名的开源软件 GitLab 的大部分代码都在一个 Rails 单体项目里。GitLab 采用“模块化单体”架构，并未使用近年颇为流行的微服务架构。作者在文章中解释了 GitLab 这么做的原因：微服务架构徒增偶然复杂度，却对降低本质复杂度帮助不大。\n\n我很认同文章中的一句话：架构该为需求服务，而不是反过来。\n\n10. 《ChatGPT 是互联网的一张模糊的 JPEG 图》\n\n原文链接：[ChatGPT Is a Blurry JPEG of the Web](https://readwise.io/reader/shared/01gry4pcabx8kh4k1pkpf2e2pe/)\n作者：Ted Chiang\n这篇文章发表于大语言模型爆发前夜：GPT-3.5 已经问世，GPT-4 蓄势待发。虽然文章的主体论调偏（有理由的）消极，但是文章中的大量精彩类比，以及作者优美的文笔，令人击节称叹。也许你不一定认同作者关于大模型的观点，但你很难不被作者字里行间所流露出的深邃思考所打动。\n\n阅读这篇文章时，我曾多次感叹：“怎么写得这么好？”。我将页面拖动到顶部，仔细检查作者的名字——谜底揭开：“难怪，作者是特德·姜！”\n\n注：特德·姜，当代美国著名科幻作家，小说作品曾获得星云奖、雨果奖等多项大奖。\n11. 《重新发明 Python notebook 时学到的教训》\n\n原文链接：[Lessons learned reinventing the Python notebook](https://marimo.io/blog/lessons-learned)\n作者：Akshay\n一篇与产品设计有关的总结文章。文章主角是 marimo——一个类似 Jupyter 的 Python 笔记本软件。本文所涉及的内容包括：如何利用有向无环图让笔记总是可重现；为什么强约束的简单设计优于弱约束的复杂，等等。\n\n我很爱读这类文章，因为由技术人写的优秀产品设计经验，如珍珠般少见。\n\n12. 《断点单步跟踪是一种低效的调试方法》\n\n原文链接： [断点单步跟踪是一种低效的调试方法](https://blog.codingnow.com/2018/05/ineffective_debugger.html)\n作者：云风\n曾经的我以为编程像解数学题，不同人的解法或稍有区别，但终究殊途同归。然而最近两年，我发现编程更像是画画或写作，每个人信奉着自己的道。\n\n云风的这篇文章的标题，坦率来说有些骇人听闻，但仔细读过后，的确能感受到一种独特的编程智慧，一种专属于有着数十年经验的编程匠人的哲思。\n\n13. 《作为“胶水”》\n\n原文链接：[Being Glue](https://noidea.dog/glue)\n作者：Tanya Reilly\n软件工程师的日常工作除编码以外，还有大量其他事务，比如总结文档、优化工具链等，作者将这类事务统称为“胶水工作”。\n\n胶水工作看似不起眼，但对于项目的成败至关重要。本文指出了一个被人忽视的事实：承担更多胶水工作的有责任心的工程师，反而更不易晋升。针对这一点，作者提供了一些有用的建议。\n\n14. 《拥抱苦差事》\n\n原文链接：[Embrace the Grind](https://jacobian.org/2021/apr/7/embrace-the-grind/)\n中文翻译：[拥抱苦差事](https://www.piglei.com/articles/embrace-the-grind-cn-translation/)\n作者：Jacob Kaplan-Moss\n本文以一个魔术揭秘开头，引出作者如何通过完成“苦差事”，将整个开发团队拉出泥沼的故事；之间穿插着对程序员金句“懒惰是程序员的美德”的思考。\n\n重读这篇文章时，我想起最近在一本书上看到的另一句话，大意是这样的：“外行人做事时渴求及时反馈与成就感，而专业人士在一切变得乏味后，仍然继续向前。”\n\n15. 《也许是时候停止推荐〈代码整洁之道了〉》\n\n原文链接：[It's probably time to stop recommending Clean Code](https://qntm.org/clean)\n作者：qntm\n作为一本经典书籍，《代码整洁之道》长期出现在各类编程书单中。但是，本文作者发现，这本出版于十几年前的书中的大量内容已经过时，其中的不少代码示例质量糟糕。\n\n在这篇文章中，本文作者对书中的部分 Java 代码片段进行了几乎称得上是“凶残”的 Code Review。文章观点有一定争议性，但也不乏道理。\n\n16. 《我在编辑时考虑的事》\n\n原文链接：[What I think about when I edit](https://evaparish.com/blog/how-i-edit)\n作者：Eva Parish\n作为一名专业的技术写作者，作者 Eva 常常帮其他人编辑技术文档。久而久之，她总结出了 9 条编辑建议，比如：明确文章主题、有理由的重复，等等。\n\n虽然文章中的部分建议更适用于英文写作场景，但我仍然很推荐它。因为你很容易发现，这篇文章虽然信息量大，但读来非常流畅、舒服——我想这就是优秀的“编辑”带来的魔力。\n\n17. 《修复流行 Python 库的内存泄露问题》\n\n原文链接：[Fixing Memory Leaks In Popular Python Libraries](https://www.paulsprogrammingnotes.com/2021/12/python-memory-leaks.html)\n作者：Paul Brown\n这篇文章的标题很大，但其实只是一篇短文，里面的 Python 示例代码不超过 10 行。\n\n在一次黑客马拉松活动中， 本文作者和同事一起定位了 py-amqp 库的一个内存泄露问题。提交 PR 后，他在 redis-py 等流行的库中发现了类似的情况。问题和 Python 中的 try/except 语句块有关，迷惑性很强。\n\n18. 《UI 设计原则》\n\n原文链接：[Principles of_ User Interface Design](http://bokardo.com/principles-of-user-interface-design/)\n作者：Joshua Porter\n文章总结了 19 条 UI 设计原则，包括：清晰最重要、让用户有掌控感、渐进式披露，等等。我最喜欢的是第 17 条原则：“伟大的设计是隐形的”，它让我想起一些优秀的开源软件库。\n\n虽然名为 UI 设计，但这些原则并不只属于设计师，我认为每个人都可以从中受益。作为程序员，每当我们写下一个函数定义语句，实际就是在做一次 UI 设计。\n\n19. 《你的数据库技能不是“锦上添花”》\n\n原文链接：[Your Database Skills Are Not 'Good to Have'](https://renegadeotter.com/2023/11/12/your-database-skills-are-not-good-to-have.html)\n作者：Andrei Taranchenko\n在文章中，作者 Andrei 先分享了一个 20 年前的故事：用 MySQL 巧妙完成了一项困难的业务需求。然后引出文章主题：如今大家对数据库技能的关注度不应该这么低。\n\n我很认同作者对于关系数据库和 ORM 等工具的观点。有时候，当项目遇到性能问题时，分明加个索引、优化下查询就能解决，许多人却大喊着：“快点，上缓存！换 DB！”——实在大可不必。\n\n20. 《预估开发时间很难，但还是得做》\n\n原文链接：[Software Estimation Is Hard. Do It Anyway.](https://jacobian.org/2021/may/20/estimation/)\n作者：Jacob Kaplan-Moss\n在软件开发中，“估时间”是一项令人头疼的事。我们都曾有过类似的经历：拍胸脯说 3 天搞定的任务，最后足足耗费了大半个月。\n\n到后来，“估时间”成了到底留 1 倍还是 2 倍 buffer 的无聊游戏。但正如本文的标题所言，预估开发时间虽然难，却不可避免。这篇文章（系列）提供了一些与之相关的技巧，相信可以给你一些启发。\n\n21. 《人生短暂》\n\n原文链接：[Life Is Short](https://paulgraham.com/vb.html)\n作者：Paul Graham\n人生很短，到底该如何花费自己的时间？传奇投资人、程序员 Paul Graham 在文章中给出了他的建议。总结起来，一共 3 条：尽你所能地避免 bullshit 类事务，比如无用会议、网上吵架；对重要的事情不拖拉，意识到有些东西不会永远停在原地等你；珍惜你所拥有的每一滴时间。\n\n从任何角度看，上面这些建议都称不上有多新奇。但是，作者通过真诚地分享自身经历和感受，给内容注入了不一样的灵魂。或许你会像我一样，读后能获得一些新的感悟。\n\n22. 《有“产品意识”的软件工程师》\n\n原文链接：[The Product-Minded Software Engineer](https://blog.pragmaticengineer.com/the-product-minded-engineer/)\n作者：Gergely Orosz\n从事程序员越久，你大概率会越来越频繁地听到一个词：“产品意识”。人人都说产品意识好，但是它看不见摸不着，到底是个什么东西？是指程序员该自己画线框图？还是说程序员应该写用户故事？\n\n本文作者以软件工程师的视角，对“产品意识”做了全面的解读。简单来说，产品意识就是关注产品、对产品拥有好奇心、对用户拥有同理心；有产品意识的人在做技术方案时，不光思考工程角度，更能靠全局的“产品+工程”视角思考决策。\n\n“产品意识”——工程师们最为强大的思维杠杆之一。\n\n23. 《Python 的 range 不是迭代器》\n\n原文链接：[Python: range is not an iterator](https://treyhunner.com/2018/02/python-range-is-not-an-iterator/)\n作者：Trey Hunner\nrange 是 Python 语言中最常用的内置对象之一，功能是生产一段数字序列，比如 range(10) => 0, 1, ..., 9。作为循环语句中被迭代的常客，range 常被误认为是一种迭代器（iterator）。但是，正如文章标题所说，虽然可被迭代，但 range 却并不是迭代器。\n\n可如果不是迭代器的话，range 究竟是什么？在文章中，作者用精要的说明和代码片段做出了解答。看起来像咬文嚼字，实则是相当重要的 Python 基础概念。\n\n😊 有关迭代器和可迭代对象这个主题，我也很推荐另一篇自己写的内容：[《Python工匠》第六章 6.1.1 “迭代器与可迭代对象](https://www.piglei.com/book/ch06_loop.html)”。\n\n24. 《有关 TLS/SSL 证书的一切》\n\n原文链接：[有关 TLS/SSL 证书的一切](https://www.kawabangga.com/posts/5330)\n作者：laixintao\n一篇和证书有关的科普文。\n\n虽是科普，但这篇和其他科普文章不太一样。你除了能读到一些轻松愉快的小故事，还会被一些不知从哪里冒出来的 shell 命令和大段伪代码“突然袭击”。看似不协调的素材，在作者的精心编排下，却如交响乐团般演奏出一段优美流畅的乐章，让人读来如沐春风。\n\n25. 《让困难的事情变容易》\n\n原文链接：[New talk: Making Hard Things Easy](https://jvns.ca/blog/2023/10/06/new-talk--making-hard-things-easy/)\n作者：Julia Evans\n也许是胡说八道，但我还是想说：技术人普遍有一种“复杂崇拜”情结。实践一门技术，人们常常会踩进许多坑、遇到很多困难，但大部分人对此绝口不提，仿佛抱怨一门技术过于复杂，会显得自己能力不足似的。\n\n尤其，当这些技术是大家口中公认的“基础技术”（比如 DNS、HTTP）时，更是如此。技术人接受复杂、理解复杂，最终认同复杂为理所当然。\n\n正因如此，我很喜欢 Julia Evans 的这个分享。它指出在许多所谓的“基础技术”背后，隐藏着太多难以掌握的复杂元素。不少人都会在它们上面栽跟斗，但并非所有人都会站出来，改善现状。\n\n所以，我们需要让复杂事物变得更容易。针对这一点，文章挑选了几种有代表性的技术，比如 DNS、BASH、SQL 等，提供了切实可行的建议，包括：分享有用的工具和参考文档、从大的功能列表中筛选你真正使用的、展示不可见的内容，等等。\n\n26. 《The Hiring Post》\n\n原文链接：[The Hiring Post](https://sockpuppet.org/blog/2015/03/06/the-hiring-post/)\n作者：Thomas & Erin Ptacek\n作者在一家名为 Matasano 的安全公司任职。一天，他接到一份报告，其中描述了一种针对 DSA 的新型攻击手法。由于步骤复杂、条件苛刻，作者认为这种攻击方式有些不切实际，难以实施（时间以月为单位计算）。不过，他还是把报告分享到了团队中（忘了提及“不切实际”）。\n\n两天后，团队里一位名叫 Alex 的新人找到他，说自己完成了一个可工作的漏洞利用程序。\n\nAlex 非常优秀，但是，如果把时间拨回几年前，他根本不会被招进公司。他的简历平平无奇，而当时公司依赖简历和面试来招聘人才。直到后来，Matasano 公司优化了招聘策略，才挖掘出越来越多像 Alex 的人才。\n\n接着开篇的小故事，作者探讨了技术行业在人才招聘方面的一些问题。比方说，许多能力出众的候选人常因招聘环节不合理而无法通过面试。与之相对的是，一些善于面试、对抽象概念总能侃侃而谈的人，却能轻松拿到 offer。针对这些问题，文章给出了一些建议，比如：让候选人热身、使用接近工作场景的测试问题，等等。值得一读。\n\n27. 《13 年后，我如何用 Go 写 HTTP 服务》\n\n原文链接：[How I write HTTP services in Go after 13 years](https://grafana.com/blog/2024/02/09/how-i-write-http-services-in-go-after-13-years/)\n作者：Mat Ryer\n一篇 Go 语言方面的最佳实践类文章，只涉及标准库中的 HTTP 基建，不涉及其他第三方 Web 框架或库。作者有十余年的 Go 编程经验，经验丰富。\n\n文章除了展示具体的代码编写与组织技巧，也谈了一些“为什么如此处理”背后的设计考量，包括：长参数列表的函数、请求编解码处理、用闭包结合 http.Handler、E2E 测试和单元测试，等等。透过这些考量，能感受到作者多年经验与智慧的沉淀。\n\n28. 《Rust std fs 比 Python 更慢！？》\n\n原文链接：[Rust std fs slower than Python!? No, it's hardware!](https://xuanwo.io/2023/04-rust-std-fs-slower-than-python/)\n作者：Xuanwo\n一篇精彩的短篇侦探小说。\n\n有一天，Xuanwo 接到用户上报一个奇怪的案件：一段 Rust 实现的 Python SDK 中的文件操作代码，执行起来却比原生 Python 代码更慢。一通排查后，更离谱的事件出现，不止 Rust，甚至同样的 C 代码也比 Python 更慢。但这怎么可能，Python 语言解释器本身都是用 C 写的呀？！\n\n就像任何一篇精彩的侦探小说一样，最后，悬疑气氛推到最高点，凶手身份被揭露时，你会自言自语道：“意料之外，情理之中”。\n\n29. 《选择乏味的技术》\n\n原文链接：[Choose Boring Technology](https://boringtechnology.club/)\n作者：Dan McKinley\n作为技术人员，我们喜欢尝试新技术，这让我们感到快乐。但许多时候，比起闪闪发光的新玩意，“乏味”的技术才是更优的选择。\n\n当我们觉得一项技术“乏味”、痛恨它时，根本原因是我们过于了解它，无法从它身上获得任何新鲜感（比如 Django 之于我）。但别忘了，这同时也意味着我们对这项技术的每个坑都了如指掌。在项目中采用它，能让我们更容易专注在核心业务问题上。\n\n很喜欢本文里的“创新代币”比喻。“创新代币”是一种用来处理创造性任务的有限能力。假设你一共拥有 3 枚“创新代币”，你会如何花费它们？也许，和某个新奇的技术栈比起来，产品核心功能上的创新，更需要那枚代币。\n\n30. 《Python 3.10 中的结构化模式匹配》\n\n原文链接：[Structural pattern matching in Python 3.10](https://benhoyt.com/writings/python-pattern-matching/)\n作者：Ben Hoyt\n在 3.10 版本中，Python 新增了“结构化模式匹配”语法（ match ... case）。因为看上去和 switch ... case 语句十分相似，不少人认为“结构化模式匹配”就是 switch 换皮。但事实上，它和 switch 语句有着比较大的差异，用作者的话讲：它更适合被当成“迭代式解包”来理解。\n\n本文发布于 2021 年（Python 3.10 发布前夕），其中简单介绍了“结构化模式匹配”的功能，并列举了一些它最适用的代码场景。在总结中，针对该语法的未来，作者持略为悲观的复杂态度。\n\n和“结构化模式匹配”相关的文章中，除几篇 PEP 之外，我认为这是最值得阅读的一篇。\n\n31. 《你想要的是模块，不是微服务》\n\n原文链接：[You Want Modules, Not Microservices](https://blogs.newardassociates.com/blog/2023/you-want-modules-not-microservices.html)\n作者：Neward & Associates\n文章的开头很有意思。从一篇介绍微服务的文章中，作者摘抄出了微服务架的 10 条优势。随后，他逐条分析这些优势，发现其中至少有一半，可以原封不动地套用在“模块”上。\n\n“只关注一小块代码”、“独立开发”、“版本化”、“独立发布”——以上能力模块无一不具备。对了，此处谈及的“模块”，就是那个诞生于 20 世纪 70 年代的技术概念，也是如今所有编程语言的标配能力。\n\n分析完模块和微服务的相似性后，文章继续层层推进，试着回答一个重要问题：微服务架构解决的本质矛盾究竟是什么？\n\n32. 《我不喜欢 Go 语言默认的 HTTP Handlers》\n\n原文链接：[I Don’t Like Go’s Default HTTP Handlers](https://preslav.me/2022/08/09/i-dont-like-golang-default-http-handlers/)\n作者：Preslav Rachev\n在编写 HTTP handler 函数时，作者意识到这类函数存在一个设计问题，它会促使人们写出有 bug 的代码。该问题大多数 Go 开发者都知道（也可能犯过）：回写响应体后忘记 return，导致代码错误地继续执行。为了优化它，作者提出了一种思路。\n\n技术层面上，这是一篇非常简单的文章，最终方案也无非是“多封装一层”而已。不过，我喜欢作者对细节的关注，也认可文章的价值观：通过优化工具与环境，来杜绝人类犯错的可能性。\n\n33. 《对人类更友好的“超时”与“取消”》\n\n原文链接：[Timeouts and cancellation for humans](https://vorpus.org/blog/timeouts-and-cancellation-for-humans/)\n作者：Nathaniel J. Smith\n做网络编程时，“超时配置”是一个非常重要但又常常被忽视的细节。不当的超时配置就像是鞋底里的一粒沙，开始你甚至觉察不到它的存在，但随着时间累积，沙子会磨破脚底，产生巨大危害。\n\n“作为最常见的超时配置方式，为什么 get(url, timeout=10) 这类 API 不够好？”\n\n从这个问题出发，作者列举并分析了一些常见的超时 API 设计，最后详细介绍了 trio 库的相关功能。作者认为它是一种“对人类更友好”的设计。\n\n34. 《20 年软件工程师生涯，学到 20 件事》\n\n原文链接：[20 Things I’ve Learned in my 20 Years as a Software Engineer](https://www.simplethread.com/20-things-ive-learned-in-my-20-years-as-a-software-engineer/)\n作者：Justin Etheredge\n从业 20 年后，软件工程师 Justin Etheredge 回顾自己的职业生涯，总结出了 20 条经验。这些经验短小精悍、富有洞见，我读后对其中大部分都很有共鸣。\n\n比如其中的第 5 条：“最好的工程师像设计师一样思考”。有许多次，我在一个问题卡住，苦思冥想，寻不到最优解。但当我转换思路，学着像设计师一样站在用户（或调用方、依赖方）角度思考时，答案呼之欲出。再比如其中的第 9 条：“问‘为什么‘，永远不嫌多”——旺盛的好奇心和求知欲，正是助我们精进技术的最佳催化剂。\n\n35. 《为什么你的 mock 不工作》\n\n原文链接：[Why your mock doesn’t work](https://nedbatchelder.com/blog/201908/why_your_mock_doesnt_work.html)\n作者：Ned Batchelder\n用 Python 写测试代码时，经常会用到 mock 模块。初次接触 mock，不少人都遇到过 mock 不生效的问题。明明用 mock.patch(...) 替换了模块，代码执行时，引用到的却依旧是原始值。\n\nNed Batchelder 的这篇文章细致解释了“mock 不生效”问题。因为写的是个常见问题，所以文章中的知识点对你来说可能并不新鲜。但即便如此，我还是很推荐它。文章结构清晰、措辞准确，里面的每张示意图和每段代码，都出现得恰到好处。哪怕不为学知识，略读一遍后，也让人心情舒畅。在技术写作方面，能从中学到不少。\n\n同时推荐作者的另一篇文章：《Python 的名字和值》，内容与 mock 这篇有关联。\n\n36. 《实用的 Go：来自真实世界的编写可维护 Go 程序的建议》\n\n原文链接：[Practical Go: Real world advice for writing maintainable Go programs](https://dave.cheney.net/practical-go/presentations/qcon-china.html)\n作者：Dave Cheney\n互联网上，“Go 代码可读性“方面的资料不算太多，这篇或许是你能找到的最好的之一。\n\n本文包含数十条与提升 Go 代码可维护性有关的建议，覆盖从变量命名到 API 设计等多项主题，十分全面。我喜欢它最重要的原因，除了其写作质量上佳之外，还在于作者为每条建议精心搭配了示例代码，这些代码使得文章内容非常容易阅读，知识很好消化。一篇干货满满的经典之作，值得每位 Go 工程师阅读。\n\n37. 《编写系统软件：代码注释》\n\n原文链接：[Writing system software: code comments.](http://antirez.com/news/124)\n作者：antirez\n在“代码注释”这个主题上，Redis 作者 antirez 的这篇文章是我的最爱之一。通过整理 redis 项目里的所有注释，antirez 将注释一共划分成 9 类，各自承担不同功用。\n\n本文的独到之处，在于立足“用注释解释代码中的 ‘why？’”这条共识上，重点介绍了“教学性/指引性注释”这类不太常规的注释。文章提到，指引性注释是 redis 中数量最多的注释，充斥整个项目，人们认为 Redis 的源码可读性佳，指引性注释功不可没。\n\n某种程度上，这篇文章影响了我的编码习惯。再次回顾它，脑海闪过那句人们重复提及的老话： “代码主要是写给人看的，顺便被计算机执行。”\n\n38. 《编写易于删除，而不是易于扩展的代码》\n\n原文链接：[Write code that is easy to delete, not easy to extend.](https://programmingisterrible.com/post/139222674273/write-code-that-is-easy-to-delete-not-easy-to)\n作者：tef\n程序员们有一条朴素的共识：“重复代码坏，复用代码好“。这篇文章站在另一个角度，反思了这条共识。人们习惯于讨论复用的好处，却往往忽视了它的缺点：一段代码被复用越多，意味着它与更多的使用方产生了耦合关系，自然也导致它更难被修改。\n\n代码写出来后便需要被维护，而业务发展又会让旧代码不断过时。以这个为前提，重新思考软件项目的可维护性，会发现“易于删除”变成了一个形容代码的好特征。这篇文章或许写得没那么易读，但个中观点确能引发思考。\n\n39. 《如何提出好问题》\n\n原文链接：[How to ask good questions](https://jvns.ca/blog/good-questions/)\n作者：Julia Evans\n在人际沟通中，“善于提问”是一种顶级技能（ 评级：SSR✨）。在关键时刻提出一个好问题，能让沟通事半功倍，事情水到渠成。\n\nJulia Evans 的这篇文章，囊括了与提问有关的若干条经验和技巧，比如：向对方陈述并确认你所知道的现状；选择向谁提问；通过提问让不够显而易见的概念变得明确，等等。文章不止内容好，写作风格也是一如既往的友善、清晰易读，强力推荐。\n\n40. 《每天写代码》\n\n原文链接：[Write Code Every Day](https://johnresig.com/blog/write-code-every-day/)\n作者：John Resig\n程序员 John Resig （JQuery 库作者） 遇上了一件烦心事。他想完成一些兴趣项目（side projects），却发现在保证全职工作效率的前提下，很难推进。他常在每个周末疯狂赶工，力求完成更多，但压力和焦虑感总是爆棚，状态难以维系。\n\n有一天，在他人启发下，John 决定换一种策略：每天写代码。原本用整个周末投入兴趣项目，如今拆分到每一天，花不少于 30 分钟编程。半年后，他发现新策略产生了神奇的效果，他取得了超多成果：开发多个新网站、重写若干个框架、完成大量新模块。更重要的是，曾经困扰他的焦虑感，也烟消云散。\n\n我很喜欢这篇文章，它是程序员版本的“日拱一卒”，John 也是一位极好的榜样。\n\n41. 《抽象泄露法则》\n\n原文链接：[The Law of Leaky Abstractions](https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/)\n作者：Joel Spolsky\n用 AI，花 5 分钟开发一个新功能。验证时，却发现新功能在某个特殊情况下无法正常工作。为了解决这个 bug，你只能逐行排查调试。等修复好问题，一看表， 1 个小时过去了。\n\n上面的经历对你来说是否有些似曾相识？早在 2002 年，程序员 Joel Spolsky 就敏锐地发现了这类现象，并将它们总结为：“抽象泄露法则”。软件世界是一层抽象套着另一层的千层饼，就好像 HTTP 协议下有 TCP、TCP 下有 IP，每一层抽象都声称自己是完美的：“你无需关注在我之下的任何细节”。\n\n但事实却是，所有抽象必定泄露。而当抽象泄露时，就像要从 AI 的 1000 行代码里找到那个错误——事情非常棘手，但我们别无选择。\n\n42. 《如何设计一个好的 API 及其重要性》\n\n原文链接：[How to Design a Good API and Why it Matters](https://fwdinnovations.net/whitepaper/APIDesign.pdf)\n演讲视频：[How To Design A Good API and Why it Matters - Youtube](https://www.youtube.com/watch?v=aAb7hSCtvGw&ab_channel=GoogleTechTalks)\n作者：Joshua Bloch\n这份资料来自 Joshua Bloch（时任首席 Java 架构师）在 Google 公司的内部演讲。虽然距今已 17 年，但它读起来却没有任何过时的感觉，对现代软件开发仍具备指导价值。\n\nJoshua 系统性地阐述了 API 设计的方方面面。包括：\n\n带着怀疑的眼光收集用户用例（use cases）；\n写代码前，先用最简单的文字描述 API（一页纸以内），并和相关人员讨论完善；\n如果迟疑于是否提供某个功能，就先不要提供（后续新增比删除要简单得多）；\nAPI 应当和它所被使用的平台和谐共存，比如 SDK 不应被原样从一门语言搬运到另一门。\n如果你之前从未深入思考过 API 设计，读读看，它极有可能改变你未来开发软件的方式。\n\n43. 《我构建软件的原则+实践“让无效状态不可表示”》\n\n原文链接：[My Principles for Building Software](https://kevinmahoney.co.uk/articles/my-principles-for-building-software/)\n原文链接：[Applying \"Make Invalid States Unrepresentable\"](https://kevinmahoney.co.uk/articles/applying-misu/)\n作者：Kevin Mahoney\n关于软件开发原则的文章有很多，这篇的特别之处在于，作者 Kevin 着重强调了数据对于软件设计的影响。\n\n比如，Kevin 提出在设计时，应当优先考虑数据结构而不是代码，因为前者更为重要。正如《人月神话》的作者 Fred Brooks 曾经说过：“如果提供了程序流程图，而没有表数据，我仍然会很迷惑。而给我看表数据，往往就不再需要流程图，程序结构是非常清晰的。”\n\nKevin 提到的另一条原则是“让无效状态不可表示”。软件的业务逻辑中，难免会存在一些“无效状态”。为了处理它们，代码常需要做一些额外工作。然而，通过调整数据结构设计，使得数据层无法表现无效状态后，程序复杂度就可以降低。《实践“让无效状态不可表示”》中有本原则的一个具体应用案例。\n\n除了上述原则外，文章中的其他原则，比如“关注基础概念而不是具体技术”、“避免用局部简单换取全局复杂”，等等，都充满智慧。\n\n44. 《不，不是编译器的问题，从来都不是》\n\n原文链接：[No, it is not a compiler error. It is never a compiler error.](https://blog.plover.com/2017/11/12/)\n作者：Mark Dominus\n一段代码的正常运行，依赖着无数隐藏在其背后的组件和库。当程序出现 bug 时，程序员不在第一时间怀疑自己的代码，而是去质疑那些久经考验的依赖库，从来不是一个明智的选择。正如文章的标题所言：“从来都不是编译器的问题。”\n\n然而，“编译器”也是由人编写，并非真的永远正确。“编译器”一旦犯错，问题的诡异程度常常会出乎意料。在文章的后半段，常年信奉“编译器不出错”的作者，还真就遇上了一次“编译器错误”。\n\n45. 《关于在除夕前一天换了一个洗衣机的故事》\n\n原文链接：[关于在除夕前一天换了一个洗衣机的故事](https://wklken.me/posts/2023/01/23/about-buy-a-new-washing-machine-before-chinese-new-year.html)\n作者：wklken\n一名程序员家中服役 6 年的洗衣机坏了，不能脱水。因为之前花大价钱换过一次排水泵，他以为这次是旧病复发，便决定置换一台新机器。可没想到的是，新洗衣机装好后同样不能脱水。\n\n本来只是一件普普通通的糟心事，但作者显然不这么想，他在文章后半居然从洗衣机转向了软件开发。从故障码到说明书，从 debug 到选品牌，真是很有意思。相当好的观察与思考。\n\n46. 《你的函数是什么颜色？》\n\n原文链接：[What Color is Your Function?](https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/)\n作者：Bob Nystrom\n有人发明了一门编程语言，它非常特别，因为它的函数以颜色来区分类型。函数一共有两种颜色：“红色”和“蓝色”。函数的颜色不止影响外观，更会影响你使用它们的方式，比方说：红函数只能调用红函数，不能调用蓝函数。\n\n虽然以上面这略为不知所云的内容开场，但这篇文章讨论的主题实际上相当严肃。在文章中，作者 Bob 分享了自己对异步编程风格一些思考（猜猜函数的“颜色”代表什么？），从回调、Promise，到线程和 await/async，均有涉及。\n\n除了观点鞭辟入里，文章的写作质量也相当高。严肃内容间不时穿插一点作者的小幽默。对于爱好异步编程的人来说，这是一篇不可错过的佳作。\n\n47. 《健康的文档》\n\n原文链接：[Healthy Documentation](https://vadimkravcenko.com/shorts/proper-documentation/)\n作者：Vadim Kravcenko\n程序员们是一个奇怪的群体，他们对许多事物持有矛盾态度，“文档”就是其中之一。\n\n作为消费者时，每位程序员都希望自己所使用的每个 API、函数，接手的每个系统都能找到详尽而准确的文档。而当他摇身一变，变成生产者时，却很少愿意在“写文档”这件事上投入精力——常常是“宁编百行码，不写一行字”。\n\n然而，文档对于软件开发的重要性毋庸置疑。正如作者提到：“每个未被记录下的东西，都等同于一种资源的浪费，会在未来带来麻烦。”通过写文档，我们将自己脑中的知识具象化，从而在未来帮助到其他人。对于个人而言，文档不仅是一种学习、交流和分享知识的工具，也是一种建立个人影响力的捷径。而对于团队来说，如果每位成员都重视文档的价值，乐于编写清晰、可靠的文档来替代无休止的会议，那么这种“文档优先”的氛围，对于团队的长期发展大有裨益。\n\n48. 《如何像人类一样做代码评审》\n\n原文链接：[How to Do Code Reviews Like a Human (Part One)](https://mtlynch.io/human-code-reviews-1/)\n作者：Micheal Lynch\n一篇关于代码评审的文章，里面涵盖了许多入门和进阶经验，包括：别把评审时间花在风格与样式问题上，让工具来代劳；评论应该以“请求”的口吻，而不是“命令”；评审不是只找缺点，对于好代码应该不吝赞美，等等。\n\n强烈推荐给每一位需要参与代码评审的程序员。\n\n49. 《关于 Python 3.13 你需要了解的一切 - JIT 和 GIL》\n\n原文链接：[Everything you need to know about Python 3.13 – JIT and GIL went up the hill](https://drew.silcock.dev/blog/everything-you-need-to-know-about-python-3-13/)\n作者：Drew Silcock\nPython 3.13 版本引入了许多激动人心的改动，比如基于 “copy-and-patch”技术的即时编译（JIT），以及终于去掉了全局解释器锁（GIL）的“自由线程”模式，等等。\n\nDrew 的这篇文章介绍了以上改动。文章的写作风格非常友好，内容也很全面。既有零基础的概念科普，也有实际的代码实验与 benchmark 环节。知识多，篇幅却控制得恰到好处，推荐阅读。\n\n50. 《入行 14 年，我还是觉得编程很难》\n\n原文链接：[入行 14 年，我还是觉得编程很难](https://www.piglei.com/articles/programming-is-still-hard-after-14-years/)\n作者：piglei\n这是清单的第 50 篇，也标记着整个“程序员阅读清单”系列完成了一半。考虑再三，决定奉上拙作一篇，我把这作为对自己的一个小小鼓励。\n\n编程难吗？不同的人会有不同的答案。十几岁时，还在上学的我觉得编程很难，各类算法、API 让人头晕目眩。我期望多年以后，大量的开发经验会让编程变得像吃饭一样简单。\n\n如今十几年过去，编程好像只是变简单了那么一丁点，距离“像吃饭一样简单”还差得很远。\n\n在这篇文章里，我分享了自己对编程这件事的一些思考与总结。比如：打造高效试错的环境至关重要，编程的精髓是“创造”，等等，希望能对你有所启发。","source":"_posts/technology-article.md","raw":"---\ntitle: 程序员阅读清单：我喜欢的 100 篇技术文章\ndate: 2025-04-15 12:06:37\ntags: 学习\n---\n\n> 转自https://www.piglei.com/articles/programmer-reading-list-1 ,仅用于个人记录、学习，以下为原文：\n\n程序员们也许是互联网上最爱分享的群体之一，他们不仅喜欢开源自己写的软件，也爱通过写文章来分享知识。从业以来，我阅读过大量技术文章，其中不乏一些佳作。这些佳作中，有些凭借深刻的技术洞见令我深受启发，也有些以庖丁解牛般的精湛手法解释一项技术，让我读后大呼过瘾。\n\n作为“爱分享”的程序员中的一份子，我想当一次推荐人，将读过的好文章分享给大家。我给这个系列起名为《程序员阅读清单：我喜欢的 100 篇技术文章》。\n\n受限于本人的专业与兴趣所在，清单中的文章对以下几个领域有所偏重：程序员通识、软件工程、后端开发、技术写作、Python 语言、Go 语言。\n\n1. 《开发者应学习的 10 件有关“学习”的事》\n\n   原文链接：[10 Things Software Developers Should Learn about Learning](https://cacm.acm.org/research/10-things-software-developers-should-learn-about-learning/)\n   作者：Neil C.C. Brown, Felienne F. J. Hermans, and Lauren E. Margulieux\n   学习对于任何一个人都很重要，对于软件开发者来说更是如此。这是一篇有关“学习”的科普类文章，从介绍人类记忆的工作原理开始，引出专家与新手的区别、间隔与重复的重要性等主题。\n\n   文章中的一些观点相当具有启发性。比如“抽象和具象”：新知识对于初学者来说先是抽象的，然后通过大量例子将其具象化，最终彻底掌握后又重新变回抽象。又比如：做智力题和编程能力并没有关联性——这和我们认知中的“聪明人更会编程”大不相同。\n\n2. 《开发者如何管理自驱力》\n\n   原文链接：[Managing My Motivation, as a Solo Dev](https://mbuffett.com/posts/maintaining-motivation/)\n   作者：Marcus Buffett\n   作者是一名单兵作战的开发者，分享在管理自驱力方面的心得。文章提供了许多提高自驱力的切实可行的小点子，比如：\n\n   开发一个通知机器人，当自己的软件有新订阅时通知自己——外力驱动；\n   每天的开发任务做到 90% 后停止，留到第二天完成——让新一天有盼头；\n   为了避免自己被“今日一事无成”的罪恶感击溃，先干点高产出的正事，再做其他。\n\n3. 《用 Go 语言分析 10 亿行数据，从 95 秒到 1.96 秒》\n\n   原文链接：[One Billion Row Challenge in Golang - From 95s to 1.96s](https://r2p.dev/b/2024-03-18-1brc-go/)\n   作者：Renato Pereira\n   一篇很不错的 Go 语言性能优化文章，涉及到这些知识点：文件读取性能优化、生产者消费者模型优化、channel 对比 mutex、自定义 hash 算法，等等。\n\n   作者的思维模式、用到的工具链及优化手法非常规范，整个调优过程层层递进，文章行文也很工整。非常值得一读。\n\n4. 《在开发高质量软件上的花费值得吗？》\n\n   原文链接：[Is High Quality Software Worth the Cost?](https://martinfowler.com/articles/is-quality-worth-cost.html)\n   作者：Martin Fowler\n   对于大多数事物而言，如果想要追求更高的质量，必然要花费更多的成本，但对软件而言是否也是如此？作者 Martin Fowler 将软件质量分为两类：外在与内在。\n\n   由于软件的内在质量很难被外人所感知，因此花在改善内在质量上的成本常被质疑。但实际上，在内在质量上投入并不增加成本，反而能降低整体花费。文章会通过详细的分析与对比告诉你为什么。\n\n5. 《错误抽象》\n\n原文链接：[The Wrong Abstraction](https://sandimetz.com/blog/2016/1/20/the-wrong-abstraction)\n作者：Sandi Metz\n如果你想要建造一栋楼房，假如地基不正，最终只能收获一栋歪歪扭扭的残次品。对编程而言，抽象便是地基，良好的抽象是一切美好事物的前提。\n\n这篇文章探讨了复用与抽象间的关系，作者犀利地指出一个事实：对“沉没成本”的恐惧常常孕育出错误抽象，而后者将引发项目质量恶化。\n\n一篇短小精悍的经典之作，不容错过。\n\n6. 《谷歌技术写作课：编写有帮助的错误信息》\n\n原文链接：[Writing Helpful Error Messages](https://developers.google.com/tech-writing/error-messages)\n作者：谷歌工程团队\n在软件开发中，错误信息是一种极为微妙的存在，糟糕的错误信息使人沮丧，时刻提醒着我们：“魔鬼藏在细节中”。\n\n对此，谷歌团队提供了一份关于错误信息的写作建议，包含：精确描述、提供解决方案、面向目标读者写作、用正确的语气写作，等等。我认为这应该成为每位程序员的必修课。\n\n7. 《深入 Python 字典——一份“可探索”的解释》\n\n原文链接：[Inside python dict — an explorable explanation](https://just-taking-a-ride.com/inside_python_dict/chapter1.html)\n作者：Alexander Putilin\n毫不夸张的说，网上介绍 Python 字典原理的文章多到泛滥。但这篇比较特别，它的特别主要体现在标题里的“可探索”上。\n\n在文章中，作者用一些 Python 代码模拟了字典数据类型。这些代码可在页面上点击执行，过程完全可视化。比如当字典中出现哈希冲突时，会有非常细致的动画，看起来妙趣横生。\n\n8. 《愿意让自己显得愚蠢》\n\n原文链接：[Willingness to look stupid](https://danluu.com/look-stupid/)\n作者：Dan Luu\n人们天生在意他人的看法，每个人都希望自己是别人眼里的“聪明人”，而不是“傻瓜”。不过，本文作者分享了一个不太常见的观点：做一些让自己显得愚蠢的事，利远大于弊。 比方说：提出愚蠢问题往往能获得对事物更深入的理解；用别人眼中的蠢办法学习，效果更好。\n\n9. 《我们为什么坚持使用 Ruby on Rails》\n\n原文链接：[Why we're sticking with Ruby on Rails](https://about.gitlab.com/blog/2022/07/06/why-were-sticking-with-ruby-on-rails/)\n作者：Sid Sijbrandij\n著名的开源软件 GitLab 的大部分代码都在一个 Rails 单体项目里。GitLab 采用“模块化单体”架构，并未使用近年颇为流行的微服务架构。作者在文章中解释了 GitLab 这么做的原因：微服务架构徒增偶然复杂度，却对降低本质复杂度帮助不大。\n\n我很认同文章中的一句话：架构该为需求服务，而不是反过来。\n\n10. 《ChatGPT 是互联网的一张模糊的 JPEG 图》\n\n原文链接：[ChatGPT Is a Blurry JPEG of the Web](https://readwise.io/reader/shared/01gry4pcabx8kh4k1pkpf2e2pe/)\n作者：Ted Chiang\n这篇文章发表于大语言模型爆发前夜：GPT-3.5 已经问世，GPT-4 蓄势待发。虽然文章的主体论调偏（有理由的）消极，但是文章中的大量精彩类比，以及作者优美的文笔，令人击节称叹。也许你不一定认同作者关于大模型的观点，但你很难不被作者字里行间所流露出的深邃思考所打动。\n\n阅读这篇文章时，我曾多次感叹：“怎么写得这么好？”。我将页面拖动到顶部，仔细检查作者的名字——谜底揭开：“难怪，作者是特德·姜！”\n\n注：特德·姜，当代美国著名科幻作家，小说作品曾获得星云奖、雨果奖等多项大奖。\n11. 《重新发明 Python notebook 时学到的教训》\n\n原文链接：[Lessons learned reinventing the Python notebook](https://marimo.io/blog/lessons-learned)\n作者：Akshay\n一篇与产品设计有关的总结文章。文章主角是 marimo——一个类似 Jupyter 的 Python 笔记本软件。本文所涉及的内容包括：如何利用有向无环图让笔记总是可重现；为什么强约束的简单设计优于弱约束的复杂，等等。\n\n我很爱读这类文章，因为由技术人写的优秀产品设计经验，如珍珠般少见。\n\n12. 《断点单步跟踪是一种低效的调试方法》\n\n原文链接： [断点单步跟踪是一种低效的调试方法](https://blog.codingnow.com/2018/05/ineffective_debugger.html)\n作者：云风\n曾经的我以为编程像解数学题，不同人的解法或稍有区别，但终究殊途同归。然而最近两年，我发现编程更像是画画或写作，每个人信奉着自己的道。\n\n云风的这篇文章的标题，坦率来说有些骇人听闻，但仔细读过后，的确能感受到一种独特的编程智慧，一种专属于有着数十年经验的编程匠人的哲思。\n\n13. 《作为“胶水”》\n\n原文链接：[Being Glue](https://noidea.dog/glue)\n作者：Tanya Reilly\n软件工程师的日常工作除编码以外，还有大量其他事务，比如总结文档、优化工具链等，作者将这类事务统称为“胶水工作”。\n\n胶水工作看似不起眼，但对于项目的成败至关重要。本文指出了一个被人忽视的事实：承担更多胶水工作的有责任心的工程师，反而更不易晋升。针对这一点，作者提供了一些有用的建议。\n\n14. 《拥抱苦差事》\n\n原文链接：[Embrace the Grind](https://jacobian.org/2021/apr/7/embrace-the-grind/)\n中文翻译：[拥抱苦差事](https://www.piglei.com/articles/embrace-the-grind-cn-translation/)\n作者：Jacob Kaplan-Moss\n本文以一个魔术揭秘开头，引出作者如何通过完成“苦差事”，将整个开发团队拉出泥沼的故事；之间穿插着对程序员金句“懒惰是程序员的美德”的思考。\n\n重读这篇文章时，我想起最近在一本书上看到的另一句话，大意是这样的：“外行人做事时渴求及时反馈与成就感，而专业人士在一切变得乏味后，仍然继续向前。”\n\n15. 《也许是时候停止推荐〈代码整洁之道了〉》\n\n原文链接：[It's probably time to stop recommending Clean Code](https://qntm.org/clean)\n作者：qntm\n作为一本经典书籍，《代码整洁之道》长期出现在各类编程书单中。但是，本文作者发现，这本出版于十几年前的书中的大量内容已经过时，其中的不少代码示例质量糟糕。\n\n在这篇文章中，本文作者对书中的部分 Java 代码片段进行了几乎称得上是“凶残”的 Code Review。文章观点有一定争议性，但也不乏道理。\n\n16. 《我在编辑时考虑的事》\n\n原文链接：[What I think about when I edit](https://evaparish.com/blog/how-i-edit)\n作者：Eva Parish\n作为一名专业的技术写作者，作者 Eva 常常帮其他人编辑技术文档。久而久之，她总结出了 9 条编辑建议，比如：明确文章主题、有理由的重复，等等。\n\n虽然文章中的部分建议更适用于英文写作场景，但我仍然很推荐它。因为你很容易发现，这篇文章虽然信息量大，但读来非常流畅、舒服——我想这就是优秀的“编辑”带来的魔力。\n\n17. 《修复流行 Python 库的内存泄露问题》\n\n原文链接：[Fixing Memory Leaks In Popular Python Libraries](https://www.paulsprogrammingnotes.com/2021/12/python-memory-leaks.html)\n作者：Paul Brown\n这篇文章的标题很大，但其实只是一篇短文，里面的 Python 示例代码不超过 10 行。\n\n在一次黑客马拉松活动中， 本文作者和同事一起定位了 py-amqp 库的一个内存泄露问题。提交 PR 后，他在 redis-py 等流行的库中发现了类似的情况。问题和 Python 中的 try/except 语句块有关，迷惑性很强。\n\n18. 《UI 设计原则》\n\n原文链接：[Principles of_ User Interface Design](http://bokardo.com/principles-of-user-interface-design/)\n作者：Joshua Porter\n文章总结了 19 条 UI 设计原则，包括：清晰最重要、让用户有掌控感、渐进式披露，等等。我最喜欢的是第 17 条原则：“伟大的设计是隐形的”，它让我想起一些优秀的开源软件库。\n\n虽然名为 UI 设计，但这些原则并不只属于设计师，我认为每个人都可以从中受益。作为程序员，每当我们写下一个函数定义语句，实际就是在做一次 UI 设计。\n\n19. 《你的数据库技能不是“锦上添花”》\n\n原文链接：[Your Database Skills Are Not 'Good to Have'](https://renegadeotter.com/2023/11/12/your-database-skills-are-not-good-to-have.html)\n作者：Andrei Taranchenko\n在文章中，作者 Andrei 先分享了一个 20 年前的故事：用 MySQL 巧妙完成了一项困难的业务需求。然后引出文章主题：如今大家对数据库技能的关注度不应该这么低。\n\n我很认同作者对于关系数据库和 ORM 等工具的观点。有时候，当项目遇到性能问题时，分明加个索引、优化下查询就能解决，许多人却大喊着：“快点，上缓存！换 DB！”——实在大可不必。\n\n20. 《预估开发时间很难，但还是得做》\n\n原文链接：[Software Estimation Is Hard. Do It Anyway.](https://jacobian.org/2021/may/20/estimation/)\n作者：Jacob Kaplan-Moss\n在软件开发中，“估时间”是一项令人头疼的事。我们都曾有过类似的经历：拍胸脯说 3 天搞定的任务，最后足足耗费了大半个月。\n\n到后来，“估时间”成了到底留 1 倍还是 2 倍 buffer 的无聊游戏。但正如本文的标题所言，预估开发时间虽然难，却不可避免。这篇文章（系列）提供了一些与之相关的技巧，相信可以给你一些启发。\n\n21. 《人生短暂》\n\n原文链接：[Life Is Short](https://paulgraham.com/vb.html)\n作者：Paul Graham\n人生很短，到底该如何花费自己的时间？传奇投资人、程序员 Paul Graham 在文章中给出了他的建议。总结起来，一共 3 条：尽你所能地避免 bullshit 类事务，比如无用会议、网上吵架；对重要的事情不拖拉，意识到有些东西不会永远停在原地等你；珍惜你所拥有的每一滴时间。\n\n从任何角度看，上面这些建议都称不上有多新奇。但是，作者通过真诚地分享自身经历和感受，给内容注入了不一样的灵魂。或许你会像我一样，读后能获得一些新的感悟。\n\n22. 《有“产品意识”的软件工程师》\n\n原文链接：[The Product-Minded Software Engineer](https://blog.pragmaticengineer.com/the-product-minded-engineer/)\n作者：Gergely Orosz\n从事程序员越久，你大概率会越来越频繁地听到一个词：“产品意识”。人人都说产品意识好，但是它看不见摸不着，到底是个什么东西？是指程序员该自己画线框图？还是说程序员应该写用户故事？\n\n本文作者以软件工程师的视角，对“产品意识”做了全面的解读。简单来说，产品意识就是关注产品、对产品拥有好奇心、对用户拥有同理心；有产品意识的人在做技术方案时，不光思考工程角度，更能靠全局的“产品+工程”视角思考决策。\n\n“产品意识”——工程师们最为强大的思维杠杆之一。\n\n23. 《Python 的 range 不是迭代器》\n\n原文链接：[Python: range is not an iterator](https://treyhunner.com/2018/02/python-range-is-not-an-iterator/)\n作者：Trey Hunner\nrange 是 Python 语言中最常用的内置对象之一，功能是生产一段数字序列，比如 range(10) => 0, 1, ..., 9。作为循环语句中被迭代的常客，range 常被误认为是一种迭代器（iterator）。但是，正如文章标题所说，虽然可被迭代，但 range 却并不是迭代器。\n\n可如果不是迭代器的话，range 究竟是什么？在文章中，作者用精要的说明和代码片段做出了解答。看起来像咬文嚼字，实则是相当重要的 Python 基础概念。\n\n😊 有关迭代器和可迭代对象这个主题，我也很推荐另一篇自己写的内容：[《Python工匠》第六章 6.1.1 “迭代器与可迭代对象](https://www.piglei.com/book/ch06_loop.html)”。\n\n24. 《有关 TLS/SSL 证书的一切》\n\n原文链接：[有关 TLS/SSL 证书的一切](https://www.kawabangga.com/posts/5330)\n作者：laixintao\n一篇和证书有关的科普文。\n\n虽是科普，但这篇和其他科普文章不太一样。你除了能读到一些轻松愉快的小故事，还会被一些不知从哪里冒出来的 shell 命令和大段伪代码“突然袭击”。看似不协调的素材，在作者的精心编排下，却如交响乐团般演奏出一段优美流畅的乐章，让人读来如沐春风。\n\n25. 《让困难的事情变容易》\n\n原文链接：[New talk: Making Hard Things Easy](https://jvns.ca/blog/2023/10/06/new-talk--making-hard-things-easy/)\n作者：Julia Evans\n也许是胡说八道，但我还是想说：技术人普遍有一种“复杂崇拜”情结。实践一门技术，人们常常会踩进许多坑、遇到很多困难，但大部分人对此绝口不提，仿佛抱怨一门技术过于复杂，会显得自己能力不足似的。\n\n尤其，当这些技术是大家口中公认的“基础技术”（比如 DNS、HTTP）时，更是如此。技术人接受复杂、理解复杂，最终认同复杂为理所当然。\n\n正因如此，我很喜欢 Julia Evans 的这个分享。它指出在许多所谓的“基础技术”背后，隐藏着太多难以掌握的复杂元素。不少人都会在它们上面栽跟斗，但并非所有人都会站出来，改善现状。\n\n所以，我们需要让复杂事物变得更容易。针对这一点，文章挑选了几种有代表性的技术，比如 DNS、BASH、SQL 等，提供了切实可行的建议，包括：分享有用的工具和参考文档、从大的功能列表中筛选你真正使用的、展示不可见的内容，等等。\n\n26. 《The Hiring Post》\n\n原文链接：[The Hiring Post](https://sockpuppet.org/blog/2015/03/06/the-hiring-post/)\n作者：Thomas & Erin Ptacek\n作者在一家名为 Matasano 的安全公司任职。一天，他接到一份报告，其中描述了一种针对 DSA 的新型攻击手法。由于步骤复杂、条件苛刻，作者认为这种攻击方式有些不切实际，难以实施（时间以月为单位计算）。不过，他还是把报告分享到了团队中（忘了提及“不切实际”）。\n\n两天后，团队里一位名叫 Alex 的新人找到他，说自己完成了一个可工作的漏洞利用程序。\n\nAlex 非常优秀，但是，如果把时间拨回几年前，他根本不会被招进公司。他的简历平平无奇，而当时公司依赖简历和面试来招聘人才。直到后来，Matasano 公司优化了招聘策略，才挖掘出越来越多像 Alex 的人才。\n\n接着开篇的小故事，作者探讨了技术行业在人才招聘方面的一些问题。比方说，许多能力出众的候选人常因招聘环节不合理而无法通过面试。与之相对的是，一些善于面试、对抽象概念总能侃侃而谈的人，却能轻松拿到 offer。针对这些问题，文章给出了一些建议，比如：让候选人热身、使用接近工作场景的测试问题，等等。值得一读。\n\n27. 《13 年后，我如何用 Go 写 HTTP 服务》\n\n原文链接：[How I write HTTP services in Go after 13 years](https://grafana.com/blog/2024/02/09/how-i-write-http-services-in-go-after-13-years/)\n作者：Mat Ryer\n一篇 Go 语言方面的最佳实践类文章，只涉及标准库中的 HTTP 基建，不涉及其他第三方 Web 框架或库。作者有十余年的 Go 编程经验，经验丰富。\n\n文章除了展示具体的代码编写与组织技巧，也谈了一些“为什么如此处理”背后的设计考量，包括：长参数列表的函数、请求编解码处理、用闭包结合 http.Handler、E2E 测试和单元测试，等等。透过这些考量，能感受到作者多年经验与智慧的沉淀。\n\n28. 《Rust std fs 比 Python 更慢！？》\n\n原文链接：[Rust std fs slower than Python!? No, it's hardware!](https://xuanwo.io/2023/04-rust-std-fs-slower-than-python/)\n作者：Xuanwo\n一篇精彩的短篇侦探小说。\n\n有一天，Xuanwo 接到用户上报一个奇怪的案件：一段 Rust 实现的 Python SDK 中的文件操作代码，执行起来却比原生 Python 代码更慢。一通排查后，更离谱的事件出现，不止 Rust，甚至同样的 C 代码也比 Python 更慢。但这怎么可能，Python 语言解释器本身都是用 C 写的呀？！\n\n就像任何一篇精彩的侦探小说一样，最后，悬疑气氛推到最高点，凶手身份被揭露时，你会自言自语道：“意料之外，情理之中”。\n\n29. 《选择乏味的技术》\n\n原文链接：[Choose Boring Technology](https://boringtechnology.club/)\n作者：Dan McKinley\n作为技术人员，我们喜欢尝试新技术，这让我们感到快乐。但许多时候，比起闪闪发光的新玩意，“乏味”的技术才是更优的选择。\n\n当我们觉得一项技术“乏味”、痛恨它时，根本原因是我们过于了解它，无法从它身上获得任何新鲜感（比如 Django 之于我）。但别忘了，这同时也意味着我们对这项技术的每个坑都了如指掌。在项目中采用它，能让我们更容易专注在核心业务问题上。\n\n很喜欢本文里的“创新代币”比喻。“创新代币”是一种用来处理创造性任务的有限能力。假设你一共拥有 3 枚“创新代币”，你会如何花费它们？也许，和某个新奇的技术栈比起来，产品核心功能上的创新，更需要那枚代币。\n\n30. 《Python 3.10 中的结构化模式匹配》\n\n原文链接：[Structural pattern matching in Python 3.10](https://benhoyt.com/writings/python-pattern-matching/)\n作者：Ben Hoyt\n在 3.10 版本中，Python 新增了“结构化模式匹配”语法（ match ... case）。因为看上去和 switch ... case 语句十分相似，不少人认为“结构化模式匹配”就是 switch 换皮。但事实上，它和 switch 语句有着比较大的差异，用作者的话讲：它更适合被当成“迭代式解包”来理解。\n\n本文发布于 2021 年（Python 3.10 发布前夕），其中简单介绍了“结构化模式匹配”的功能，并列举了一些它最适用的代码场景。在总结中，针对该语法的未来，作者持略为悲观的复杂态度。\n\n和“结构化模式匹配”相关的文章中，除几篇 PEP 之外，我认为这是最值得阅读的一篇。\n\n31. 《你想要的是模块，不是微服务》\n\n原文链接：[You Want Modules, Not Microservices](https://blogs.newardassociates.com/blog/2023/you-want-modules-not-microservices.html)\n作者：Neward & Associates\n文章的开头很有意思。从一篇介绍微服务的文章中，作者摘抄出了微服务架的 10 条优势。随后，他逐条分析这些优势，发现其中至少有一半，可以原封不动地套用在“模块”上。\n\n“只关注一小块代码”、“独立开发”、“版本化”、“独立发布”——以上能力模块无一不具备。对了，此处谈及的“模块”，就是那个诞生于 20 世纪 70 年代的技术概念，也是如今所有编程语言的标配能力。\n\n分析完模块和微服务的相似性后，文章继续层层推进，试着回答一个重要问题：微服务架构解决的本质矛盾究竟是什么？\n\n32. 《我不喜欢 Go 语言默认的 HTTP Handlers》\n\n原文链接：[I Don’t Like Go’s Default HTTP Handlers](https://preslav.me/2022/08/09/i-dont-like-golang-default-http-handlers/)\n作者：Preslav Rachev\n在编写 HTTP handler 函数时，作者意识到这类函数存在一个设计问题，它会促使人们写出有 bug 的代码。该问题大多数 Go 开发者都知道（也可能犯过）：回写响应体后忘记 return，导致代码错误地继续执行。为了优化它，作者提出了一种思路。\n\n技术层面上，这是一篇非常简单的文章，最终方案也无非是“多封装一层”而已。不过，我喜欢作者对细节的关注，也认可文章的价值观：通过优化工具与环境，来杜绝人类犯错的可能性。\n\n33. 《对人类更友好的“超时”与“取消”》\n\n原文链接：[Timeouts and cancellation for humans](https://vorpus.org/blog/timeouts-and-cancellation-for-humans/)\n作者：Nathaniel J. Smith\n做网络编程时，“超时配置”是一个非常重要但又常常被忽视的细节。不当的超时配置就像是鞋底里的一粒沙，开始你甚至觉察不到它的存在，但随着时间累积，沙子会磨破脚底，产生巨大危害。\n\n“作为最常见的超时配置方式，为什么 get(url, timeout=10) 这类 API 不够好？”\n\n从这个问题出发，作者列举并分析了一些常见的超时 API 设计，最后详细介绍了 trio 库的相关功能。作者认为它是一种“对人类更友好”的设计。\n\n34. 《20 年软件工程师生涯，学到 20 件事》\n\n原文链接：[20 Things I’ve Learned in my 20 Years as a Software Engineer](https://www.simplethread.com/20-things-ive-learned-in-my-20-years-as-a-software-engineer/)\n作者：Justin Etheredge\n从业 20 年后，软件工程师 Justin Etheredge 回顾自己的职业生涯，总结出了 20 条经验。这些经验短小精悍、富有洞见，我读后对其中大部分都很有共鸣。\n\n比如其中的第 5 条：“最好的工程师像设计师一样思考”。有许多次，我在一个问题卡住，苦思冥想，寻不到最优解。但当我转换思路，学着像设计师一样站在用户（或调用方、依赖方）角度思考时，答案呼之欲出。再比如其中的第 9 条：“问‘为什么‘，永远不嫌多”——旺盛的好奇心和求知欲，正是助我们精进技术的最佳催化剂。\n\n35. 《为什么你的 mock 不工作》\n\n原文链接：[Why your mock doesn’t work](https://nedbatchelder.com/blog/201908/why_your_mock_doesnt_work.html)\n作者：Ned Batchelder\n用 Python 写测试代码时，经常会用到 mock 模块。初次接触 mock，不少人都遇到过 mock 不生效的问题。明明用 mock.patch(...) 替换了模块，代码执行时，引用到的却依旧是原始值。\n\nNed Batchelder 的这篇文章细致解释了“mock 不生效”问题。因为写的是个常见问题，所以文章中的知识点对你来说可能并不新鲜。但即便如此，我还是很推荐它。文章结构清晰、措辞准确，里面的每张示意图和每段代码，都出现得恰到好处。哪怕不为学知识，略读一遍后，也让人心情舒畅。在技术写作方面，能从中学到不少。\n\n同时推荐作者的另一篇文章：《Python 的名字和值》，内容与 mock 这篇有关联。\n\n36. 《实用的 Go：来自真实世界的编写可维护 Go 程序的建议》\n\n原文链接：[Practical Go: Real world advice for writing maintainable Go programs](https://dave.cheney.net/practical-go/presentations/qcon-china.html)\n作者：Dave Cheney\n互联网上，“Go 代码可读性“方面的资料不算太多，这篇或许是你能找到的最好的之一。\n\n本文包含数十条与提升 Go 代码可维护性有关的建议，覆盖从变量命名到 API 设计等多项主题，十分全面。我喜欢它最重要的原因，除了其写作质量上佳之外，还在于作者为每条建议精心搭配了示例代码，这些代码使得文章内容非常容易阅读，知识很好消化。一篇干货满满的经典之作，值得每位 Go 工程师阅读。\n\n37. 《编写系统软件：代码注释》\n\n原文链接：[Writing system software: code comments.](http://antirez.com/news/124)\n作者：antirez\n在“代码注释”这个主题上，Redis 作者 antirez 的这篇文章是我的最爱之一。通过整理 redis 项目里的所有注释，antirez 将注释一共划分成 9 类，各自承担不同功用。\n\n本文的独到之处，在于立足“用注释解释代码中的 ‘why？’”这条共识上，重点介绍了“教学性/指引性注释”这类不太常规的注释。文章提到，指引性注释是 redis 中数量最多的注释，充斥整个项目，人们认为 Redis 的源码可读性佳，指引性注释功不可没。\n\n某种程度上，这篇文章影响了我的编码习惯。再次回顾它，脑海闪过那句人们重复提及的老话： “代码主要是写给人看的，顺便被计算机执行。”\n\n38. 《编写易于删除，而不是易于扩展的代码》\n\n原文链接：[Write code that is easy to delete, not easy to extend.](https://programmingisterrible.com/post/139222674273/write-code-that-is-easy-to-delete-not-easy-to)\n作者：tef\n程序员们有一条朴素的共识：“重复代码坏，复用代码好“。这篇文章站在另一个角度，反思了这条共识。人们习惯于讨论复用的好处，却往往忽视了它的缺点：一段代码被复用越多，意味着它与更多的使用方产生了耦合关系，自然也导致它更难被修改。\n\n代码写出来后便需要被维护，而业务发展又会让旧代码不断过时。以这个为前提，重新思考软件项目的可维护性，会发现“易于删除”变成了一个形容代码的好特征。这篇文章或许写得没那么易读，但个中观点确能引发思考。\n\n39. 《如何提出好问题》\n\n原文链接：[How to ask good questions](https://jvns.ca/blog/good-questions/)\n作者：Julia Evans\n在人际沟通中，“善于提问”是一种顶级技能（ 评级：SSR✨）。在关键时刻提出一个好问题，能让沟通事半功倍，事情水到渠成。\n\nJulia Evans 的这篇文章，囊括了与提问有关的若干条经验和技巧，比如：向对方陈述并确认你所知道的现状；选择向谁提问；通过提问让不够显而易见的概念变得明确，等等。文章不止内容好，写作风格也是一如既往的友善、清晰易读，强力推荐。\n\n40. 《每天写代码》\n\n原文链接：[Write Code Every Day](https://johnresig.com/blog/write-code-every-day/)\n作者：John Resig\n程序员 John Resig （JQuery 库作者） 遇上了一件烦心事。他想完成一些兴趣项目（side projects），却发现在保证全职工作效率的前提下，很难推进。他常在每个周末疯狂赶工，力求完成更多，但压力和焦虑感总是爆棚，状态难以维系。\n\n有一天，在他人启发下，John 决定换一种策略：每天写代码。原本用整个周末投入兴趣项目，如今拆分到每一天，花不少于 30 分钟编程。半年后，他发现新策略产生了神奇的效果，他取得了超多成果：开发多个新网站、重写若干个框架、完成大量新模块。更重要的是，曾经困扰他的焦虑感，也烟消云散。\n\n我很喜欢这篇文章，它是程序员版本的“日拱一卒”，John 也是一位极好的榜样。\n\n41. 《抽象泄露法则》\n\n原文链接：[The Law of Leaky Abstractions](https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/)\n作者：Joel Spolsky\n用 AI，花 5 分钟开发一个新功能。验证时，却发现新功能在某个特殊情况下无法正常工作。为了解决这个 bug，你只能逐行排查调试。等修复好问题，一看表， 1 个小时过去了。\n\n上面的经历对你来说是否有些似曾相识？早在 2002 年，程序员 Joel Spolsky 就敏锐地发现了这类现象，并将它们总结为：“抽象泄露法则”。软件世界是一层抽象套着另一层的千层饼，就好像 HTTP 协议下有 TCP、TCP 下有 IP，每一层抽象都声称自己是完美的：“你无需关注在我之下的任何细节”。\n\n但事实却是，所有抽象必定泄露。而当抽象泄露时，就像要从 AI 的 1000 行代码里找到那个错误——事情非常棘手，但我们别无选择。\n\n42. 《如何设计一个好的 API 及其重要性》\n\n原文链接：[How to Design a Good API and Why it Matters](https://fwdinnovations.net/whitepaper/APIDesign.pdf)\n演讲视频：[How To Design A Good API and Why it Matters - Youtube](https://www.youtube.com/watch?v=aAb7hSCtvGw&ab_channel=GoogleTechTalks)\n作者：Joshua Bloch\n这份资料来自 Joshua Bloch（时任首席 Java 架构师）在 Google 公司的内部演讲。虽然距今已 17 年，但它读起来却没有任何过时的感觉，对现代软件开发仍具备指导价值。\n\nJoshua 系统性地阐述了 API 设计的方方面面。包括：\n\n带着怀疑的眼光收集用户用例（use cases）；\n写代码前，先用最简单的文字描述 API（一页纸以内），并和相关人员讨论完善；\n如果迟疑于是否提供某个功能，就先不要提供（后续新增比删除要简单得多）；\nAPI 应当和它所被使用的平台和谐共存，比如 SDK 不应被原样从一门语言搬运到另一门。\n如果你之前从未深入思考过 API 设计，读读看，它极有可能改变你未来开发软件的方式。\n\n43. 《我构建软件的原则+实践“让无效状态不可表示”》\n\n原文链接：[My Principles for Building Software](https://kevinmahoney.co.uk/articles/my-principles-for-building-software/)\n原文链接：[Applying \"Make Invalid States Unrepresentable\"](https://kevinmahoney.co.uk/articles/applying-misu/)\n作者：Kevin Mahoney\n关于软件开发原则的文章有很多，这篇的特别之处在于，作者 Kevin 着重强调了数据对于软件设计的影响。\n\n比如，Kevin 提出在设计时，应当优先考虑数据结构而不是代码，因为前者更为重要。正如《人月神话》的作者 Fred Brooks 曾经说过：“如果提供了程序流程图，而没有表数据，我仍然会很迷惑。而给我看表数据，往往就不再需要流程图，程序结构是非常清晰的。”\n\nKevin 提到的另一条原则是“让无效状态不可表示”。软件的业务逻辑中，难免会存在一些“无效状态”。为了处理它们，代码常需要做一些额外工作。然而，通过调整数据结构设计，使得数据层无法表现无效状态后，程序复杂度就可以降低。《实践“让无效状态不可表示”》中有本原则的一个具体应用案例。\n\n除了上述原则外，文章中的其他原则，比如“关注基础概念而不是具体技术”、“避免用局部简单换取全局复杂”，等等，都充满智慧。\n\n44. 《不，不是编译器的问题，从来都不是》\n\n原文链接：[No, it is not a compiler error. It is never a compiler error.](https://blog.plover.com/2017/11/12/)\n作者：Mark Dominus\n一段代码的正常运行，依赖着无数隐藏在其背后的组件和库。当程序出现 bug 时，程序员不在第一时间怀疑自己的代码，而是去质疑那些久经考验的依赖库，从来不是一个明智的选择。正如文章的标题所言：“从来都不是编译器的问题。”\n\n然而，“编译器”也是由人编写，并非真的永远正确。“编译器”一旦犯错，问题的诡异程度常常会出乎意料。在文章的后半段，常年信奉“编译器不出错”的作者，还真就遇上了一次“编译器错误”。\n\n45. 《关于在除夕前一天换了一个洗衣机的故事》\n\n原文链接：[关于在除夕前一天换了一个洗衣机的故事](https://wklken.me/posts/2023/01/23/about-buy-a-new-washing-machine-before-chinese-new-year.html)\n作者：wklken\n一名程序员家中服役 6 年的洗衣机坏了，不能脱水。因为之前花大价钱换过一次排水泵，他以为这次是旧病复发，便决定置换一台新机器。可没想到的是，新洗衣机装好后同样不能脱水。\n\n本来只是一件普普通通的糟心事，但作者显然不这么想，他在文章后半居然从洗衣机转向了软件开发。从故障码到说明书，从 debug 到选品牌，真是很有意思。相当好的观察与思考。\n\n46. 《你的函数是什么颜色？》\n\n原文链接：[What Color is Your Function?](https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/)\n作者：Bob Nystrom\n有人发明了一门编程语言，它非常特别，因为它的函数以颜色来区分类型。函数一共有两种颜色：“红色”和“蓝色”。函数的颜色不止影响外观，更会影响你使用它们的方式，比方说：红函数只能调用红函数，不能调用蓝函数。\n\n虽然以上面这略为不知所云的内容开场，但这篇文章讨论的主题实际上相当严肃。在文章中，作者 Bob 分享了自己对异步编程风格一些思考（猜猜函数的“颜色”代表什么？），从回调、Promise，到线程和 await/async，均有涉及。\n\n除了观点鞭辟入里，文章的写作质量也相当高。严肃内容间不时穿插一点作者的小幽默。对于爱好异步编程的人来说，这是一篇不可错过的佳作。\n\n47. 《健康的文档》\n\n原文链接：[Healthy Documentation](https://vadimkravcenko.com/shorts/proper-documentation/)\n作者：Vadim Kravcenko\n程序员们是一个奇怪的群体，他们对许多事物持有矛盾态度，“文档”就是其中之一。\n\n作为消费者时，每位程序员都希望自己所使用的每个 API、函数，接手的每个系统都能找到详尽而准确的文档。而当他摇身一变，变成生产者时，却很少愿意在“写文档”这件事上投入精力——常常是“宁编百行码，不写一行字”。\n\n然而，文档对于软件开发的重要性毋庸置疑。正如作者提到：“每个未被记录下的东西，都等同于一种资源的浪费，会在未来带来麻烦。”通过写文档，我们将自己脑中的知识具象化，从而在未来帮助到其他人。对于个人而言，文档不仅是一种学习、交流和分享知识的工具，也是一种建立个人影响力的捷径。而对于团队来说，如果每位成员都重视文档的价值，乐于编写清晰、可靠的文档来替代无休止的会议，那么这种“文档优先”的氛围，对于团队的长期发展大有裨益。\n\n48. 《如何像人类一样做代码评审》\n\n原文链接：[How to Do Code Reviews Like a Human (Part One)](https://mtlynch.io/human-code-reviews-1/)\n作者：Micheal Lynch\n一篇关于代码评审的文章，里面涵盖了许多入门和进阶经验，包括：别把评审时间花在风格与样式问题上，让工具来代劳；评论应该以“请求”的口吻，而不是“命令”；评审不是只找缺点，对于好代码应该不吝赞美，等等。\n\n强烈推荐给每一位需要参与代码评审的程序员。\n\n49. 《关于 Python 3.13 你需要了解的一切 - JIT 和 GIL》\n\n原文链接：[Everything you need to know about Python 3.13 – JIT and GIL went up the hill](https://drew.silcock.dev/blog/everything-you-need-to-know-about-python-3-13/)\n作者：Drew Silcock\nPython 3.13 版本引入了许多激动人心的改动，比如基于 “copy-and-patch”技术的即时编译（JIT），以及终于去掉了全局解释器锁（GIL）的“自由线程”模式，等等。\n\nDrew 的这篇文章介绍了以上改动。文章的写作风格非常友好，内容也很全面。既有零基础的概念科普，也有实际的代码实验与 benchmark 环节。知识多，篇幅却控制得恰到好处，推荐阅读。\n\n50. 《入行 14 年，我还是觉得编程很难》\n\n原文链接：[入行 14 年，我还是觉得编程很难](https://www.piglei.com/articles/programming-is-still-hard-after-14-years/)\n作者：piglei\n这是清单的第 50 篇，也标记着整个“程序员阅读清单”系列完成了一半。考虑再三，决定奉上拙作一篇，我把这作为对自己的一个小小鼓励。\n\n编程难吗？不同的人会有不同的答案。十几岁时，还在上学的我觉得编程很难，各类算法、API 让人头晕目眩。我期望多年以后，大量的开发经验会让编程变得像吃饭一样简单。\n\n如今十几年过去，编程好像只是变简单了那么一丁点，距离“像吃饭一样简单”还差得很远。\n\n在这篇文章里，我分享了自己对编程这件事的一些思考与总结。比如：打造高效试错的环境至关重要，编程的精髓是“创造”，等等，希望能对你有所启发。","slug":"technology-article","published":1,"updated":"2025-04-16T06:10:43.514Z","_id":"cm9hzpk390000tzk8dwvfb8ca","comments":1,"layout":"post","photos":[],"content":"<blockquote>\n<p>转自<a href=\"https://www.piglei.com/articles/programmer-reading-list-1\">https://www.piglei.com/articles/programmer-reading-list-1</a> ,仅用于个人记录、学习，以下为原文：</p>\n</blockquote>\n<p>程序员们也许是互联网上最爱分享的群体之一，他们不仅喜欢开源自己写的软件，也爱通过写文章来分享知识。从业以来，我阅读过大量技术文章，其中不乏一些佳作。这些佳作中，有些凭借深刻的技术洞见令我深受启发，也有些以庖丁解牛般的精湛手法解释一项技术，让我读后大呼过瘾。</p>\n<p>作为“爱分享”的程序员中的一份子，我想当一次推荐人，将读过的好文章分享给大家。我给这个系列起名为《程序员阅读清单：我喜欢的 100 篇技术文章》。</p>\n<p>受限于本人的专业与兴趣所在，清单中的文章对以下几个领域有所偏重：程序员通识、软件工程、后端开发、技术写作、Python 语言、Go 语言。</p>\n<ol>\n<li><p>《开发者应学习的 10 件有关“学习”的事》</p>\n<p>原文链接：<a href=\"https://cacm.acm.org/research/10-things-software-developers-should-learn-about-learning/\">10 Things Software Developers Should Learn about Learning</a><br>作者：Neil C.C. Brown, Felienne F. J. Hermans, and Lauren E. Margulieux<br>学习对于任何一个人都很重要，对于软件开发者来说更是如此。这是一篇有关“学习”的科普类文章，从介绍人类记忆的工作原理开始，引出专家与新手的区别、间隔与重复的重要性等主题。</p>\n<p>文章中的一些观点相当具有启发性。比如“抽象和具象”：新知识对于初学者来说先是抽象的，然后通过大量例子将其具象化，最终彻底掌握后又重新变回抽象。又比如：做智力题和编程能力并没有关联性——这和我们认知中的“聪明人更会编程”大不相同。</p>\n</li>\n<li><p>《开发者如何管理自驱力》</p>\n<p>原文链接：<a href=\"https://mbuffett.com/posts/maintaining-motivation/\">Managing My Motivation, as a Solo Dev</a><br>作者：Marcus Buffett<br>作者是一名单兵作战的开发者，分享在管理自驱力方面的心得。文章提供了许多提高自驱力的切实可行的小点子，比如：</p>\n<p>开发一个通知机器人，当自己的软件有新订阅时通知自己——外力驱动；<br>每天的开发任务做到 90% 后停止，留到第二天完成——让新一天有盼头；<br>为了避免自己被“今日一事无成”的罪恶感击溃，先干点高产出的正事，再做其他。</p>\n</li>\n<li><p>《用 Go 语言分析 10 亿行数据，从 95 秒到 1.96 秒》</p>\n<p>原文链接：<a href=\"https://r2p.dev/b/2024-03-18-1brc-go/\">One Billion Row Challenge in Golang - From 95s to 1.96s</a><br>作者：Renato Pereira<br>一篇很不错的 Go 语言性能优化文章，涉及到这些知识点：文件读取性能优化、生产者消费者模型优化、channel 对比 mutex、自定义 hash 算法，等等。</p>\n<p>作者的思维模式、用到的工具链及优化手法非常规范，整个调优过程层层递进，文章行文也很工整。非常值得一读。</p>\n</li>\n<li><p>《在开发高质量软件上的花费值得吗？》</p>\n<p>原文链接：<a href=\"https://martinfowler.com/articles/is-quality-worth-cost.html\">Is High Quality Software Worth the Cost?</a><br>作者：Martin Fowler<br>对于大多数事物而言，如果想要追求更高的质量，必然要花费更多的成本，但对软件而言是否也是如此？作者 Martin Fowler 将软件质量分为两类：外在与内在。</p>\n<p>由于软件的内在质量很难被外人所感知，因此花在改善内在质量上的成本常被质疑。但实际上，在内在质量上投入并不增加成本，反而能降低整体花费。文章会通过详细的分析与对比告诉你为什么。</p>\n</li>\n<li><p>《错误抽象》</p>\n</li>\n</ol>\n<p>原文链接：<a href=\"https://sandimetz.com/blog/2016/1/20/the-wrong-abstraction\">The Wrong Abstraction</a><br>作者：Sandi Metz<br>如果你想要建造一栋楼房，假如地基不正，最终只能收获一栋歪歪扭扭的残次品。对编程而言，抽象便是地基，良好的抽象是一切美好事物的前提。</p>\n<p>这篇文章探讨了复用与抽象间的关系，作者犀利地指出一个事实：对“沉没成本”的恐惧常常孕育出错误抽象，而后者将引发项目质量恶化。</p>\n<p>一篇短小精悍的经典之作，不容错过。</p>\n<ol start=\"6\">\n<li>《谷歌技术写作课：编写有帮助的错误信息》</li>\n</ol>\n<p>原文链接：<a href=\"https://developers.google.com/tech-writing/error-messages\">Writing Helpful Error Messages</a><br>作者：谷歌工程团队<br>在软件开发中，错误信息是一种极为微妙的存在，糟糕的错误信息使人沮丧，时刻提醒着我们：“魔鬼藏在细节中”。</p>\n<p>对此，谷歌团队提供了一份关于错误信息的写作建议，包含：精确描述、提供解决方案、面向目标读者写作、用正确的语气写作，等等。我认为这应该成为每位程序员的必修课。</p>\n<ol start=\"7\">\n<li>《深入 Python 字典——一份“可探索”的解释》</li>\n</ol>\n<p>原文链接：<a href=\"https://just-taking-a-ride.com/inside_python_dict/chapter1.html\">Inside python dict — an explorable explanation</a><br>作者：Alexander Putilin<br>毫不夸张的说，网上介绍 Python 字典原理的文章多到泛滥。但这篇比较特别，它的特别主要体现在标题里的“可探索”上。</p>\n<p>在文章中，作者用一些 Python 代码模拟了字典数据类型。这些代码可在页面上点击执行，过程完全可视化。比如当字典中出现哈希冲突时，会有非常细致的动画，看起来妙趣横生。</p>\n<ol start=\"8\">\n<li>《愿意让自己显得愚蠢》</li>\n</ol>\n<p>原文链接：<a href=\"https://danluu.com/look-stupid/\">Willingness to look stupid</a><br>作者：Dan Luu<br>人们天生在意他人的看法，每个人都希望自己是别人眼里的“聪明人”，而不是“傻瓜”。不过，本文作者分享了一个不太常见的观点：做一些让自己显得愚蠢的事，利远大于弊。 比方说：提出愚蠢问题往往能获得对事物更深入的理解；用别人眼中的蠢办法学习，效果更好。</p>\n<ol start=\"9\">\n<li>《我们为什么坚持使用 Ruby on Rails》</li>\n</ol>\n<p>原文链接：<a href=\"https://about.gitlab.com/blog/2022/07/06/why-were-sticking-with-ruby-on-rails/\">Why we’re sticking with Ruby on Rails</a><br>作者：Sid Sijbrandij<br>著名的开源软件 GitLab 的大部分代码都在一个 Rails 单体项目里。GitLab 采用“模块化单体”架构，并未使用近年颇为流行的微服务架构。作者在文章中解释了 GitLab 这么做的原因：微服务架构徒增偶然复杂度，却对降低本质复杂度帮助不大。</p>\n<p>我很认同文章中的一句话：架构该为需求服务，而不是反过来。</p>\n<ol start=\"10\">\n<li>《ChatGPT 是互联网的一张模糊的 JPEG 图》</li>\n</ol>\n<p>原文链接：<a href=\"https://readwise.io/reader/shared/01gry4pcabx8kh4k1pkpf2e2pe/\">ChatGPT Is a Blurry JPEG of the Web</a><br>作者：Ted Chiang<br>这篇文章发表于大语言模型爆发前夜：GPT-3.5 已经问世，GPT-4 蓄势待发。虽然文章的主体论调偏（有理由的）消极，但是文章中的大量精彩类比，以及作者优美的文笔，令人击节称叹。也许你不一定认同作者关于大模型的观点，但你很难不被作者字里行间所流露出的深邃思考所打动。</p>\n<p>阅读这篇文章时，我曾多次感叹：“怎么写得这么好？”。我将页面拖动到顶部，仔细检查作者的名字——谜底揭开：“难怪，作者是特德·姜！”</p>\n<p>注：特德·姜，当代美国著名科幻作家，小说作品曾获得星云奖、雨果奖等多项大奖。<br>11. 《重新发明 Python notebook 时学到的教训》</p>\n<p>原文链接：<a href=\"https://marimo.io/blog/lessons-learned\">Lessons learned reinventing the Python notebook</a><br>作者：Akshay<br>一篇与产品设计有关的总结文章。文章主角是 marimo——一个类似 Jupyter 的 Python 笔记本软件。本文所涉及的内容包括：如何利用有向无环图让笔记总是可重现；为什么强约束的简单设计优于弱约束的复杂，等等。</p>\n<p>我很爱读这类文章，因为由技术人写的优秀产品设计经验，如珍珠般少见。</p>\n<ol start=\"12\">\n<li>《断点单步跟踪是一种低效的调试方法》</li>\n</ol>\n<p>原文链接： <a href=\"https://blog.codingnow.com/2018/05/ineffective_debugger.html\">断点单步跟踪是一种低效的调试方法</a><br>作者：云风<br>曾经的我以为编程像解数学题，不同人的解法或稍有区别，但终究殊途同归。然而最近两年，我发现编程更像是画画或写作，每个人信奉着自己的道。</p>\n<p>云风的这篇文章的标题，坦率来说有些骇人听闻，但仔细读过后，的确能感受到一种独特的编程智慧，一种专属于有着数十年经验的编程匠人的哲思。</p>\n<ol start=\"13\">\n<li>《作为“胶水”》</li>\n</ol>\n<p>原文链接：<a href=\"https://noidea.dog/glue\">Being Glue</a><br>作者：Tanya Reilly<br>软件工程师的日常工作除编码以外，还有大量其他事务，比如总结文档、优化工具链等，作者将这类事务统称为“胶水工作”。</p>\n<p>胶水工作看似不起眼，但对于项目的成败至关重要。本文指出了一个被人忽视的事实：承担更多胶水工作的有责任心的工程师，反而更不易晋升。针对这一点，作者提供了一些有用的建议。</p>\n<ol start=\"14\">\n<li>《拥抱苦差事》</li>\n</ol>\n<p>原文链接：<a href=\"https://jacobian.org/2021/apr/7/embrace-the-grind/\">Embrace the Grind</a><br>中文翻译：<a href=\"https://www.piglei.com/articles/embrace-the-grind-cn-translation/\">拥抱苦差事</a><br>作者：Jacob Kaplan-Moss<br>本文以一个魔术揭秘开头，引出作者如何通过完成“苦差事”，将整个开发团队拉出泥沼的故事；之间穿插着对程序员金句“懒惰是程序员的美德”的思考。</p>\n<p>重读这篇文章时，我想起最近在一本书上看到的另一句话，大意是这样的：“外行人做事时渴求及时反馈与成就感，而专业人士在一切变得乏味后，仍然继续向前。”</p>\n<ol start=\"15\">\n<li>《也许是时候停止推荐〈代码整洁之道了〉》</li>\n</ol>\n<p>原文链接：<a href=\"https://qntm.org/clean\">It’s probably time to stop recommending Clean Code</a><br>作者：qntm<br>作为一本经典书籍，《代码整洁之道》长期出现在各类编程书单中。但是，本文作者发现，这本出版于十几年前的书中的大量内容已经过时，其中的不少代码示例质量糟糕。</p>\n<p>在这篇文章中，本文作者对书中的部分 Java 代码片段进行了几乎称得上是“凶残”的 Code Review。文章观点有一定争议性，但也不乏道理。</p>\n<ol start=\"16\">\n<li>《我在编辑时考虑的事》</li>\n</ol>\n<p>原文链接：<a href=\"https://evaparish.com/blog/how-i-edit\">What I think about when I edit</a><br>作者：Eva Parish<br>作为一名专业的技术写作者，作者 Eva 常常帮其他人编辑技术文档。久而久之，她总结出了 9 条编辑建议，比如：明确文章主题、有理由的重复，等等。</p>\n<p>虽然文章中的部分建议更适用于英文写作场景，但我仍然很推荐它。因为你很容易发现，这篇文章虽然信息量大，但读来非常流畅、舒服——我想这就是优秀的“编辑”带来的魔力。</p>\n<ol start=\"17\">\n<li>《修复流行 Python 库的内存泄露问题》</li>\n</ol>\n<p>原文链接：<a href=\"https://www.paulsprogrammingnotes.com/2021/12/python-memory-leaks.html\">Fixing Memory Leaks In Popular Python Libraries</a><br>作者：Paul Brown<br>这篇文章的标题很大，但其实只是一篇短文，里面的 Python 示例代码不超过 10 行。</p>\n<p>在一次黑客马拉松活动中， 本文作者和同事一起定位了 py-amqp 库的一个内存泄露问题。提交 PR 后，他在 redis-py 等流行的库中发现了类似的情况。问题和 Python 中的 try&#x2F;except 语句块有关，迷惑性很强。</p>\n<ol start=\"18\">\n<li>《UI 设计原则》</li>\n</ol>\n<p>原文链接：<a href=\"http://bokardo.com/principles-of-user-interface-design/\">Principles of_ User Interface Design</a><br>作者：Joshua Porter<br>文章总结了 19 条 UI 设计原则，包括：清晰最重要、让用户有掌控感、渐进式披露，等等。我最喜欢的是第 17 条原则：“伟大的设计是隐形的”，它让我想起一些优秀的开源软件库。</p>\n<p>虽然名为 UI 设计，但这些原则并不只属于设计师，我认为每个人都可以从中受益。作为程序员，每当我们写下一个函数定义语句，实际就是在做一次 UI 设计。</p>\n<ol start=\"19\">\n<li>《你的数据库技能不是“锦上添花”》</li>\n</ol>\n<p>原文链接：<a href=\"https://renegadeotter.com/2023/11/12/your-database-skills-are-not-good-to-have.html\">Your Database Skills Are Not ‘Good to Have’</a><br>作者：Andrei Taranchenko<br>在文章中，作者 Andrei 先分享了一个 20 年前的故事：用 MySQL 巧妙完成了一项困难的业务需求。然后引出文章主题：如今大家对数据库技能的关注度不应该这么低。</p>\n<p>我很认同作者对于关系数据库和 ORM 等工具的观点。有时候，当项目遇到性能问题时，分明加个索引、优化下查询就能解决，许多人却大喊着：“快点，上缓存！换 DB！”——实在大可不必。</p>\n<ol start=\"20\">\n<li>《预估开发时间很难，但还是得做》</li>\n</ol>\n<p>原文链接：<a href=\"https://jacobian.org/2021/may/20/estimation/\">Software Estimation Is Hard. Do It Anyway.</a><br>作者：Jacob Kaplan-Moss<br>在软件开发中，“估时间”是一项令人头疼的事。我们都曾有过类似的经历：拍胸脯说 3 天搞定的任务，最后足足耗费了大半个月。</p>\n<p>到后来，“估时间”成了到底留 1 倍还是 2 倍 buffer 的无聊游戏。但正如本文的标题所言，预估开发时间虽然难，却不可避免。这篇文章（系列）提供了一些与之相关的技巧，相信可以给你一些启发。</p>\n<ol start=\"21\">\n<li>《人生短暂》</li>\n</ol>\n<p>原文链接：<a href=\"https://paulgraham.com/vb.html\">Life Is Short</a><br>作者：Paul Graham<br>人生很短，到底该如何花费自己的时间？传奇投资人、程序员 Paul Graham 在文章中给出了他的建议。总结起来，一共 3 条：尽你所能地避免 bullshit 类事务，比如无用会议、网上吵架；对重要的事情不拖拉，意识到有些东西不会永远停在原地等你；珍惜你所拥有的每一滴时间。</p>\n<p>从任何角度看，上面这些建议都称不上有多新奇。但是，作者通过真诚地分享自身经历和感受，给内容注入了不一样的灵魂。或许你会像我一样，读后能获得一些新的感悟。</p>\n<ol start=\"22\">\n<li>《有“产品意识”的软件工程师》</li>\n</ol>\n<p>原文链接：<a href=\"https://blog.pragmaticengineer.com/the-product-minded-engineer/\">The Product-Minded Software Engineer</a><br>作者：Gergely Orosz<br>从事程序员越久，你大概率会越来越频繁地听到一个词：“产品意识”。人人都说产品意识好，但是它看不见摸不着，到底是个什么东西？是指程序员该自己画线框图？还是说程序员应该写用户故事？</p>\n<p>本文作者以软件工程师的视角，对“产品意识”做了全面的解读。简单来说，产品意识就是关注产品、对产品拥有好奇心、对用户拥有同理心；有产品意识的人在做技术方案时，不光思考工程角度，更能靠全局的“产品+工程”视角思考决策。</p>\n<p>“产品意识”——工程师们最为强大的思维杠杆之一。</p>\n<ol start=\"23\">\n<li>《Python 的 range 不是迭代器》</li>\n</ol>\n<p>原文链接：<a href=\"https://treyhunner.com/2018/02/python-range-is-not-an-iterator/\">Python: range is not an iterator</a><br>作者：Trey Hunner<br>range 是 Python 语言中最常用的内置对象之一，功能是生产一段数字序列，比如 range(10) &#x3D;&gt; 0, 1, …, 9。作为循环语句中被迭代的常客，range 常被误认为是一种迭代器（iterator）。但是，正如文章标题所说，虽然可被迭代，但 range 却并不是迭代器。</p>\n<p>可如果不是迭代器的话，range 究竟是什么？在文章中，作者用精要的说明和代码片段做出了解答。看起来像咬文嚼字，实则是相当重要的 Python 基础概念。</p>\n<p>😊 有关迭代器和可迭代对象这个主题，我也很推荐另一篇自己写的内容：<a href=\"https://www.piglei.com/book/ch06_loop.html\">《Python工匠》第六章 6.1.1 “迭代器与可迭代对象</a>”。</p>\n<ol start=\"24\">\n<li>《有关 TLS&#x2F;SSL 证书的一切》</li>\n</ol>\n<p>原文链接：<a href=\"https://www.kawabangga.com/posts/5330\">有关 TLS&#x2F;SSL 证书的一切</a><br>作者：laixintao<br>一篇和证书有关的科普文。</p>\n<p>虽是科普，但这篇和其他科普文章不太一样。你除了能读到一些轻松愉快的小故事，还会被一些不知从哪里冒出来的 shell 命令和大段伪代码“突然袭击”。看似不协调的素材，在作者的精心编排下，却如交响乐团般演奏出一段优美流畅的乐章，让人读来如沐春风。</p>\n<ol start=\"25\">\n<li>《让困难的事情变容易》</li>\n</ol>\n<p>原文链接：<a href=\"https://jvns.ca/blog/2023/10/06/new-talk--making-hard-things-easy/\">New talk: Making Hard Things Easy</a><br>作者：Julia Evans<br>也许是胡说八道，但我还是想说：技术人普遍有一种“复杂崇拜”情结。实践一门技术，人们常常会踩进许多坑、遇到很多困难，但大部分人对此绝口不提，仿佛抱怨一门技术过于复杂，会显得自己能力不足似的。</p>\n<p>尤其，当这些技术是大家口中公认的“基础技术”（比如 DNS、HTTP）时，更是如此。技术人接受复杂、理解复杂，最终认同复杂为理所当然。</p>\n<p>正因如此，我很喜欢 Julia Evans 的这个分享。它指出在许多所谓的“基础技术”背后，隐藏着太多难以掌握的复杂元素。不少人都会在它们上面栽跟斗，但并非所有人都会站出来，改善现状。</p>\n<p>所以，我们需要让复杂事物变得更容易。针对这一点，文章挑选了几种有代表性的技术，比如 DNS、BASH、SQL 等，提供了切实可行的建议，包括：分享有用的工具和参考文档、从大的功能列表中筛选你真正使用的、展示不可见的内容，等等。</p>\n<ol start=\"26\">\n<li>《The Hiring Post》</li>\n</ol>\n<p>原文链接：<a href=\"https://sockpuppet.org/blog/2015/03/06/the-hiring-post/\">The Hiring Post</a><br>作者：Thomas &amp; Erin Ptacek<br>作者在一家名为 Matasano 的安全公司任职。一天，他接到一份报告，其中描述了一种针对 DSA 的新型攻击手法。由于步骤复杂、条件苛刻，作者认为这种攻击方式有些不切实际，难以实施（时间以月为单位计算）。不过，他还是把报告分享到了团队中（忘了提及“不切实际”）。</p>\n<p>两天后，团队里一位名叫 Alex 的新人找到他，说自己完成了一个可工作的漏洞利用程序。</p>\n<p>Alex 非常优秀，但是，如果把时间拨回几年前，他根本不会被招进公司。他的简历平平无奇，而当时公司依赖简历和面试来招聘人才。直到后来，Matasano 公司优化了招聘策略，才挖掘出越来越多像 Alex 的人才。</p>\n<p>接着开篇的小故事，作者探讨了技术行业在人才招聘方面的一些问题。比方说，许多能力出众的候选人常因招聘环节不合理而无法通过面试。与之相对的是，一些善于面试、对抽象概念总能侃侃而谈的人，却能轻松拿到 offer。针对这些问题，文章给出了一些建议，比如：让候选人热身、使用接近工作场景的测试问题，等等。值得一读。</p>\n<ol start=\"27\">\n<li>《13 年后，我如何用 Go 写 HTTP 服务》</li>\n</ol>\n<p>原文链接：<a href=\"https://grafana.com/blog/2024/02/09/how-i-write-http-services-in-go-after-13-years/\">How I write HTTP services in Go after 13 years</a><br>作者：Mat Ryer<br>一篇 Go 语言方面的最佳实践类文章，只涉及标准库中的 HTTP 基建，不涉及其他第三方 Web 框架或库。作者有十余年的 Go 编程经验，经验丰富。</p>\n<p>文章除了展示具体的代码编写与组织技巧，也谈了一些“为什么如此处理”背后的设计考量，包括：长参数列表的函数、请求编解码处理、用闭包结合 http.Handler、E2E 测试和单元测试，等等。透过这些考量，能感受到作者多年经验与智慧的沉淀。</p>\n<ol start=\"28\">\n<li>《Rust std fs 比 Python 更慢！？》</li>\n</ol>\n<p>原文链接：<a href=\"https://xuanwo.io/2023/04-rust-std-fs-slower-than-python/\">Rust std fs slower than Python!? No, it’s hardware!</a><br>作者：Xuanwo<br>一篇精彩的短篇侦探小说。</p>\n<p>有一天，Xuanwo 接到用户上报一个奇怪的案件：一段 Rust 实现的 Python SDK 中的文件操作代码，执行起来却比原生 Python 代码更慢。一通排查后，更离谱的事件出现，不止 Rust，甚至同样的 C 代码也比 Python 更慢。但这怎么可能，Python 语言解释器本身都是用 C 写的呀？！</p>\n<p>就像任何一篇精彩的侦探小说一样，最后，悬疑气氛推到最高点，凶手身份被揭露时，你会自言自语道：“意料之外，情理之中”。</p>\n<ol start=\"29\">\n<li>《选择乏味的技术》</li>\n</ol>\n<p>原文链接：<a href=\"https://boringtechnology.club/\">Choose Boring Technology</a><br>作者：Dan McKinley<br>作为技术人员，我们喜欢尝试新技术，这让我们感到快乐。但许多时候，比起闪闪发光的新玩意，“乏味”的技术才是更优的选择。</p>\n<p>当我们觉得一项技术“乏味”、痛恨它时，根本原因是我们过于了解它，无法从它身上获得任何新鲜感（比如 Django 之于我）。但别忘了，这同时也意味着我们对这项技术的每个坑都了如指掌。在项目中采用它，能让我们更容易专注在核心业务问题上。</p>\n<p>很喜欢本文里的“创新代币”比喻。“创新代币”是一种用来处理创造性任务的有限能力。假设你一共拥有 3 枚“创新代币”，你会如何花费它们？也许，和某个新奇的技术栈比起来，产品核心功能上的创新，更需要那枚代币。</p>\n<ol start=\"30\">\n<li>《Python 3.10 中的结构化模式匹配》</li>\n</ol>\n<p>原文链接：<a href=\"https://benhoyt.com/writings/python-pattern-matching/\">Structural pattern matching in Python 3.10</a><br>作者：Ben Hoyt<br>在 3.10 版本中，Python 新增了“结构化模式匹配”语法（ match … case）。因为看上去和 switch … case 语句十分相似，不少人认为“结构化模式匹配”就是 switch 换皮。但事实上，它和 switch 语句有着比较大的差异，用作者的话讲：它更适合被当成“迭代式解包”来理解。</p>\n<p>本文发布于 2021 年（Python 3.10 发布前夕），其中简单介绍了“结构化模式匹配”的功能，并列举了一些它最适用的代码场景。在总结中，针对该语法的未来，作者持略为悲观的复杂态度。</p>\n<p>和“结构化模式匹配”相关的文章中，除几篇 PEP 之外，我认为这是最值得阅读的一篇。</p>\n<ol start=\"31\">\n<li>《你想要的是模块，不是微服务》</li>\n</ol>\n<p>原文链接：<a href=\"https://blogs.newardassociates.com/blog/2023/you-want-modules-not-microservices.html\">You Want Modules, Not Microservices</a><br>作者：Neward &amp; Associates<br>文章的开头很有意思。从一篇介绍微服务的文章中，作者摘抄出了微服务架的 10 条优势。随后，他逐条分析这些优势，发现其中至少有一半，可以原封不动地套用在“模块”上。</p>\n<p>“只关注一小块代码”、“独立开发”、“版本化”、“独立发布”——以上能力模块无一不具备。对了，此处谈及的“模块”，就是那个诞生于 20 世纪 70 年代的技术概念，也是如今所有编程语言的标配能力。</p>\n<p>分析完模块和微服务的相似性后，文章继续层层推进，试着回答一个重要问题：微服务架构解决的本质矛盾究竟是什么？</p>\n<ol start=\"32\">\n<li>《我不喜欢 Go 语言默认的 HTTP Handlers》</li>\n</ol>\n<p>原文链接：<a href=\"https://preslav.me/2022/08/09/i-dont-like-golang-default-http-handlers/\">I Don’t Like Go’s Default HTTP Handlers</a><br>作者：Preslav Rachev<br>在编写 HTTP handler 函数时，作者意识到这类函数存在一个设计问题，它会促使人们写出有 bug 的代码。该问题大多数 Go 开发者都知道（也可能犯过）：回写响应体后忘记 return，导致代码错误地继续执行。为了优化它，作者提出了一种思路。</p>\n<p>技术层面上，这是一篇非常简单的文章，最终方案也无非是“多封装一层”而已。不过，我喜欢作者对细节的关注，也认可文章的价值观：通过优化工具与环境，来杜绝人类犯错的可能性。</p>\n<ol start=\"33\">\n<li>《对人类更友好的“超时”与“取消”》</li>\n</ol>\n<p>原文链接：<a href=\"https://vorpus.org/blog/timeouts-and-cancellation-for-humans/\">Timeouts and cancellation for humans</a><br>作者：Nathaniel J. Smith<br>做网络编程时，“超时配置”是一个非常重要但又常常被忽视的细节。不当的超时配置就像是鞋底里的一粒沙，开始你甚至觉察不到它的存在，但随着时间累积，沙子会磨破脚底，产生巨大危害。</p>\n<p>“作为最常见的超时配置方式，为什么 get(url, timeout&#x3D;10) 这类 API 不够好？”</p>\n<p>从这个问题出发，作者列举并分析了一些常见的超时 API 设计，最后详细介绍了 trio 库的相关功能。作者认为它是一种“对人类更友好”的设计。</p>\n<ol start=\"34\">\n<li>《20 年软件工程师生涯，学到 20 件事》</li>\n</ol>\n<p>原文链接：<a href=\"https://www.simplethread.com/20-things-ive-learned-in-my-20-years-as-a-software-engineer/\">20 Things I’ve Learned in my 20 Years as a Software Engineer</a><br>作者：Justin Etheredge<br>从业 20 年后，软件工程师 Justin Etheredge 回顾自己的职业生涯，总结出了 20 条经验。这些经验短小精悍、富有洞见，我读后对其中大部分都很有共鸣。</p>\n<p>比如其中的第 5 条：“最好的工程师像设计师一样思考”。有许多次，我在一个问题卡住，苦思冥想，寻不到最优解。但当我转换思路，学着像设计师一样站在用户（或调用方、依赖方）角度思考时，答案呼之欲出。再比如其中的第 9 条：“问‘为什么‘，永远不嫌多”——旺盛的好奇心和求知欲，正是助我们精进技术的最佳催化剂。</p>\n<ol start=\"35\">\n<li>《为什么你的 mock 不工作》</li>\n</ol>\n<p>原文链接：<a href=\"https://nedbatchelder.com/blog/201908/why_your_mock_doesnt_work.html\">Why your mock doesn’t work</a><br>作者：Ned Batchelder<br>用 Python 写测试代码时，经常会用到 mock 模块。初次接触 mock，不少人都遇到过 mock 不生效的问题。明明用 mock.patch(…) 替换了模块，代码执行时，引用到的却依旧是原始值。</p>\n<p>Ned Batchelder 的这篇文章细致解释了“mock 不生效”问题。因为写的是个常见问题，所以文章中的知识点对你来说可能并不新鲜。但即便如此，我还是很推荐它。文章结构清晰、措辞准确，里面的每张示意图和每段代码，都出现得恰到好处。哪怕不为学知识，略读一遍后，也让人心情舒畅。在技术写作方面，能从中学到不少。</p>\n<p>同时推荐作者的另一篇文章：《Python 的名字和值》，内容与 mock 这篇有关联。</p>\n<ol start=\"36\">\n<li>《实用的 Go：来自真实世界的编写可维护 Go 程序的建议》</li>\n</ol>\n<p>原文链接：<a href=\"https://dave.cheney.net/practical-go/presentations/qcon-china.html\">Practical Go: Real world advice for writing maintainable Go programs</a><br>作者：Dave Cheney<br>互联网上，“Go 代码可读性“方面的资料不算太多，这篇或许是你能找到的最好的之一。</p>\n<p>本文包含数十条与提升 Go 代码可维护性有关的建议，覆盖从变量命名到 API 设计等多项主题，十分全面。我喜欢它最重要的原因，除了其写作质量上佳之外，还在于作者为每条建议精心搭配了示例代码，这些代码使得文章内容非常容易阅读，知识很好消化。一篇干货满满的经典之作，值得每位 Go 工程师阅读。</p>\n<ol start=\"37\">\n<li>《编写系统软件：代码注释》</li>\n</ol>\n<p>原文链接：<a href=\"http://antirez.com/news/124\">Writing system software: code comments.</a><br>作者：antirez<br>在“代码注释”这个主题上，Redis 作者 antirez 的这篇文章是我的最爱之一。通过整理 redis 项目里的所有注释，antirez 将注释一共划分成 9 类，各自承担不同功用。</p>\n<p>本文的独到之处，在于立足“用注释解释代码中的 ‘why？’”这条共识上，重点介绍了“教学性&#x2F;指引性注释”这类不太常规的注释。文章提到，指引性注释是 redis 中数量最多的注释，充斥整个项目，人们认为 Redis 的源码可读性佳，指引性注释功不可没。</p>\n<p>某种程度上，这篇文章影响了我的编码习惯。再次回顾它，脑海闪过那句人们重复提及的老话： “代码主要是写给人看的，顺便被计算机执行。”</p>\n<ol start=\"38\">\n<li>《编写易于删除，而不是易于扩展的代码》</li>\n</ol>\n<p>原文链接：<a href=\"https://programmingisterrible.com/post/139222674273/write-code-that-is-easy-to-delete-not-easy-to\">Write code that is easy to delete, not easy to extend.</a><br>作者：tef<br>程序员们有一条朴素的共识：“重复代码坏，复用代码好“。这篇文章站在另一个角度，反思了这条共识。人们习惯于讨论复用的好处，却往往忽视了它的缺点：一段代码被复用越多，意味着它与更多的使用方产生了耦合关系，自然也导致它更难被修改。</p>\n<p>代码写出来后便需要被维护，而业务发展又会让旧代码不断过时。以这个为前提，重新思考软件项目的可维护性，会发现“易于删除”变成了一个形容代码的好特征。这篇文章或许写得没那么易读，但个中观点确能引发思考。</p>\n<ol start=\"39\">\n<li>《如何提出好问题》</li>\n</ol>\n<p>原文链接：<a href=\"https://jvns.ca/blog/good-questions/\">How to ask good questions</a><br>作者：Julia Evans<br>在人际沟通中，“善于提问”是一种顶级技能（ 评级：SSR✨）。在关键时刻提出一个好问题，能让沟通事半功倍，事情水到渠成。</p>\n<p>Julia Evans 的这篇文章，囊括了与提问有关的若干条经验和技巧，比如：向对方陈述并确认你所知道的现状；选择向谁提问；通过提问让不够显而易见的概念变得明确，等等。文章不止内容好，写作风格也是一如既往的友善、清晰易读，强力推荐。</p>\n<ol start=\"40\">\n<li>《每天写代码》</li>\n</ol>\n<p>原文链接：<a href=\"https://johnresig.com/blog/write-code-every-day/\">Write Code Every Day</a><br>作者：John Resig<br>程序员 John Resig （JQuery 库作者） 遇上了一件烦心事。他想完成一些兴趣项目（side projects），却发现在保证全职工作效率的前提下，很难推进。他常在每个周末疯狂赶工，力求完成更多，但压力和焦虑感总是爆棚，状态难以维系。</p>\n<p>有一天，在他人启发下，John 决定换一种策略：每天写代码。原本用整个周末投入兴趣项目，如今拆分到每一天，花不少于 30 分钟编程。半年后，他发现新策略产生了神奇的效果，他取得了超多成果：开发多个新网站、重写若干个框架、完成大量新模块。更重要的是，曾经困扰他的焦虑感，也烟消云散。</p>\n<p>我很喜欢这篇文章，它是程序员版本的“日拱一卒”，John 也是一位极好的榜样。</p>\n<ol start=\"41\">\n<li>《抽象泄露法则》</li>\n</ol>\n<p>原文链接：<a href=\"https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/\">The Law of Leaky Abstractions</a><br>作者：Joel Spolsky<br>用 AI，花 5 分钟开发一个新功能。验证时，却发现新功能在某个特殊情况下无法正常工作。为了解决这个 bug，你只能逐行排查调试。等修复好问题，一看表， 1 个小时过去了。</p>\n<p>上面的经历对你来说是否有些似曾相识？早在 2002 年，程序员 Joel Spolsky 就敏锐地发现了这类现象，并将它们总结为：“抽象泄露法则”。软件世界是一层抽象套着另一层的千层饼，就好像 HTTP 协议下有 TCP、TCP 下有 IP，每一层抽象都声称自己是完美的：“你无需关注在我之下的任何细节”。</p>\n<p>但事实却是，所有抽象必定泄露。而当抽象泄露时，就像要从 AI 的 1000 行代码里找到那个错误——事情非常棘手，但我们别无选择。</p>\n<ol start=\"42\">\n<li>《如何设计一个好的 API 及其重要性》</li>\n</ol>\n<p>原文链接：<a href=\"https://fwdinnovations.net/whitepaper/APIDesign.pdf\">How to Design a Good API and Why it Matters</a><br>演讲视频：<a href=\"https://www.youtube.com/watch?v=aAb7hSCtvGw&ab_channel=GoogleTechTalks\">How To Design A Good API and Why it Matters - Youtube</a><br>作者：Joshua Bloch<br>这份资料来自 Joshua Bloch（时任首席 Java 架构师）在 Google 公司的内部演讲。虽然距今已 17 年，但它读起来却没有任何过时的感觉，对现代软件开发仍具备指导价值。</p>\n<p>Joshua 系统性地阐述了 API 设计的方方面面。包括：</p>\n<p>带着怀疑的眼光收集用户用例（use cases）；<br>写代码前，先用最简单的文字描述 API（一页纸以内），并和相关人员讨论完善；<br>如果迟疑于是否提供某个功能，就先不要提供（后续新增比删除要简单得多）；<br>API 应当和它所被使用的平台和谐共存，比如 SDK 不应被原样从一门语言搬运到另一门。<br>如果你之前从未深入思考过 API 设计，读读看，它极有可能改变你未来开发软件的方式。</p>\n<ol start=\"43\">\n<li>《我构建软件的原则+实践“让无效状态不可表示”》</li>\n</ol>\n<p>原文链接：<a href=\"https://kevinmahoney.co.uk/articles/my-principles-for-building-software/\">My Principles for Building Software</a><br>原文链接：<a href=\"https://kevinmahoney.co.uk/articles/applying-misu/\">Applying “Make Invalid States Unrepresentable”</a><br>作者：Kevin Mahoney<br>关于软件开发原则的文章有很多，这篇的特别之处在于，作者 Kevin 着重强调了数据对于软件设计的影响。</p>\n<p>比如，Kevin 提出在设计时，应当优先考虑数据结构而不是代码，因为前者更为重要。正如《人月神话》的作者 Fred Brooks 曾经说过：“如果提供了程序流程图，而没有表数据，我仍然会很迷惑。而给我看表数据，往往就不再需要流程图，程序结构是非常清晰的。”</p>\n<p>Kevin 提到的另一条原则是“让无效状态不可表示”。软件的业务逻辑中，难免会存在一些“无效状态”。为了处理它们，代码常需要做一些额外工作。然而，通过调整数据结构设计，使得数据层无法表现无效状态后，程序复杂度就可以降低。《实践“让无效状态不可表示”》中有本原则的一个具体应用案例。</p>\n<p>除了上述原则外，文章中的其他原则，比如“关注基础概念而不是具体技术”、“避免用局部简单换取全局复杂”，等等，都充满智慧。</p>\n<ol start=\"44\">\n<li>《不，不是编译器的问题，从来都不是》</li>\n</ol>\n<p>原文链接：<a href=\"https://blog.plover.com/2017/11/12/\">No, it is not a compiler error. It is never a compiler error.</a><br>作者：Mark Dominus<br>一段代码的正常运行，依赖着无数隐藏在其背后的组件和库。当程序出现 bug 时，程序员不在第一时间怀疑自己的代码，而是去质疑那些久经考验的依赖库，从来不是一个明智的选择。正如文章的标题所言：“从来都不是编译器的问题。”</p>\n<p>然而，“编译器”也是由人编写，并非真的永远正确。“编译器”一旦犯错，问题的诡异程度常常会出乎意料。在文章的后半段，常年信奉“编译器不出错”的作者，还真就遇上了一次“编译器错误”。</p>\n<ol start=\"45\">\n<li>《关于在除夕前一天换了一个洗衣机的故事》</li>\n</ol>\n<p>原文链接：<a href=\"https://wklken.me/posts/2023/01/23/about-buy-a-new-washing-machine-before-chinese-new-year.html\">关于在除夕前一天换了一个洗衣机的故事</a><br>作者：wklken<br>一名程序员家中服役 6 年的洗衣机坏了，不能脱水。因为之前花大价钱换过一次排水泵，他以为这次是旧病复发，便决定置换一台新机器。可没想到的是，新洗衣机装好后同样不能脱水。</p>\n<p>本来只是一件普普通通的糟心事，但作者显然不这么想，他在文章后半居然从洗衣机转向了软件开发。从故障码到说明书，从 debug 到选品牌，真是很有意思。相当好的观察与思考。</p>\n<ol start=\"46\">\n<li>《你的函数是什么颜色？》</li>\n</ol>\n<p>原文链接：<a href=\"https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/\">What Color is Your Function?</a><br>作者：Bob Nystrom<br>有人发明了一门编程语言，它非常特别，因为它的函数以颜色来区分类型。函数一共有两种颜色：“红色”和“蓝色”。函数的颜色不止影响外观，更会影响你使用它们的方式，比方说：红函数只能调用红函数，不能调用蓝函数。</p>\n<p>虽然以上面这略为不知所云的内容开场，但这篇文章讨论的主题实际上相当严肃。在文章中，作者 Bob 分享了自己对异步编程风格一些思考（猜猜函数的“颜色”代表什么？），从回调、Promise，到线程和 await&#x2F;async，均有涉及。</p>\n<p>除了观点鞭辟入里，文章的写作质量也相当高。严肃内容间不时穿插一点作者的小幽默。对于爱好异步编程的人来说，这是一篇不可错过的佳作。</p>\n<ol start=\"47\">\n<li>《健康的文档》</li>\n</ol>\n<p>原文链接：<a href=\"https://vadimkravcenko.com/shorts/proper-documentation/\">Healthy Documentation</a><br>作者：Vadim Kravcenko<br>程序员们是一个奇怪的群体，他们对许多事物持有矛盾态度，“文档”就是其中之一。</p>\n<p>作为消费者时，每位程序员都希望自己所使用的每个 API、函数，接手的每个系统都能找到详尽而准确的文档。而当他摇身一变，变成生产者时，却很少愿意在“写文档”这件事上投入精力——常常是“宁编百行码，不写一行字”。</p>\n<p>然而，文档对于软件开发的重要性毋庸置疑。正如作者提到：“每个未被记录下的东西，都等同于一种资源的浪费，会在未来带来麻烦。”通过写文档，我们将自己脑中的知识具象化，从而在未来帮助到其他人。对于个人而言，文档不仅是一种学习、交流和分享知识的工具，也是一种建立个人影响力的捷径。而对于团队来说，如果每位成员都重视文档的价值，乐于编写清晰、可靠的文档来替代无休止的会议，那么这种“文档优先”的氛围，对于团队的长期发展大有裨益。</p>\n<ol start=\"48\">\n<li>《如何像人类一样做代码评审》</li>\n</ol>\n<p>原文链接：<a href=\"https://mtlynch.io/human-code-reviews-1/\">How to Do Code Reviews Like a Human (Part One)</a><br>作者：Micheal Lynch<br>一篇关于代码评审的文章，里面涵盖了许多入门和进阶经验，包括：别把评审时间花在风格与样式问题上，让工具来代劳；评论应该以“请求”的口吻，而不是“命令”；评审不是只找缺点，对于好代码应该不吝赞美，等等。</p>\n<p>强烈推荐给每一位需要参与代码评审的程序员。</p>\n<ol start=\"49\">\n<li>《关于 Python 3.13 你需要了解的一切 - JIT 和 GIL》</li>\n</ol>\n<p>原文链接：<a href=\"https://drew.silcock.dev/blog/everything-you-need-to-know-about-python-3-13/\">Everything you need to know about Python 3.13 – JIT and GIL went up the hill</a><br>作者：Drew Silcock<br>Python 3.13 版本引入了许多激动人心的改动，比如基于 “copy-and-patch”技术的即时编译（JIT），以及终于去掉了全局解释器锁（GIL）的“自由线程”模式，等等。</p>\n<p>Drew 的这篇文章介绍了以上改动。文章的写作风格非常友好，内容也很全面。既有零基础的概念科普，也有实际的代码实验与 benchmark 环节。知识多，篇幅却控制得恰到好处，推荐阅读。</p>\n<ol start=\"50\">\n<li>《入行 14 年，我还是觉得编程很难》</li>\n</ol>\n<p>原文链接：<a href=\"https://www.piglei.com/articles/programming-is-still-hard-after-14-years/\">入行 14 年，我还是觉得编程很难</a><br>作者：piglei<br>这是清单的第 50 篇，也标记着整个“程序员阅读清单”系列完成了一半。考虑再三，决定奉上拙作一篇，我把这作为对自己的一个小小鼓励。</p>\n<p>编程难吗？不同的人会有不同的答案。十几岁时，还在上学的我觉得编程很难，各类算法、API 让人头晕目眩。我期望多年以后，大量的开发经验会让编程变得像吃饭一样简单。</p>\n<p>如今十几年过去，编程好像只是变简单了那么一丁点，距离“像吃饭一样简单”还差得很远。</p>\n<p>在这篇文章里，我分享了自己对编程这件事的一些思考与总结。比如：打造高效试错的环境至关重要，编程的精髓是“创造”，等等，希望能对你有所启发。</p>\n","cover":false,"excerpt":"","more":"<blockquote>\n<p>转自<a href=\"https://www.piglei.com/articles/programmer-reading-list-1\">https://www.piglei.com/articles/programmer-reading-list-1</a> ,仅用于个人记录、学习，以下为原文：</p>\n</blockquote>\n<p>程序员们也许是互联网上最爱分享的群体之一，他们不仅喜欢开源自己写的软件，也爱通过写文章来分享知识。从业以来，我阅读过大量技术文章，其中不乏一些佳作。这些佳作中，有些凭借深刻的技术洞见令我深受启发，也有些以庖丁解牛般的精湛手法解释一项技术，让我读后大呼过瘾。</p>\n<p>作为“爱分享”的程序员中的一份子，我想当一次推荐人，将读过的好文章分享给大家。我给这个系列起名为《程序员阅读清单：我喜欢的 100 篇技术文章》。</p>\n<p>受限于本人的专业与兴趣所在，清单中的文章对以下几个领域有所偏重：程序员通识、软件工程、后端开发、技术写作、Python 语言、Go 语言。</p>\n<ol>\n<li><p>《开发者应学习的 10 件有关“学习”的事》</p>\n<p>原文链接：<a href=\"https://cacm.acm.org/research/10-things-software-developers-should-learn-about-learning/\">10 Things Software Developers Should Learn about Learning</a><br>作者：Neil C.C. Brown, Felienne F. J. Hermans, and Lauren E. Margulieux<br>学习对于任何一个人都很重要，对于软件开发者来说更是如此。这是一篇有关“学习”的科普类文章，从介绍人类记忆的工作原理开始，引出专家与新手的区别、间隔与重复的重要性等主题。</p>\n<p>文章中的一些观点相当具有启发性。比如“抽象和具象”：新知识对于初学者来说先是抽象的，然后通过大量例子将其具象化，最终彻底掌握后又重新变回抽象。又比如：做智力题和编程能力并没有关联性——这和我们认知中的“聪明人更会编程”大不相同。</p>\n</li>\n<li><p>《开发者如何管理自驱力》</p>\n<p>原文链接：<a href=\"https://mbuffett.com/posts/maintaining-motivation/\">Managing My Motivation, as a Solo Dev</a><br>作者：Marcus Buffett<br>作者是一名单兵作战的开发者，分享在管理自驱力方面的心得。文章提供了许多提高自驱力的切实可行的小点子，比如：</p>\n<p>开发一个通知机器人，当自己的软件有新订阅时通知自己——外力驱动；<br>每天的开发任务做到 90% 后停止，留到第二天完成——让新一天有盼头；<br>为了避免自己被“今日一事无成”的罪恶感击溃，先干点高产出的正事，再做其他。</p>\n</li>\n<li><p>《用 Go 语言分析 10 亿行数据，从 95 秒到 1.96 秒》</p>\n<p>原文链接：<a href=\"https://r2p.dev/b/2024-03-18-1brc-go/\">One Billion Row Challenge in Golang - From 95s to 1.96s</a><br>作者：Renato Pereira<br>一篇很不错的 Go 语言性能优化文章，涉及到这些知识点：文件读取性能优化、生产者消费者模型优化、channel 对比 mutex、自定义 hash 算法，等等。</p>\n<p>作者的思维模式、用到的工具链及优化手法非常规范，整个调优过程层层递进，文章行文也很工整。非常值得一读。</p>\n</li>\n<li><p>《在开发高质量软件上的花费值得吗？》</p>\n<p>原文链接：<a href=\"https://martinfowler.com/articles/is-quality-worth-cost.html\">Is High Quality Software Worth the Cost?</a><br>作者：Martin Fowler<br>对于大多数事物而言，如果想要追求更高的质量，必然要花费更多的成本，但对软件而言是否也是如此？作者 Martin Fowler 将软件质量分为两类：外在与内在。</p>\n<p>由于软件的内在质量很难被外人所感知，因此花在改善内在质量上的成本常被质疑。但实际上，在内在质量上投入并不增加成本，反而能降低整体花费。文章会通过详细的分析与对比告诉你为什么。</p>\n</li>\n<li><p>《错误抽象》</p>\n</li>\n</ol>\n<p>原文链接：<a href=\"https://sandimetz.com/blog/2016/1/20/the-wrong-abstraction\">The Wrong Abstraction</a><br>作者：Sandi Metz<br>如果你想要建造一栋楼房，假如地基不正，最终只能收获一栋歪歪扭扭的残次品。对编程而言，抽象便是地基，良好的抽象是一切美好事物的前提。</p>\n<p>这篇文章探讨了复用与抽象间的关系，作者犀利地指出一个事实：对“沉没成本”的恐惧常常孕育出错误抽象，而后者将引发项目质量恶化。</p>\n<p>一篇短小精悍的经典之作，不容错过。</p>\n<ol start=\"6\">\n<li>《谷歌技术写作课：编写有帮助的错误信息》</li>\n</ol>\n<p>原文链接：<a href=\"https://developers.google.com/tech-writing/error-messages\">Writing Helpful Error Messages</a><br>作者：谷歌工程团队<br>在软件开发中，错误信息是一种极为微妙的存在，糟糕的错误信息使人沮丧，时刻提醒着我们：“魔鬼藏在细节中”。</p>\n<p>对此，谷歌团队提供了一份关于错误信息的写作建议，包含：精确描述、提供解决方案、面向目标读者写作、用正确的语气写作，等等。我认为这应该成为每位程序员的必修课。</p>\n<ol start=\"7\">\n<li>《深入 Python 字典——一份“可探索”的解释》</li>\n</ol>\n<p>原文链接：<a href=\"https://just-taking-a-ride.com/inside_python_dict/chapter1.html\">Inside python dict — an explorable explanation</a><br>作者：Alexander Putilin<br>毫不夸张的说，网上介绍 Python 字典原理的文章多到泛滥。但这篇比较特别，它的特别主要体现在标题里的“可探索”上。</p>\n<p>在文章中，作者用一些 Python 代码模拟了字典数据类型。这些代码可在页面上点击执行，过程完全可视化。比如当字典中出现哈希冲突时，会有非常细致的动画，看起来妙趣横生。</p>\n<ol start=\"8\">\n<li>《愿意让自己显得愚蠢》</li>\n</ol>\n<p>原文链接：<a href=\"https://danluu.com/look-stupid/\">Willingness to look stupid</a><br>作者：Dan Luu<br>人们天生在意他人的看法，每个人都希望自己是别人眼里的“聪明人”，而不是“傻瓜”。不过，本文作者分享了一个不太常见的观点：做一些让自己显得愚蠢的事，利远大于弊。 比方说：提出愚蠢问题往往能获得对事物更深入的理解；用别人眼中的蠢办法学习，效果更好。</p>\n<ol start=\"9\">\n<li>《我们为什么坚持使用 Ruby on Rails》</li>\n</ol>\n<p>原文链接：<a href=\"https://about.gitlab.com/blog/2022/07/06/why-were-sticking-with-ruby-on-rails/\">Why we’re sticking with Ruby on Rails</a><br>作者：Sid Sijbrandij<br>著名的开源软件 GitLab 的大部分代码都在一个 Rails 单体项目里。GitLab 采用“模块化单体”架构，并未使用近年颇为流行的微服务架构。作者在文章中解释了 GitLab 这么做的原因：微服务架构徒增偶然复杂度，却对降低本质复杂度帮助不大。</p>\n<p>我很认同文章中的一句话：架构该为需求服务，而不是反过来。</p>\n<ol start=\"10\">\n<li>《ChatGPT 是互联网的一张模糊的 JPEG 图》</li>\n</ol>\n<p>原文链接：<a href=\"https://readwise.io/reader/shared/01gry4pcabx8kh4k1pkpf2e2pe/\">ChatGPT Is a Blurry JPEG of the Web</a><br>作者：Ted Chiang<br>这篇文章发表于大语言模型爆发前夜：GPT-3.5 已经问世，GPT-4 蓄势待发。虽然文章的主体论调偏（有理由的）消极，但是文章中的大量精彩类比，以及作者优美的文笔，令人击节称叹。也许你不一定认同作者关于大模型的观点，但你很难不被作者字里行间所流露出的深邃思考所打动。</p>\n<p>阅读这篇文章时，我曾多次感叹：“怎么写得这么好？”。我将页面拖动到顶部，仔细检查作者的名字——谜底揭开：“难怪，作者是特德·姜！”</p>\n<p>注：特德·姜，当代美国著名科幻作家，小说作品曾获得星云奖、雨果奖等多项大奖。<br>11. 《重新发明 Python notebook 时学到的教训》</p>\n<p>原文链接：<a href=\"https://marimo.io/blog/lessons-learned\">Lessons learned reinventing the Python notebook</a><br>作者：Akshay<br>一篇与产品设计有关的总结文章。文章主角是 marimo——一个类似 Jupyter 的 Python 笔记本软件。本文所涉及的内容包括：如何利用有向无环图让笔记总是可重现；为什么强约束的简单设计优于弱约束的复杂，等等。</p>\n<p>我很爱读这类文章，因为由技术人写的优秀产品设计经验，如珍珠般少见。</p>\n<ol start=\"12\">\n<li>《断点单步跟踪是一种低效的调试方法》</li>\n</ol>\n<p>原文链接： <a href=\"https://blog.codingnow.com/2018/05/ineffective_debugger.html\">断点单步跟踪是一种低效的调试方法</a><br>作者：云风<br>曾经的我以为编程像解数学题，不同人的解法或稍有区别，但终究殊途同归。然而最近两年，我发现编程更像是画画或写作，每个人信奉着自己的道。</p>\n<p>云风的这篇文章的标题，坦率来说有些骇人听闻，但仔细读过后，的确能感受到一种独特的编程智慧，一种专属于有着数十年经验的编程匠人的哲思。</p>\n<ol start=\"13\">\n<li>《作为“胶水”》</li>\n</ol>\n<p>原文链接：<a href=\"https://noidea.dog/glue\">Being Glue</a><br>作者：Tanya Reilly<br>软件工程师的日常工作除编码以外，还有大量其他事务，比如总结文档、优化工具链等，作者将这类事务统称为“胶水工作”。</p>\n<p>胶水工作看似不起眼，但对于项目的成败至关重要。本文指出了一个被人忽视的事实：承担更多胶水工作的有责任心的工程师，反而更不易晋升。针对这一点，作者提供了一些有用的建议。</p>\n<ol start=\"14\">\n<li>《拥抱苦差事》</li>\n</ol>\n<p>原文链接：<a href=\"https://jacobian.org/2021/apr/7/embrace-the-grind/\">Embrace the Grind</a><br>中文翻译：<a href=\"https://www.piglei.com/articles/embrace-the-grind-cn-translation/\">拥抱苦差事</a><br>作者：Jacob Kaplan-Moss<br>本文以一个魔术揭秘开头，引出作者如何通过完成“苦差事”，将整个开发团队拉出泥沼的故事；之间穿插着对程序员金句“懒惰是程序员的美德”的思考。</p>\n<p>重读这篇文章时，我想起最近在一本书上看到的另一句话，大意是这样的：“外行人做事时渴求及时反馈与成就感，而专业人士在一切变得乏味后，仍然继续向前。”</p>\n<ol start=\"15\">\n<li>《也许是时候停止推荐〈代码整洁之道了〉》</li>\n</ol>\n<p>原文链接：<a href=\"https://qntm.org/clean\">It’s probably time to stop recommending Clean Code</a><br>作者：qntm<br>作为一本经典书籍，《代码整洁之道》长期出现在各类编程书单中。但是，本文作者发现，这本出版于十几年前的书中的大量内容已经过时，其中的不少代码示例质量糟糕。</p>\n<p>在这篇文章中，本文作者对书中的部分 Java 代码片段进行了几乎称得上是“凶残”的 Code Review。文章观点有一定争议性，但也不乏道理。</p>\n<ol start=\"16\">\n<li>《我在编辑时考虑的事》</li>\n</ol>\n<p>原文链接：<a href=\"https://evaparish.com/blog/how-i-edit\">What I think about when I edit</a><br>作者：Eva Parish<br>作为一名专业的技术写作者，作者 Eva 常常帮其他人编辑技术文档。久而久之，她总结出了 9 条编辑建议，比如：明确文章主题、有理由的重复，等等。</p>\n<p>虽然文章中的部分建议更适用于英文写作场景，但我仍然很推荐它。因为你很容易发现，这篇文章虽然信息量大，但读来非常流畅、舒服——我想这就是优秀的“编辑”带来的魔力。</p>\n<ol start=\"17\">\n<li>《修复流行 Python 库的内存泄露问题》</li>\n</ol>\n<p>原文链接：<a href=\"https://www.paulsprogrammingnotes.com/2021/12/python-memory-leaks.html\">Fixing Memory Leaks In Popular Python Libraries</a><br>作者：Paul Brown<br>这篇文章的标题很大，但其实只是一篇短文，里面的 Python 示例代码不超过 10 行。</p>\n<p>在一次黑客马拉松活动中， 本文作者和同事一起定位了 py-amqp 库的一个内存泄露问题。提交 PR 后，他在 redis-py 等流行的库中发现了类似的情况。问题和 Python 中的 try&#x2F;except 语句块有关，迷惑性很强。</p>\n<ol start=\"18\">\n<li>《UI 设计原则》</li>\n</ol>\n<p>原文链接：<a href=\"http://bokardo.com/principles-of-user-interface-design/\">Principles of_ User Interface Design</a><br>作者：Joshua Porter<br>文章总结了 19 条 UI 设计原则，包括：清晰最重要、让用户有掌控感、渐进式披露，等等。我最喜欢的是第 17 条原则：“伟大的设计是隐形的”，它让我想起一些优秀的开源软件库。</p>\n<p>虽然名为 UI 设计，但这些原则并不只属于设计师，我认为每个人都可以从中受益。作为程序员，每当我们写下一个函数定义语句，实际就是在做一次 UI 设计。</p>\n<ol start=\"19\">\n<li>《你的数据库技能不是“锦上添花”》</li>\n</ol>\n<p>原文链接：<a href=\"https://renegadeotter.com/2023/11/12/your-database-skills-are-not-good-to-have.html\">Your Database Skills Are Not ‘Good to Have’</a><br>作者：Andrei Taranchenko<br>在文章中，作者 Andrei 先分享了一个 20 年前的故事：用 MySQL 巧妙完成了一项困难的业务需求。然后引出文章主题：如今大家对数据库技能的关注度不应该这么低。</p>\n<p>我很认同作者对于关系数据库和 ORM 等工具的观点。有时候，当项目遇到性能问题时，分明加个索引、优化下查询就能解决，许多人却大喊着：“快点，上缓存！换 DB！”——实在大可不必。</p>\n<ol start=\"20\">\n<li>《预估开发时间很难，但还是得做》</li>\n</ol>\n<p>原文链接：<a href=\"https://jacobian.org/2021/may/20/estimation/\">Software Estimation Is Hard. Do It Anyway.</a><br>作者：Jacob Kaplan-Moss<br>在软件开发中，“估时间”是一项令人头疼的事。我们都曾有过类似的经历：拍胸脯说 3 天搞定的任务，最后足足耗费了大半个月。</p>\n<p>到后来，“估时间”成了到底留 1 倍还是 2 倍 buffer 的无聊游戏。但正如本文的标题所言，预估开发时间虽然难，却不可避免。这篇文章（系列）提供了一些与之相关的技巧，相信可以给你一些启发。</p>\n<ol start=\"21\">\n<li>《人生短暂》</li>\n</ol>\n<p>原文链接：<a href=\"https://paulgraham.com/vb.html\">Life Is Short</a><br>作者：Paul Graham<br>人生很短，到底该如何花费自己的时间？传奇投资人、程序员 Paul Graham 在文章中给出了他的建议。总结起来，一共 3 条：尽你所能地避免 bullshit 类事务，比如无用会议、网上吵架；对重要的事情不拖拉，意识到有些东西不会永远停在原地等你；珍惜你所拥有的每一滴时间。</p>\n<p>从任何角度看，上面这些建议都称不上有多新奇。但是，作者通过真诚地分享自身经历和感受，给内容注入了不一样的灵魂。或许你会像我一样，读后能获得一些新的感悟。</p>\n<ol start=\"22\">\n<li>《有“产品意识”的软件工程师》</li>\n</ol>\n<p>原文链接：<a href=\"https://blog.pragmaticengineer.com/the-product-minded-engineer/\">The Product-Minded Software Engineer</a><br>作者：Gergely Orosz<br>从事程序员越久，你大概率会越来越频繁地听到一个词：“产品意识”。人人都说产品意识好，但是它看不见摸不着，到底是个什么东西？是指程序员该自己画线框图？还是说程序员应该写用户故事？</p>\n<p>本文作者以软件工程师的视角，对“产品意识”做了全面的解读。简单来说，产品意识就是关注产品、对产品拥有好奇心、对用户拥有同理心；有产品意识的人在做技术方案时，不光思考工程角度，更能靠全局的“产品+工程”视角思考决策。</p>\n<p>“产品意识”——工程师们最为强大的思维杠杆之一。</p>\n<ol start=\"23\">\n<li>《Python 的 range 不是迭代器》</li>\n</ol>\n<p>原文链接：<a href=\"https://treyhunner.com/2018/02/python-range-is-not-an-iterator/\">Python: range is not an iterator</a><br>作者：Trey Hunner<br>range 是 Python 语言中最常用的内置对象之一，功能是生产一段数字序列，比如 range(10) &#x3D;&gt; 0, 1, …, 9。作为循环语句中被迭代的常客，range 常被误认为是一种迭代器（iterator）。但是，正如文章标题所说，虽然可被迭代，但 range 却并不是迭代器。</p>\n<p>可如果不是迭代器的话，range 究竟是什么？在文章中，作者用精要的说明和代码片段做出了解答。看起来像咬文嚼字，实则是相当重要的 Python 基础概念。</p>\n<p>😊 有关迭代器和可迭代对象这个主题，我也很推荐另一篇自己写的内容：<a href=\"https://www.piglei.com/book/ch06_loop.html\">《Python工匠》第六章 6.1.1 “迭代器与可迭代对象</a>”。</p>\n<ol start=\"24\">\n<li>《有关 TLS&#x2F;SSL 证书的一切》</li>\n</ol>\n<p>原文链接：<a href=\"https://www.kawabangga.com/posts/5330\">有关 TLS&#x2F;SSL 证书的一切</a><br>作者：laixintao<br>一篇和证书有关的科普文。</p>\n<p>虽是科普，但这篇和其他科普文章不太一样。你除了能读到一些轻松愉快的小故事，还会被一些不知从哪里冒出来的 shell 命令和大段伪代码“突然袭击”。看似不协调的素材，在作者的精心编排下，却如交响乐团般演奏出一段优美流畅的乐章，让人读来如沐春风。</p>\n<ol start=\"25\">\n<li>《让困难的事情变容易》</li>\n</ol>\n<p>原文链接：<a href=\"https://jvns.ca/blog/2023/10/06/new-talk--making-hard-things-easy/\">New talk: Making Hard Things Easy</a><br>作者：Julia Evans<br>也许是胡说八道，但我还是想说：技术人普遍有一种“复杂崇拜”情结。实践一门技术，人们常常会踩进许多坑、遇到很多困难，但大部分人对此绝口不提，仿佛抱怨一门技术过于复杂，会显得自己能力不足似的。</p>\n<p>尤其，当这些技术是大家口中公认的“基础技术”（比如 DNS、HTTP）时，更是如此。技术人接受复杂、理解复杂，最终认同复杂为理所当然。</p>\n<p>正因如此，我很喜欢 Julia Evans 的这个分享。它指出在许多所谓的“基础技术”背后，隐藏着太多难以掌握的复杂元素。不少人都会在它们上面栽跟斗，但并非所有人都会站出来，改善现状。</p>\n<p>所以，我们需要让复杂事物变得更容易。针对这一点，文章挑选了几种有代表性的技术，比如 DNS、BASH、SQL 等，提供了切实可行的建议，包括：分享有用的工具和参考文档、从大的功能列表中筛选你真正使用的、展示不可见的内容，等等。</p>\n<ol start=\"26\">\n<li>《The Hiring Post》</li>\n</ol>\n<p>原文链接：<a href=\"https://sockpuppet.org/blog/2015/03/06/the-hiring-post/\">The Hiring Post</a><br>作者：Thomas &amp; Erin Ptacek<br>作者在一家名为 Matasano 的安全公司任职。一天，他接到一份报告，其中描述了一种针对 DSA 的新型攻击手法。由于步骤复杂、条件苛刻，作者认为这种攻击方式有些不切实际，难以实施（时间以月为单位计算）。不过，他还是把报告分享到了团队中（忘了提及“不切实际”）。</p>\n<p>两天后，团队里一位名叫 Alex 的新人找到他，说自己完成了一个可工作的漏洞利用程序。</p>\n<p>Alex 非常优秀，但是，如果把时间拨回几年前，他根本不会被招进公司。他的简历平平无奇，而当时公司依赖简历和面试来招聘人才。直到后来，Matasano 公司优化了招聘策略，才挖掘出越来越多像 Alex 的人才。</p>\n<p>接着开篇的小故事，作者探讨了技术行业在人才招聘方面的一些问题。比方说，许多能力出众的候选人常因招聘环节不合理而无法通过面试。与之相对的是，一些善于面试、对抽象概念总能侃侃而谈的人，却能轻松拿到 offer。针对这些问题，文章给出了一些建议，比如：让候选人热身、使用接近工作场景的测试问题，等等。值得一读。</p>\n<ol start=\"27\">\n<li>《13 年后，我如何用 Go 写 HTTP 服务》</li>\n</ol>\n<p>原文链接：<a href=\"https://grafana.com/blog/2024/02/09/how-i-write-http-services-in-go-after-13-years/\">How I write HTTP services in Go after 13 years</a><br>作者：Mat Ryer<br>一篇 Go 语言方面的最佳实践类文章，只涉及标准库中的 HTTP 基建，不涉及其他第三方 Web 框架或库。作者有十余年的 Go 编程经验，经验丰富。</p>\n<p>文章除了展示具体的代码编写与组织技巧，也谈了一些“为什么如此处理”背后的设计考量，包括：长参数列表的函数、请求编解码处理、用闭包结合 http.Handler、E2E 测试和单元测试，等等。透过这些考量，能感受到作者多年经验与智慧的沉淀。</p>\n<ol start=\"28\">\n<li>《Rust std fs 比 Python 更慢！？》</li>\n</ol>\n<p>原文链接：<a href=\"https://xuanwo.io/2023/04-rust-std-fs-slower-than-python/\">Rust std fs slower than Python!? No, it’s hardware!</a><br>作者：Xuanwo<br>一篇精彩的短篇侦探小说。</p>\n<p>有一天，Xuanwo 接到用户上报一个奇怪的案件：一段 Rust 实现的 Python SDK 中的文件操作代码，执行起来却比原生 Python 代码更慢。一通排查后，更离谱的事件出现，不止 Rust，甚至同样的 C 代码也比 Python 更慢。但这怎么可能，Python 语言解释器本身都是用 C 写的呀？！</p>\n<p>就像任何一篇精彩的侦探小说一样，最后，悬疑气氛推到最高点，凶手身份被揭露时，你会自言自语道：“意料之外，情理之中”。</p>\n<ol start=\"29\">\n<li>《选择乏味的技术》</li>\n</ol>\n<p>原文链接：<a href=\"https://boringtechnology.club/\">Choose Boring Technology</a><br>作者：Dan McKinley<br>作为技术人员，我们喜欢尝试新技术，这让我们感到快乐。但许多时候，比起闪闪发光的新玩意，“乏味”的技术才是更优的选择。</p>\n<p>当我们觉得一项技术“乏味”、痛恨它时，根本原因是我们过于了解它，无法从它身上获得任何新鲜感（比如 Django 之于我）。但别忘了，这同时也意味着我们对这项技术的每个坑都了如指掌。在项目中采用它，能让我们更容易专注在核心业务问题上。</p>\n<p>很喜欢本文里的“创新代币”比喻。“创新代币”是一种用来处理创造性任务的有限能力。假设你一共拥有 3 枚“创新代币”，你会如何花费它们？也许，和某个新奇的技术栈比起来，产品核心功能上的创新，更需要那枚代币。</p>\n<ol start=\"30\">\n<li>《Python 3.10 中的结构化模式匹配》</li>\n</ol>\n<p>原文链接：<a href=\"https://benhoyt.com/writings/python-pattern-matching/\">Structural pattern matching in Python 3.10</a><br>作者：Ben Hoyt<br>在 3.10 版本中，Python 新增了“结构化模式匹配”语法（ match … case）。因为看上去和 switch … case 语句十分相似，不少人认为“结构化模式匹配”就是 switch 换皮。但事实上，它和 switch 语句有着比较大的差异，用作者的话讲：它更适合被当成“迭代式解包”来理解。</p>\n<p>本文发布于 2021 年（Python 3.10 发布前夕），其中简单介绍了“结构化模式匹配”的功能，并列举了一些它最适用的代码场景。在总结中，针对该语法的未来，作者持略为悲观的复杂态度。</p>\n<p>和“结构化模式匹配”相关的文章中，除几篇 PEP 之外，我认为这是最值得阅读的一篇。</p>\n<ol start=\"31\">\n<li>《你想要的是模块，不是微服务》</li>\n</ol>\n<p>原文链接：<a href=\"https://blogs.newardassociates.com/blog/2023/you-want-modules-not-microservices.html\">You Want Modules, Not Microservices</a><br>作者：Neward &amp; Associates<br>文章的开头很有意思。从一篇介绍微服务的文章中，作者摘抄出了微服务架的 10 条优势。随后，他逐条分析这些优势，发现其中至少有一半，可以原封不动地套用在“模块”上。</p>\n<p>“只关注一小块代码”、“独立开发”、“版本化”、“独立发布”——以上能力模块无一不具备。对了，此处谈及的“模块”，就是那个诞生于 20 世纪 70 年代的技术概念，也是如今所有编程语言的标配能力。</p>\n<p>分析完模块和微服务的相似性后，文章继续层层推进，试着回答一个重要问题：微服务架构解决的本质矛盾究竟是什么？</p>\n<ol start=\"32\">\n<li>《我不喜欢 Go 语言默认的 HTTP Handlers》</li>\n</ol>\n<p>原文链接：<a href=\"https://preslav.me/2022/08/09/i-dont-like-golang-default-http-handlers/\">I Don’t Like Go’s Default HTTP Handlers</a><br>作者：Preslav Rachev<br>在编写 HTTP handler 函数时，作者意识到这类函数存在一个设计问题，它会促使人们写出有 bug 的代码。该问题大多数 Go 开发者都知道（也可能犯过）：回写响应体后忘记 return，导致代码错误地继续执行。为了优化它，作者提出了一种思路。</p>\n<p>技术层面上，这是一篇非常简单的文章，最终方案也无非是“多封装一层”而已。不过，我喜欢作者对细节的关注，也认可文章的价值观：通过优化工具与环境，来杜绝人类犯错的可能性。</p>\n<ol start=\"33\">\n<li>《对人类更友好的“超时”与“取消”》</li>\n</ol>\n<p>原文链接：<a href=\"https://vorpus.org/blog/timeouts-and-cancellation-for-humans/\">Timeouts and cancellation for humans</a><br>作者：Nathaniel J. Smith<br>做网络编程时，“超时配置”是一个非常重要但又常常被忽视的细节。不当的超时配置就像是鞋底里的一粒沙，开始你甚至觉察不到它的存在，但随着时间累积，沙子会磨破脚底，产生巨大危害。</p>\n<p>“作为最常见的超时配置方式，为什么 get(url, timeout&#x3D;10) 这类 API 不够好？”</p>\n<p>从这个问题出发，作者列举并分析了一些常见的超时 API 设计，最后详细介绍了 trio 库的相关功能。作者认为它是一种“对人类更友好”的设计。</p>\n<ol start=\"34\">\n<li>《20 年软件工程师生涯，学到 20 件事》</li>\n</ol>\n<p>原文链接：<a href=\"https://www.simplethread.com/20-things-ive-learned-in-my-20-years-as-a-software-engineer/\">20 Things I’ve Learned in my 20 Years as a Software Engineer</a><br>作者：Justin Etheredge<br>从业 20 年后，软件工程师 Justin Etheredge 回顾自己的职业生涯，总结出了 20 条经验。这些经验短小精悍、富有洞见，我读后对其中大部分都很有共鸣。</p>\n<p>比如其中的第 5 条：“最好的工程师像设计师一样思考”。有许多次，我在一个问题卡住，苦思冥想，寻不到最优解。但当我转换思路，学着像设计师一样站在用户（或调用方、依赖方）角度思考时，答案呼之欲出。再比如其中的第 9 条：“问‘为什么‘，永远不嫌多”——旺盛的好奇心和求知欲，正是助我们精进技术的最佳催化剂。</p>\n<ol start=\"35\">\n<li>《为什么你的 mock 不工作》</li>\n</ol>\n<p>原文链接：<a href=\"https://nedbatchelder.com/blog/201908/why_your_mock_doesnt_work.html\">Why your mock doesn’t work</a><br>作者：Ned Batchelder<br>用 Python 写测试代码时，经常会用到 mock 模块。初次接触 mock，不少人都遇到过 mock 不生效的问题。明明用 mock.patch(…) 替换了模块，代码执行时，引用到的却依旧是原始值。</p>\n<p>Ned Batchelder 的这篇文章细致解释了“mock 不生效”问题。因为写的是个常见问题，所以文章中的知识点对你来说可能并不新鲜。但即便如此，我还是很推荐它。文章结构清晰、措辞准确，里面的每张示意图和每段代码，都出现得恰到好处。哪怕不为学知识，略读一遍后，也让人心情舒畅。在技术写作方面，能从中学到不少。</p>\n<p>同时推荐作者的另一篇文章：《Python 的名字和值》，内容与 mock 这篇有关联。</p>\n<ol start=\"36\">\n<li>《实用的 Go：来自真实世界的编写可维护 Go 程序的建议》</li>\n</ol>\n<p>原文链接：<a href=\"https://dave.cheney.net/practical-go/presentations/qcon-china.html\">Practical Go: Real world advice for writing maintainable Go programs</a><br>作者：Dave Cheney<br>互联网上，“Go 代码可读性“方面的资料不算太多，这篇或许是你能找到的最好的之一。</p>\n<p>本文包含数十条与提升 Go 代码可维护性有关的建议，覆盖从变量命名到 API 设计等多项主题，十分全面。我喜欢它最重要的原因，除了其写作质量上佳之外，还在于作者为每条建议精心搭配了示例代码，这些代码使得文章内容非常容易阅读，知识很好消化。一篇干货满满的经典之作，值得每位 Go 工程师阅读。</p>\n<ol start=\"37\">\n<li>《编写系统软件：代码注释》</li>\n</ol>\n<p>原文链接：<a href=\"http://antirez.com/news/124\">Writing system software: code comments.</a><br>作者：antirez<br>在“代码注释”这个主题上，Redis 作者 antirez 的这篇文章是我的最爱之一。通过整理 redis 项目里的所有注释，antirez 将注释一共划分成 9 类，各自承担不同功用。</p>\n<p>本文的独到之处，在于立足“用注释解释代码中的 ‘why？’”这条共识上，重点介绍了“教学性&#x2F;指引性注释”这类不太常规的注释。文章提到，指引性注释是 redis 中数量最多的注释，充斥整个项目，人们认为 Redis 的源码可读性佳，指引性注释功不可没。</p>\n<p>某种程度上，这篇文章影响了我的编码习惯。再次回顾它，脑海闪过那句人们重复提及的老话： “代码主要是写给人看的，顺便被计算机执行。”</p>\n<ol start=\"38\">\n<li>《编写易于删除，而不是易于扩展的代码》</li>\n</ol>\n<p>原文链接：<a href=\"https://programmingisterrible.com/post/139222674273/write-code-that-is-easy-to-delete-not-easy-to\">Write code that is easy to delete, not easy to extend.</a><br>作者：tef<br>程序员们有一条朴素的共识：“重复代码坏，复用代码好“。这篇文章站在另一个角度，反思了这条共识。人们习惯于讨论复用的好处，却往往忽视了它的缺点：一段代码被复用越多，意味着它与更多的使用方产生了耦合关系，自然也导致它更难被修改。</p>\n<p>代码写出来后便需要被维护，而业务发展又会让旧代码不断过时。以这个为前提，重新思考软件项目的可维护性，会发现“易于删除”变成了一个形容代码的好特征。这篇文章或许写得没那么易读，但个中观点确能引发思考。</p>\n<ol start=\"39\">\n<li>《如何提出好问题》</li>\n</ol>\n<p>原文链接：<a href=\"https://jvns.ca/blog/good-questions/\">How to ask good questions</a><br>作者：Julia Evans<br>在人际沟通中，“善于提问”是一种顶级技能（ 评级：SSR✨）。在关键时刻提出一个好问题，能让沟通事半功倍，事情水到渠成。</p>\n<p>Julia Evans 的这篇文章，囊括了与提问有关的若干条经验和技巧，比如：向对方陈述并确认你所知道的现状；选择向谁提问；通过提问让不够显而易见的概念变得明确，等等。文章不止内容好，写作风格也是一如既往的友善、清晰易读，强力推荐。</p>\n<ol start=\"40\">\n<li>《每天写代码》</li>\n</ol>\n<p>原文链接：<a href=\"https://johnresig.com/blog/write-code-every-day/\">Write Code Every Day</a><br>作者：John Resig<br>程序员 John Resig （JQuery 库作者） 遇上了一件烦心事。他想完成一些兴趣项目（side projects），却发现在保证全职工作效率的前提下，很难推进。他常在每个周末疯狂赶工，力求完成更多，但压力和焦虑感总是爆棚，状态难以维系。</p>\n<p>有一天，在他人启发下，John 决定换一种策略：每天写代码。原本用整个周末投入兴趣项目，如今拆分到每一天，花不少于 30 分钟编程。半年后，他发现新策略产生了神奇的效果，他取得了超多成果：开发多个新网站、重写若干个框架、完成大量新模块。更重要的是，曾经困扰他的焦虑感，也烟消云散。</p>\n<p>我很喜欢这篇文章，它是程序员版本的“日拱一卒”，John 也是一位极好的榜样。</p>\n<ol start=\"41\">\n<li>《抽象泄露法则》</li>\n</ol>\n<p>原文链接：<a href=\"https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/\">The Law of Leaky Abstractions</a><br>作者：Joel Spolsky<br>用 AI，花 5 分钟开发一个新功能。验证时，却发现新功能在某个特殊情况下无法正常工作。为了解决这个 bug，你只能逐行排查调试。等修复好问题，一看表， 1 个小时过去了。</p>\n<p>上面的经历对你来说是否有些似曾相识？早在 2002 年，程序员 Joel Spolsky 就敏锐地发现了这类现象，并将它们总结为：“抽象泄露法则”。软件世界是一层抽象套着另一层的千层饼，就好像 HTTP 协议下有 TCP、TCP 下有 IP，每一层抽象都声称自己是完美的：“你无需关注在我之下的任何细节”。</p>\n<p>但事实却是，所有抽象必定泄露。而当抽象泄露时，就像要从 AI 的 1000 行代码里找到那个错误——事情非常棘手，但我们别无选择。</p>\n<ol start=\"42\">\n<li>《如何设计一个好的 API 及其重要性》</li>\n</ol>\n<p>原文链接：<a href=\"https://fwdinnovations.net/whitepaper/APIDesign.pdf\">How to Design a Good API and Why it Matters</a><br>演讲视频：<a href=\"https://www.youtube.com/watch?v=aAb7hSCtvGw&ab_channel=GoogleTechTalks\">How To Design A Good API and Why it Matters - Youtube</a><br>作者：Joshua Bloch<br>这份资料来自 Joshua Bloch（时任首席 Java 架构师）在 Google 公司的内部演讲。虽然距今已 17 年，但它读起来却没有任何过时的感觉，对现代软件开发仍具备指导价值。</p>\n<p>Joshua 系统性地阐述了 API 设计的方方面面。包括：</p>\n<p>带着怀疑的眼光收集用户用例（use cases）；<br>写代码前，先用最简单的文字描述 API（一页纸以内），并和相关人员讨论完善；<br>如果迟疑于是否提供某个功能，就先不要提供（后续新增比删除要简单得多）；<br>API 应当和它所被使用的平台和谐共存，比如 SDK 不应被原样从一门语言搬运到另一门。<br>如果你之前从未深入思考过 API 设计，读读看，它极有可能改变你未来开发软件的方式。</p>\n<ol start=\"43\">\n<li>《我构建软件的原则+实践“让无效状态不可表示”》</li>\n</ol>\n<p>原文链接：<a href=\"https://kevinmahoney.co.uk/articles/my-principles-for-building-software/\">My Principles for Building Software</a><br>原文链接：<a href=\"https://kevinmahoney.co.uk/articles/applying-misu/\">Applying “Make Invalid States Unrepresentable”</a><br>作者：Kevin Mahoney<br>关于软件开发原则的文章有很多，这篇的特别之处在于，作者 Kevin 着重强调了数据对于软件设计的影响。</p>\n<p>比如，Kevin 提出在设计时，应当优先考虑数据结构而不是代码，因为前者更为重要。正如《人月神话》的作者 Fred Brooks 曾经说过：“如果提供了程序流程图，而没有表数据，我仍然会很迷惑。而给我看表数据，往往就不再需要流程图，程序结构是非常清晰的。”</p>\n<p>Kevin 提到的另一条原则是“让无效状态不可表示”。软件的业务逻辑中，难免会存在一些“无效状态”。为了处理它们，代码常需要做一些额外工作。然而，通过调整数据结构设计，使得数据层无法表现无效状态后，程序复杂度就可以降低。《实践“让无效状态不可表示”》中有本原则的一个具体应用案例。</p>\n<p>除了上述原则外，文章中的其他原则，比如“关注基础概念而不是具体技术”、“避免用局部简单换取全局复杂”，等等，都充满智慧。</p>\n<ol start=\"44\">\n<li>《不，不是编译器的问题，从来都不是》</li>\n</ol>\n<p>原文链接：<a href=\"https://blog.plover.com/2017/11/12/\">No, it is not a compiler error. It is never a compiler error.</a><br>作者：Mark Dominus<br>一段代码的正常运行，依赖着无数隐藏在其背后的组件和库。当程序出现 bug 时，程序员不在第一时间怀疑自己的代码，而是去质疑那些久经考验的依赖库，从来不是一个明智的选择。正如文章的标题所言：“从来都不是编译器的问题。”</p>\n<p>然而，“编译器”也是由人编写，并非真的永远正确。“编译器”一旦犯错，问题的诡异程度常常会出乎意料。在文章的后半段，常年信奉“编译器不出错”的作者，还真就遇上了一次“编译器错误”。</p>\n<ol start=\"45\">\n<li>《关于在除夕前一天换了一个洗衣机的故事》</li>\n</ol>\n<p>原文链接：<a href=\"https://wklken.me/posts/2023/01/23/about-buy-a-new-washing-machine-before-chinese-new-year.html\">关于在除夕前一天换了一个洗衣机的故事</a><br>作者：wklken<br>一名程序员家中服役 6 年的洗衣机坏了，不能脱水。因为之前花大价钱换过一次排水泵，他以为这次是旧病复发，便决定置换一台新机器。可没想到的是，新洗衣机装好后同样不能脱水。</p>\n<p>本来只是一件普普通通的糟心事，但作者显然不这么想，他在文章后半居然从洗衣机转向了软件开发。从故障码到说明书，从 debug 到选品牌，真是很有意思。相当好的观察与思考。</p>\n<ol start=\"46\">\n<li>《你的函数是什么颜色？》</li>\n</ol>\n<p>原文链接：<a href=\"https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/\">What Color is Your Function?</a><br>作者：Bob Nystrom<br>有人发明了一门编程语言，它非常特别，因为它的函数以颜色来区分类型。函数一共有两种颜色：“红色”和“蓝色”。函数的颜色不止影响外观，更会影响你使用它们的方式，比方说：红函数只能调用红函数，不能调用蓝函数。</p>\n<p>虽然以上面这略为不知所云的内容开场，但这篇文章讨论的主题实际上相当严肃。在文章中，作者 Bob 分享了自己对异步编程风格一些思考（猜猜函数的“颜色”代表什么？），从回调、Promise，到线程和 await&#x2F;async，均有涉及。</p>\n<p>除了观点鞭辟入里，文章的写作质量也相当高。严肃内容间不时穿插一点作者的小幽默。对于爱好异步编程的人来说，这是一篇不可错过的佳作。</p>\n<ol start=\"47\">\n<li>《健康的文档》</li>\n</ol>\n<p>原文链接：<a href=\"https://vadimkravcenko.com/shorts/proper-documentation/\">Healthy Documentation</a><br>作者：Vadim Kravcenko<br>程序员们是一个奇怪的群体，他们对许多事物持有矛盾态度，“文档”就是其中之一。</p>\n<p>作为消费者时，每位程序员都希望自己所使用的每个 API、函数，接手的每个系统都能找到详尽而准确的文档。而当他摇身一变，变成生产者时，却很少愿意在“写文档”这件事上投入精力——常常是“宁编百行码，不写一行字”。</p>\n<p>然而，文档对于软件开发的重要性毋庸置疑。正如作者提到：“每个未被记录下的东西，都等同于一种资源的浪费，会在未来带来麻烦。”通过写文档，我们将自己脑中的知识具象化，从而在未来帮助到其他人。对于个人而言，文档不仅是一种学习、交流和分享知识的工具，也是一种建立个人影响力的捷径。而对于团队来说，如果每位成员都重视文档的价值，乐于编写清晰、可靠的文档来替代无休止的会议，那么这种“文档优先”的氛围，对于团队的长期发展大有裨益。</p>\n<ol start=\"48\">\n<li>《如何像人类一样做代码评审》</li>\n</ol>\n<p>原文链接：<a href=\"https://mtlynch.io/human-code-reviews-1/\">How to Do Code Reviews Like a Human (Part One)</a><br>作者：Micheal Lynch<br>一篇关于代码评审的文章，里面涵盖了许多入门和进阶经验，包括：别把评审时间花在风格与样式问题上，让工具来代劳；评论应该以“请求”的口吻，而不是“命令”；评审不是只找缺点，对于好代码应该不吝赞美，等等。</p>\n<p>强烈推荐给每一位需要参与代码评审的程序员。</p>\n<ol start=\"49\">\n<li>《关于 Python 3.13 你需要了解的一切 - JIT 和 GIL》</li>\n</ol>\n<p>原文链接：<a href=\"https://drew.silcock.dev/blog/everything-you-need-to-know-about-python-3-13/\">Everything you need to know about Python 3.13 – JIT and GIL went up the hill</a><br>作者：Drew Silcock<br>Python 3.13 版本引入了许多激动人心的改动，比如基于 “copy-and-patch”技术的即时编译（JIT），以及终于去掉了全局解释器锁（GIL）的“自由线程”模式，等等。</p>\n<p>Drew 的这篇文章介绍了以上改动。文章的写作风格非常友好，内容也很全面。既有零基础的概念科普，也有实际的代码实验与 benchmark 环节。知识多，篇幅却控制得恰到好处，推荐阅读。</p>\n<ol start=\"50\">\n<li>《入行 14 年，我还是觉得编程很难》</li>\n</ol>\n<p>原文链接：<a href=\"https://www.piglei.com/articles/programming-is-still-hard-after-14-years/\">入行 14 年，我还是觉得编程很难</a><br>作者：piglei<br>这是清单的第 50 篇，也标记着整个“程序员阅读清单”系列完成了一半。考虑再三，决定奉上拙作一篇，我把这作为对自己的一个小小鼓励。</p>\n<p>编程难吗？不同的人会有不同的答案。十几岁时，还在上学的我觉得编程很难，各类算法、API 让人头晕目眩。我期望多年以后，大量的开发经验会让编程变得像吃饭一样简单。</p>\n<p>如今十几年过去，编程好像只是变简单了那么一丁点，距离“像吃饭一样简单”还差得很远。</p>\n<p>在这篇文章里，我分享了自己对编程这件事的一些思考与总结。比如：打造高效试错的环境至关重要，编程的精髓是“创造”，等等，希望能对你有所启发。</p>\n"}],"PostAsset":[{"_id":"source/_posts/PlantUML绘制时序图/2024-12-03-18-25-51.png","slug":"2024-12-03-18-25-51.png","post":"cm4w2on6a0008stk8ck2990df","modified":0,"renderable":0},{"_id":"source/_posts/PlantUML绘制时序图/2024-12-03-18-26-46.png","slug":"2024-12-03-18-26-46.png","post":"cm4w2on6a0008stk8ck2990df","modified":0,"renderable":0},{"_id":"source/_posts/PlantUML绘制时序图/2024-12-03-18-31-43.png","slug":"2024-12-03-18-31-43.png","post":"cm4w2on6a0008stk8ck2990df","modified":0,"renderable":0},{"_id":"source/_posts/PlantUML绘制时序图/2024-12-03-18-36-06.png","slug":"2024-12-03-18-36-06.png","post":"cm4w2on6a0008stk8ck2990df","modified":0,"renderable":0},{"_id":"source/_posts/PlantUML绘制时序图/2024-12-03-18-39-41.png","slug":"2024-12-03-18-39-41.png","post":"cm4w2on6a0008stk8ck2990df","modified":0,"renderable":0},{"_id":"source/_posts/PlantUML绘制时序图/2024-12-03-18-45-50.png","slug":"2024-12-03-18-45-50.png","post":"cm4w2on6a0008stk8ck2990df","modified":0,"renderable":0},{"_id":"source/_posts/PlantUML绘制时序图/2024-12-03-18-47-52.png","slug":"2024-12-03-18-47-52.png","post":"cm4w2on6a0008stk8ck2990df","modified":0,"renderable":0},{"_id":"source/_posts/PlantUML绘制时序图/2024-12-03-18-48-51.png","slug":"2024-12-03-18-48-51.png","post":"cm4w2on6a0008stk8ck2990df","modified":0,"renderable":0},{"_id":"source/_posts/PlantUML绘制时序图/2024-12-03-18-49-25.png","slug":"2024-12-03-18-49-25.png","post":"cm4w2on6a0008stk8ck2990df","modified":0,"renderable":0},{"_id":"source/_posts/PlantUML绘制时序图/2024-12-03-18-54-55.png","slug":"2024-12-03-18-54-55.png","post":"cm4w2on6a0008stk8ck2990df","modified":0,"renderable":0},{"_id":"source/_posts/PlantUML绘制时序图/2024-12-03-18-57-08.png","slug":"2024-12-03-18-57-08.png","post":"cm4w2on6a0008stk8ck2990df","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cm4w2on690003stk83rz463fu","tag_id":"cm4w2on690005stk8f245cd9d","_id":"cm4w2on6a0007stk83aqm368x"},{"post_id":"cm9hzpk390000tzk8dwvfb8ca","tag_id":"cm9i11mpj0000nnk80h06988f","_id":"cm9i11mpk0001nnk8dkr5f1fr"}],"Tag":[{"name":"轻松一下","_id":"cm4w2on690005stk8f245cd9d"},{"name":"学习","_id":"cm9i11mpj0000nnk80h06988f"}]}}